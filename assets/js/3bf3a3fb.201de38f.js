"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[21339],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(a),p=o,h=u["".concat(l,".").concat(p)]||u[p]||m[p]||i;return a?n.createElement(h,r(r({ref:t},c),{},{components:a})):n.createElement(h,r({ref:t},c))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},39088:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=a(87462),o=(a(67294),a(3905));const i={title:"Release 1.7.0",author:"Charles Zhang",author_url:"https://github.com/dockerzhang",author_image_url:"https://avatars.githubusercontent.com/u/18047329?v=4",tags:["Apache InLong","Version"]},r=void 0,s={permalink:"/blog/2023/05/19/release-1.7.0",editUrl:"https://github.com/apache/inlong-website/edit/master/blog/blog/2023-05-19-release-1.7.0.md",source:"@site/blog/2023-05-19-release-1.7.0.md",title:"Release 1.7.0",description:"Apache InLong recently released version 1.7.0, which closed about 150+ issues, including 3+ major features and 40+ optimizations. The main features include support for sending data directly to Kafka, MySQL all-database migration with schema change support, GH-OST awareness for MySQL all-database migration, the addition of 4 batch import modes (CSV, SQL, JSON, and Excel), simplification of command line tool for creating data stream configurations, and refactoring of the Dashboard layout.",date:"2023-05-19T00:00:00.000Z",formattedDate:"May 19, 2023",tags:[{label:"Apache InLong",permalink:"/blog/tags/apache-in-long"},{label:"Version",permalink:"/blog/tags/version"}],readingTime:7.84,hasTruncateMarker:!0,authors:[{name:"Charles Zhang",url:"https://github.com/dockerzhang",imageURL:"https://avatars.githubusercontent.com/u/18047329?v=4"}],frontMatter:{title:"Release 1.7.0",author:"Charles Zhang",author_url:"https://github.com/dockerzhang",author_image_url:"https://avatars.githubusercontent.com/u/18047329?v=4",tags:["Apache InLong","Version"]},prevItem:{title:"Release 1.8.0",permalink:"/blog/2023/07/24/release-1.8.0"},nextItem:{title:"Release 1.6.0",permalink:"/blog/2023/03/23/release-1.6.0"}},l={authorsImageUrls:[void 0]},d=[{value:"About Apache InLong",id:"about-apache-inlong",level:2},{value:"1.7.0 Overview",id:"170-overview",level:2},{value:"Agent Module",id:"agent-module",level:3},{value:"DataProxy Module",id:"dataproxy-module",level:3},{value:"Manager Module",id:"manager-module",level:3},{value:"Sort Module",id:"sort-module",level:3},{value:"Dashboard Module",id:"dashboard-module",level:3},{value:"Other",id:"other",level:3},{value:"1.7.0 Feature Introduction",id:"170-feature-introduction",level:2},{value:"Support for sending data directly to Kafka",id:"support-for-sending-data-directly-to-kafka",level:3},{value:"MySQL all-database migration with schema change support",id:"mysql-all-database-migration-with-schema-change-support",level:3},{value:"GH-OST awareness for MySQL all-database migration",id:"gh-ost-awareness-for-mysql-all-database-migration",level:3},{value:"Addition of 4 batch import modes (CSV, SQL, JSON, and Excel)",id:"addition-of-4-batch-import-modes-csv-sql-json-and-excel",level:3},{value:"Simplification of command line tool for creating data stream configurations",id:"simplification-of-command-line-tool-for-creating-data-stream-configurations",level:3},{value:"Refactoring of the Dashboard layout",id:"refactoring-of-the-dashboard-layout",level:3},{value:"Follow-up planning",id:"follow-up-planning",level:2}],c={toc:d},u="wrapper";function m(e){let{components:t,...i}=e;return(0,o.kt)(u,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Apache InLong recently released version 1.7.0, which closed about 150+ issues, including 3+ major features and 40+ optimizations. The main features include support for sending data directly to Kafka, MySQL all-database migration with schema change support, GH-OST awareness for MySQL all-database migration, the addition of 4 batch import modes (CSV, SQL, JSON, and Excel), simplification of command line tool for creating data stream configurations, and refactoring of the Dashboard layout."),(0,o.kt)("h2",{id:"about-apache-inlong"},"About Apache InLong"),(0,o.kt)("p",null,"As the industry's first one-stop open-source massive data integration framework, Apache InLong provides automatic, safe, reliable, and high-performance data transmission capabilities to facilitate businesses to build stream-based data analysis, modeling, and applications quickly. At present, InLong is widely used in various industries such as advertising, payment, social networking, games, artificial intelligence, etc., serving thousands of businesses, among which the scale of high-performance scene data exceeds 1 trillion lines per day, and the scale of high-reliability scene data exceeds 10 trillion lines per day."),(0,o.kt)("p",null,'The core keywords of InLong project positioning are "one-stop" and "massive data". For "one-stop", we hope to shield technical details, provide complete data integration and support services, and implement out-of-the-box; With its advantages, such as multi-cluster management, it can stably support larger-scale data volumes based on trillions lines per day.'),(0,o.kt)("h2",{id:"170-overview"},"1.7.0 Overview"),(0,o.kt)("p",null,"Apache InLong recently released version 1.7.0, which closed about 150+ issues, including 3+ major features and 40+ optimizations. The main features include support for sending data directly to Kafka, MySQL all-database migration with schema change support, GH-OST awareness for MySQL all-database migration, the addition of 4 batch import modes (CSV, SQL, JSON, and Excel), simplification of command line tool for creating data stream configurations, and refactoring of the Dashboard layout. This version also includes a large number of other features, mainly consisting of:"),(0,o.kt)("h3",{id:"agent-module"},"Agent Module"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Support for sending data directly to Kafka, bypassing DataProxy"),(0,o.kt)("li",{parentName:"ul"},"Agent optimization, improving file collection and transmission performance"),(0,o.kt)("li",{parentName:"ul"},"Fixed the issue of Reader creation failure during MySQL data collection")),(0,o.kt)("h3",{id:"dataproxy-module"},"DataProxy Module"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Simplify common configuration and related control logic"),(0,o.kt)("li",{parentName:"ul"},"Code optimization, cleaning up invalid configurations in ConfigManager")),(0,o.kt)("h3",{id:"manager-module"},"Manager Module"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add PostgreSQL and Redis data node management"),(0,o.kt)("li",{parentName:"ul"},"Add heartbeat timeout status for data sources"),(0,o.kt)("li",{parentName:"ul"},"Add 4 batch import modes: CSV, SQL, JSON, and Excel"),(0,o.kt)("li",{parentName:"ul"},"Simplify command-line tools, including data stream creation logic"),(0,o.kt)("li",{parentName:"ul"},"Support restarting and stopping data source tasks in data streams"),(0,o.kt)("li",{parentName:"ul"},"Add connectivity tests for Redis and Kudu")),(0,o.kt)("h3",{id:"sort-module"},"Sort Module"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Mask sensitive information of Flink SQL-related data sources/targets in logs"),(0,o.kt)("li",{parentName:"ul"},"Optimize the logic for calculating object byte size and related metrics"),(0,o.kt)("li",{parentName:"ul"},"Support extracting DDL and operations from raw data"),(0,o.kt)("li",{parentName:"ul"},"Add rate control when writing to Iceberg"),(0,o.kt)("li",{parentName:"ul"},"Support schema changes in MySQL full-database migration"),(0,o.kt)("li",{parentName:"ul"},"In full-database migration, MySQL Connector supports detecting GH-OST DDLs")),(0,o.kt)("h3",{id:"dashboard-module"},"Dashboard Module"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add CSV, SQL, JSON, and Excel batch import pages for 4 import modes"),(0,o.kt)("li",{parentName:"ul"},"Optimize Clickhouse flow configuration, supporting ttl/engine and other configurations"),(0,o.kt)("li",{parentName:"ul"},"Refactor Dashboard layout, improving display experience"),(0,o.kt)("li",{parentName:"ul"},"Optimize the creation process for data sources and data targets")),(0,o.kt)("h3",{id:"other"},"Other"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Fix multiple MySQL-related security vulnerabilities"),(0,o.kt)("li",{parentName:"ul"},"TubeMQ Golang SDK supports production, completing the first phase of development"),(0,o.kt)("li",{parentName:"ul"},"Optimize InLong development tool support for MacOS and Linux"),(0,o.kt)("li",{parentName:"ul"},"Optimize Pulsar Client dependency to reduce installation package size")),(0,o.kt)("h2",{id:"170-feature-introduction"},"1.7.0 Feature Introduction"),(0,o.kt)("h3",{id:"support-for-sending-data-directly-to-kafka"},"Support for sending data directly to Kafka"),(0,o.kt)("p",null,'In previous versions, InLong supported sending data directly from Agent to Pulsar without going through DataProxy. With this design, users with simple data scenarios and who want to ensure data integrity as much as possible can reduce their dependency on DataProxy. For users accustomed to using Kafka, version 1.7.0 supports the feature of sending data directly from Agent to Kafka. Thanks to @wangpeix for the complete contribution, and details can be found in INLONG-7783. If you want to experience this feature, you can choose "Send to MQ, and respond after MQ receives" during the data stream approval process.'),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1.7.0-kafka-stream",src:a(59943).Z,width:"796",height:"306"})),(0,o.kt)("h3",{id:"mysql-all-database-migration-with-schema-change-support"},"MySQL all-database migration with schema change support"),(0,o.kt)("p",null,"As community users delve deeper into using InLong, the drawbacks of not supporting schema changes become increasingly apparent. After the source end changes the DDL, the task needs to modify the configuration and restart, significantly increasing operational costs. In the current version, InLong supports automatic schema change capabilities. Upstream data sources can perceive Create, Alter, Drop, Truncate, and Rename DDL operations and synchronize these operations downstream. Meanwhile, downstream data sources can respond to upstream DDL changes and process them accordingly, supporting different processing strategies. For more details, refer to INLONG-7553. Thanks to @Emsnap, @yunqingmoswu, and @lordcheng10 for contributing to this feature. The following diagram illustrates the core process:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1.7.0-mysql-schema",src:a(72040).Z,width:"2118",height:"598"})),(0,o.kt)("p",null,'In the database, DDL messages are perceived by Debezium in the CDC. At this point, the data obtained is a single DDL statement, such as "DROP TABLE A". This statement is a field in the Debezium JSON. The DDL statement is then parsed into a DDL model by JSQLParser. This model parses common DDL messages and processes them into a JSON format that is easy for the program to handle. The DDL model will be sent to the Sink Operator in Flink as data, and the Operator will process the DDL model.'),(0,o.kt)("h3",{id:"gh-ost-awareness-for-mysql-all-database-migration"},"GH-OST awareness for MySQL all-database migration"),(0,o.kt)("p",null,"GH-OST (GitHub Online Schema Migration) is a trigger-free online schema migration solution for MySQL released by GitHub. It is testable and provides pause, dynamic control/reconfiguration, auditing, and many operational privileges. Throughout the migration process, it generates minimal workload on the primary server and is separated from the existing work on the migrated tables. By supporting GH-OST-aware DDL, the MySQL Connector can correctly handle table structure changes caused by GH-OST while capturing data changes. Thanks to @e-mhui for the complete contribution, and details of this feature can be found in INLONG-7554. The following diagram illustrates the core process:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1.7.0-mysql-ghost",src:a(70467).Z,width:"1500",height:"1099"})),(0,o.kt)("p",null,"First, after enabling the automatic DDL response for MySQL CDC, the ghc, gho, and del tables generated by GH-OST are also captured. Second, when perceiving the changes made by GH-OST to the gho table, the gho table in the DDL statement is replaced with the source table and stored in the state. Finally, after GH-OST completes the entire change process for the source table, the DDL statements previously stored in the state are sent downstream."),(0,o.kt)("h3",{id:"addition-of-4-batch-import-modes-csv-sql-json-and-excel"},"Addition of 4 batch import modes (CSV, SQL, JSON, and Excel)"),(0,o.kt)("p",null,"When creating data stream input metadata fields, we need to enter information such as name, type, and description in sequence. If we need to input hundreds or thousands of field information, this processing method is extremely inefficient. In version 1.7.0, InLong has added four batch import modes for CSV/SQL/JSON/Excel formats. Users only need to refer to the template for each format and fill in the selected information to achieve one-time import. Many thanks to @featzhang and @fuweng11 for their participation in the development of this feature. The four batch import modes are now supported by both front-end and back-end, and you can download the latest version for direct use."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1.7.0-batch-add",src:a(59322).Z,width:"634",height:"873"})),(0,o.kt)("h3",{id:"simplification-of-command-line-tool-for-creating-data-stream-configurations"},"Simplification of command line tool for creating data stream configurations"),(0,o.kt)("p",null,"In the before version, when creating a data stream using the command line, the JSON file content required was complex, and the file structure was not clear enough, making the threshold for users to create data streams through the command line very high. Additionally, when users wanted to reuse the file to create a new data stream, they had to modify many repetitive fields, such as inlongGroupID and inlongStreamID. In version 1.7.0, InLong has optimized the data stream configuration JSON structure and field configuration. Users can simply add Source/Sink content according to their data stream requirements, making creating a data stream much simpler than before. For more details, see INLONG-7778, and many thanks to @haifxu for the contribution.\nThe following example is a template for creating a File -> Pulsar -> Clickhouse in the new version:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "groupInfo": {\n        "inlongGroupId": "test_group_ctl",\n        "inlongClusterTag": "default_cluster",\n        "mqType": "PULSAR"\n    },\n    "streamInfo": {\n        "inlongStreamId": "test_stream_ctl",\n        "fieldList": [\n            {\n                "fieldName": "name",\n                "fieldType": "string"\n            }\n        ],\n        "sourceList": [\n            {\n                "sourceType": "FILE",\n                "sourceName": "test_source_ctl",\n                "agentIp": "127.0.0.1",\n                "pattern": "/data/test.txt"\n            }\n        ],\n        "sinkList": [\n            {\n                "sinkType": "CLICKHOUSE",\n                "sinkName": "test_sink_ctl",\n                "dataNodeName": "test_clickhouse",\n                "dbName": "db_test",\n                "tableName": "table_test",\n                "flushInterval": 1,\n                "flushRecord": 1000,\n                "retryTimes": 3,\n                "engine": "Log",\n                "isDistributed": 1,\n                "sinkFieldList": [\n                    {\n                        "sourceFieldName": "name",\n                        "sourceFieldType": "string",\n                        "fieldName": "name",\n                        "fieldType": "string"\n                    }\n                ]\n            }\n        ]\n    }\n}\n')),(0,o.kt)("h3",{id:"refactoring-of-the-dashboard-layout"},"Refactoring of the Dashboard layout"),(0,o.kt)("p",null,"In version 1.7.0, the community has refactored the overall layout of the Dashboard, including adjusting the top-bottom layout to a left-right layout (moving the navigation bar to the left), adding a dark theme, adding icons to the main menu, adjusting the data source selection display and process, etc. This adjustment has improved the user experience of the Dashboard. Special thanks to @leezng and @bluewang for their contributions. For more details, see INLONG-7734."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"1.7.0-dashboard-refactor",src:a(78408).Z,width:"2483",height:"623"})),(0,o.kt)("h2",{id:"follow-up-planning"},"Follow-up planning"),(0,o.kt)("p",null,"In version 1.7.0, the community has also improved the performance and stability of Agent file collection, while TubeMQ has completed the first phase of the Golang SDK production. Additionally, Sort can now consume using the subscription groups allocated by the Manager. In subsequent versions, InLong will support multiple Apache Flink versions, including not only the current Flink 1.13 but also Flink 1.15. Furthermore, tenant management will be added to unify the models of InLong projects, users, and resources. We look forward to more developers participating and contributing."))}m.isMDXComponent=!0},59322:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/1.7.0-batch-add-cb20760ddfd10a324740d7cab2eb6037.png"},78408:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/1.7.0-dashboard-refactor-db0bc2de4ad3b4d7b958dc9011e41222.png"},59943:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/1.7.0-kafka-stream-881ad8ffdf3ab2db4ad849fed1c9deb0.png"},70467:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/1.7.0-mysql-ghost-c636b0dc81e758f18e5b73e00701bbe8.png"},72040:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/1.7.0-mysql-schema-dcac4a64b00ceca7b15bda71124bb92a.png"}}]);