"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[90961],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,g=p["".concat(d,".").concat(m)]||p[m]||c[m]||i;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},43485:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={title:"Overview",sidebar_position:1},l=void 0,o={unversionedId:"modules/audit/overview",id:"modules/audit/overview",title:"Overview",description:"InLong audit is a subsystem independent of InLong, which performs real-time audit and reconciliation on the incoming and outgoing traffic of the Agent, DataProxy, and Sort modules of the InLong system.",source:"@site/docs/modules/audit/overview.md",sourceDirName:"modules/audit",slug:"/modules/audit/overview",permalink:"/docs/next/modules/audit/overview",draft:!1,editUrl:"https://github.com/apache/inlong-website/edit/master/docs/modules/audit/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Overview",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Pulsar2kafka Example",permalink:"/docs/next/modules/sort-standalone/pulsar2kafka"},next:{title:"Configuration",permalink:"/docs/next/modules/audit/configure"}},d={},s=[{value:"Architecture",id:"architecture",level:2},{value:"Audit Dimension",id:"audit-dimension",level:2},{value:"Audit ID",id:"audit-id",level:2},{value:"Data Transfer Protocol",id:"data-transfer-protocol",level:2},{value:"Audit SDK Implementation Details",id:"audit-sdk-implementation-details",level:2},{value:"Target",id:"target",level:3},{value:"Service Discovery",id:"service-discovery",level:3},{value:"Disaster Recovery",id:"disaster-recovery",level:3},{value:"Access layer Implementation",id:"access-layer-implementation",level:2},{value:"Target",id:"target-1",level:3},{value:"Distribution Implementation",id:"distribution-implementation",level:2},{value:"Target",id:"target-2",level:3},{value:"OpenAPI Implementation",id:"openapi-implementation",level:2},{value:"Architecture",id:"architecture-1",level:3},{value:"UI Interface display",id:"ui-interface-display",level:3},{value:"Architecture",id:"architecture-2",level:3}],u={toc:s},p="wrapper";function c(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"InLong audit is a subsystem independent of InLong, which performs real-time audit and reconciliation on the incoming and outgoing traffic of the Agent, DataProxy, and Sort modules of the InLong system.\nThere are three granularities for reconciliation: minutes, hours, and days."),(0,r.kt)("p",null,"The audit reconciliation is based on the log reporting time, and each service participating in the audit will conduct real-time reconciliation according to the same log time. Through audit reconciliation, we can clearly understand InLong\nThe transmission status of each module, and whether the data stream is lost or repeated"),(0,r.kt)("h2",{id:"architecture"},"Architecture"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(77509).Z,width:"1372",height:"504"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The audit SDK is nested in the service that needs to be audited, audits the service, and sends the audit result to the audit access layer"),(0,r.kt)("li",{parentName:"ol"},"The audit proxy writes audit data to MQ (Pulsar, Kafka or TubeMQ)"),(0,r.kt)("li",{parentName:"ol"},"The distribution service consumes the audit data of MQ, and writes the audit data to MySQL, Elasticsearch and ClickHouse."),(0,r.kt)("li",{parentName:"ol"},"The interface layer encapsulates the data of MySQL, Elasticsearch and ClickHouse."),(0,r.kt)("li",{parentName:"ol"},"Application scenarios mainly include report display, audit reconciliation, etc."),(0,r.kt)("li",{parentName:"ol"},"Support audit and reconciliation of data supplementary recording scenarios."),(0,r.kt)("li",{parentName:"ol"},"Support audit reconciliation in Flink checkpoint scenarios.")),(0,r.kt)("h2",{id:"audit-dimension"},"Audit Dimension"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Machine ip"),(0,r.kt)("td",{parentName:"tr",align:null},"Container ID"),(0,r.kt)("td",{parentName:"tr",align:null},"Thread ID"),(0,r.kt)("td",{parentName:"tr",align:null},"Log time (minutes)"),(0,r.kt)("td",{parentName:"tr",align:null},"Audit ID"),(0,r.kt)("td",{parentName:"tr",align:null},"inlong_group_id"),(0,r.kt)("td",{parentName:"tr",align:null},"inlong_stream_id"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of records"),(0,r.kt)("td",{parentName:"tr",align:null},"Size"),(0,r.kt)("td",{parentName:"tr",align:null},"Transmission delay (ms)")))),(0,r.kt)("h2",{id:"audit-id"},"Audit ID"),(0,r.kt)("p",null,"The receiving and sending of each module are respectively an independent audit item ID"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Inlong Service Module"),(0,r.kt)("th",{parentName:"tr",align:null},"Audit ID"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Inlong API Received Successfully"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Inlong API Send Successfully"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Inlong Agent Received Successfully"),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Inlong Agent Send Successfully"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Inlong DataProxy Received Successfully"),(0,r.kt)("td",{parentName:"tr",align:null},"5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Inlong DataProxy Send Successfully"),(0,r.kt)("td",{parentName:"tr",align:null},"6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Inlong Sort Received Successfully"),(0,r.kt)("td",{parentName:"tr",align:null},"7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Inlong Sort Send Successfully"),(0,r.kt)("td",{parentName:"tr",align:null},"8")))),(0,r.kt)("h2",{id:"data-transfer-protocol"},"Data Transfer Protocol"),(0,r.kt)("p",null,"The transmission protocol between sdk, access layer, and distribution layer is Protocol Buffers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markdown"},'syntax = "proto3";\n\npackage org.apache.inlong.audit.protocol;\n\nmessage BaseCommand {\n    enum Type {\n        PING          = 0;\n        PONG          = 1;\n        AUDITREQUEST  = 2;\n        AUDITREPLY    = 3;\n    }\n    Type type                            = 1;\n    optional AuditRequest audit_request  = 2;\n    optional AuditReply audit_reply      = 3;\n    optional Ping ping                   = 4;\n    optional Pong pong                   = 5;\n}\n\nmessage Ping {\n}\n\nmessage Pong {\n}\n\nmessage AuditRequest {\n  AuditMessageHeader msg_header = 1;   \n  repeated AuditMessageBody msg_body = 2;   \n}\n\nmessage AuditMessageHeader {\n  string ip = 1;            \n  string docker_id = 2;     \n  string thread_id = 3;     \n  uint64 sdk_ts = 4;        \n  uint64 packet_id = 5;     \n}\n\nmessage AuditMessageBody {\n  uint64 log_ts = 1;   \n  string inlong_group_id= 2;   \n  string inlong_stream_id= 3; \n  string audit_id = 4;   \n  uint64 count = 5;     \n  uint64 size = 6;      \n  int64  delay = 7;      \n}\n\nmessage AuditReply {\n  enum RSP_CODE {\n    SUCCESS  = 0;  \n    FAILED   = 1;   \n    DISASTER = 2; \n  }\n  RSP_CODE rsp_code = 1;   \n  optional string message = 2;\n}\n')),(0,r.kt)("h2",{id:"audit-sdk-implementation-details"},"Audit SDK Implementation Details"),(0,r.kt)("h3",{id:"target"},"Target"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"1. Support local disaster recovery")),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"2. Data Uniqueness")),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"3. Reduce data loss caused by abnormal restart"))),(0,r.kt)("h3",{id:"service-discovery"},"Service Discovery"),(0,r.kt)("p",null,"Audit name discovery between sdk and access layer, support plug-in, including domain name, vip, etc."),(0,r.kt)("h3",{id:"disaster-recovery"},"Disaster Recovery"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the SDK fails to send the access layer, it will be placed in the failure queue. "),(0,r.kt)("li",{parentName:"ul"},"When the failure queue reaches the threshold, it will be written to the local disaster recovery file. "),(0,r.kt)("li",{parentName:"ul"},"When the local disaster recovery file reaches the threshold, the old data will be eliminated (eliminated by time).")),(0,r.kt)("h2",{id:"access-layer-implementation"},"Access layer Implementation"),(0,r.kt)("h3",{id:"target-1"},"Target"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"1.High reliability")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"2.at least once"))),(0,r.kt)("h2",{id:"distribution-implementation"},"Distribution Implementation"),(0,r.kt)("h3",{id:"target-2"},"Target"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"1. High real-time performance (minute level)")),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"2. Can operate tens of billions of audit data per day")),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"3. Can be deduplicated"))),(0,r.kt)("h2",{id:"openapi-implementation"},"OpenAPI Implementation"),(0,r.kt)("h3",{id:"architecture-1"},"Architecture"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(31556).Z,width:"1141",height:"554"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The audit interface layer provides OpenAPI capabilities to the outside world through real-time aggregation and local caching of multiple audit data sources.")),(0,r.kt)("h3",{id:"ui-interface-display"},"UI Interface display"),(0,r.kt)("h3",{id:"architecture-2"},"Architecture"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(95563).Z,width:"1735",height:"931"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The front-end page pulls the audit data of each module through the interface layer and displays it.")))}c.isMDXComponent=!0},77509:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/audit_architecture-1265ff1150dc476eac05e0d01e6b5d4e.png"},31556:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/audit_openapi-ba394af87a5c7ce3313b8e49526a291f.png"},95563:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/audit_ui-51d52c5abdbf1615d329fe78b407e151.png"}}]);