"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[11477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/07/24/release-1.8.0","metadata":{"permalink":"/blog/2023/07/24/release-1.8.0","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2023-07-24-release-1.8.0.md","source":"@site/blog/2023-07-24-release-1.8.0.md","title":"Release 1.8.0","description":"Apache InLong recently released version 1.8.0, which closed about 190+ issues, including 6+ major features and 30+ optimizations. The main improvements include multi-tenant management, support for multiple Apache Flink versions, data synchronization in Dashboard, data preview support, and optimization of ultra-long log processing logic. After the release of 1.8.0, Apache InLong has completed the layout of full-scenario data integration around data access, data synchronization, and data subscription, combined with multi-tenant management, multi-cluster management, approval flow management, and full-link audit/metrics.","date":"2023-07-24T00:00:00.000Z","formattedDate":"July 24, 2023","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Version","permalink":"/blog/tags/version"}],"readingTime":7.32,"hasTruncateMarker":true,"authors":[{"name":"Verne Deng","url":"https://github.com/vernedeng","imageURL":"https://avatars.githubusercontent.com/u/45282474?v=4"}],"frontMatter":{"title":"Release 1.8.0","author":"Verne Deng","author_url":"https://github.com/vernedeng","author_image_url":"https://avatars.githubusercontent.com/u/45282474?v=4","tags":["Apache InLong","Version"]},"nextItem":{"title":"Release 1.7.0","permalink":"/blog/2023/05/19/release-1.7.0"}},"content":"Apache InLong recently released version 1.8.0, which closed about 190+ issues, including 6+ major features and 30+ optimizations. The main improvements include multi-tenant management, support for multiple Apache Flink versions, data synchronization in Dashboard, data preview support, and optimization of ultra-long log processing logic. After the release of 1.8.0, Apache InLong has completed the layout of full-scenario data integration around data access, data synchronization, and data subscription, combined with multi-tenant management, multi-cluster management, approval flow management, and full-link audit/metrics.\\n\x3c!--truncate--\x3e\\n\\n## About Apache InLong\\nAs the industry\'s first one-stop, full-scenario, open-source massive data integration framework, Apache InLong provides automatic, safe, reliable, and high-performance data transmission capabilities to facilitate businesses to build stream-based data analysis, modeling, and applications quickly. At present, InLong is widely used in various industries such as advertising, payment, social networking, games, artificial intelligence, etc., serving thousands of businesses, among which the scale of high-performance scene data exceeds 1 trillion lines per day, and the scale of high-reliability scene data exceeds 10 trillion lines per day.\\n\\nThe core keywords of InLong project positioning are \\"one-stop\\" and \\"massive data\\". For \\"one-stop\\", we hope to shield technical details, provide complete data integration and support services, and implement out-of-the-box; With its advantages, such as multi-cluster management, it can stably support larger-scale data volumes based on trillions of lines per day.\\n\\n## Overview of version 1.8.0\\nApache InLong recently released version 1.8.0, which closed about 190+ issues, including 6+ major features and 30+ optimizations, mainly completing multi-tenant management, support for multiple Apache Flink versions, data synchronization in Dashboard, data preview support, and optimization of ultra-long log processing logic. After the release of 1.8.0, Apache InLong has completed the layout of full-scenario data integration around data access, data synchronization, and data subscription, combined with multi-tenant management, multi-cluster management, approval flow management, and full-link audit/metrics. Apache InLong has built a comprehensive data integration solution, achieving out-of-the-box usability:\\n\\n- Data access: Data access is the process of aggregating data from data sources to the same storage service for further data querying and analysis;\\n- Data synchronization: Data synchronization is the process of establishing consistency between data sources and target data storage, which can coordinate data over time;\\n- Data subscription: Data subscription provides subscribers with the data they are authorized to access;\\n\\nIn version 1.8.0 of Apache InLong, many other features have also been completed, mainly including:\\n\\n### Agent module\\n- Optimized ultra-long log processing logic, improving file collection efficiency and stability\\n- Fixed the issue of thread leakage caused by task termination\\n- Adopted flow control to solve the OOM problem caused by file number growth\\n\\n### DataProxy module\\n- Support for Golang SDK\\n- Support for configuring black and white lists based on full IP or CIDR format IP segments\\n- Support for configuring the maximum number of write retries\\n- Support for sending data to the default Topic when write fails\\n- Code refactoring, unified configuration acquisition method\\n\\n### Sort module\\n- Enhanced DDL parsing capability, improving the stability of DDL-aware scenarios\\n- Support for multiple Flink versions\\n- Support for Decimal precision recognition in whole-library scenarios\\n- Hive supports whole-library migration, with the implementation consistent with MySQL whole-library migration\\n- Iceberg supports automatic column updates and column deletions, greatly enriching Schema change capabilities\\n\\n### Manager module\\n- Support for Pulsar, TubeMQ data preview\\n- Support for dynamic configuration of audit data sources\\n- Support for querying audit delay information\\n- Support for multi-tenant management\\n\\n### Dashboard module\\n- Support for data flow preview\\n- Support for viewing InLongGroup resource details\\n- Support for tenant management and tenant switching\\n- Support for data synchronization\\n\\n### Others\\n- Remove conflicting Jsqlparser versions\\n- Upgrade Spring-Boot-Autoconfigure version to 2.6.15\\n- Upgrade the Snappy-Java version to 1.1.10.1\\n- Fix syntax errors in Workflow configuration files\\n\\n## 1.8.0 Feature Introduction\\n### Agent optimizes ultra-long log processing logic, improving file collection efficiency and stability\\nIn actual use, due to improper use by users or bugs in data production programs, occasionally, a single data length reaches MB or even GB level. For Agents deployed in low-profile environments, this type of data greatly affects the performance of sending. The lower version Agent reads this type of data directly into memory based on the newline character and then discards it, but is limited by the hardware configuration of the Agent deployment environment, a single ultra-long data is extremely likely to cause OOM exceptions. In version 1.8.0, Agent optimized the processing logic of ultra-long logs, ensuring that data loading does not exceed memory limits through segmented collection and segmented discarding. Thanks to @justinhuang\'s contribution, see INLONG-8180 for details.\\n![1.8.0-agent-under-1.8.0.png](./img/1.8.0-agent-under-1.8.0.png)\\n![1.8.0-agent-1.8.0.png](./img/1.8.0-agent-1.8.0.png)\\n\\n### Agent adopts global flow control, solving the OOM problem caused by the growth of file numbers\\nIn previous versions, each file was collected and sent by its thread. Although we limited the maximum collection buffer of each file, with the growth of user traffic, the increase in the number of files is inevitable, leading to the simultaneous collection of too many files, causing OOM exceptions due to memory overflow. InLong supports the feature of Agent configuring global flow control in version 1.8.0. With this feature, Agent can effectively avoid frequent OOM problems caused by the growth of file numbers or the use of small quota servers. Thanks to @justinhuang\'s contribution, see INLONG-8251 for details. If you need to use this feature, you can add the corresponding configuration in agent.properties.\\n![1.8.0-agent-flow-controll.png](./img/1.8.0-agent-flow-controll.png)\\n\\n### Support multiple Flink versions\\nAs community users go deeper into using InLong, the scenarios InLong faces become more diverse and complex. To support the needs of users in different Flink environments, InLong has added support for multiple Flink versions in the current version. Users can choose the Flink version to start in the plugins/flink-sort-plugin.properties configuration file in InLong-Manager.\\n\\nWhen changing the Flink version required to run the Sort component, you also need to replace the connectors in the InLong-Sort/connector directory with the corresponding version of the jar package. For details, see the InLong official website documentation. Thanks to @Emsnap, @GanfengTan, and @haifxu for their contributions to this capability.\\n```\\n# inLong-manager/plugins/flink-sort-plugin.properties\\n\\n# Flink version, support [1.13|1.15]\\nflink.version=1.13\\n```\\n\\n### Support multi-tenant management\\nTo address the requirements for permission and resource isolation in multi-user scenarios, InLong introduces a multi-tenant architecture in the current version. The multi-tenant architecture ensures that data and permissions do not interfere with each other among different users within the same group of services. Thanks to @vernedeng and @bluewang for their contributions to this feature, see INLONG-7914 for feature details. The following is the core process:\\n![1.8.0-multi-tenant-management.png](./img/1.8.0-multi-tenant-management.png)\\n\\nTenants are transparent to core logic developers. At the entrance of the request, tenant authentication is added, and requests without access to the tenant\'s permissions are directly rejected; before accessing the Database, the corresponding tenant filter conditions are added to ensure that the scope of data query and modification is limited within the tenant.\\n\\nUsers can create tenants and assign tenant roles on the Dashboard.\\n![1.8.0-create-tenant.png](./img/1.8.0-create-tenant.png)\\n\\n### Support real-time synchronization\\nThe new version supports real-time data synchronization. The main difference between real-time synchronization and data access is that it does not require the support of intermediate MQ storage. The Sort component directly stores the source data, greatly enriching the user\'s usage scenarios.\\n\\nAs shown in the figure below, the Tab page adds a \\"Data Synchronization\\" label. After the user configures the basic Group information, they only need to enter the \\"Data Source\\" and \\"Data Target\\" information, and after submitting the task, the data can be synchronized in real-time.\\n\\nThanks to @fuwen11, @bluewang, @Emsnap, and @haifxu for their contributions to this feature.\\n![1.8.0-realtime-sync.png](./img/1.8.0-realtime-sync.png)\\n\\n### Support data preview\\nFor businesses just accessing InLong, data preview can help users quickly confirm the accuracy of reported data and locate problems. In this version, the InLong front supports previewing users\' real-time reported data. Thanks to @fuwen11 and @bluewang\'s contributions, users can choose data preview in the operation bar under the data stream after successfully creating a data stream and reporting data.\\n![1.8.0-data-preview.png](./img/1.8.0-data-preview.png)\\n\\n### Support querying transmission delay\\nTransmission delay is crucial for some real-time consumption scenarios. In this version, InLong audit supports frontend viewing of average transmission delay indicators. Thanks to @fuwen11 and @bluewang\'s contributions, users can query link transmission delay after successfully creating a data stream and reporting data.\\n![1.8.0-trans-delay.png](./img/1.8.0-trans-delay.png)\\n\\n## Follow-up planning\\nIn version 1.8.0, the community also restructured the DataProxy code, unified the configuration pull interface, supported complete IP and CIDR-based IP segment configuration of black and white list features, and improved module performance and stability. Sort has improved stability in DDL sensing scenarios and supports whole library migration of Hive, Iceberg automatic column update, and column storage features. In subsequent versions, InLong will refactor DataProxy C++ SDK, enrich Flink 1.15 Connector, and improve data synchronization functions, looking forward to more developers participating in the contribution."},{"id":"/2023/05/19/release-1.7.0","metadata":{"permalink":"/blog/2023/05/19/release-1.7.0","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2023-05-19-release-1.7.0.md","source":"@site/blog/2023-05-19-release-1.7.0.md","title":"Release 1.7.0","description":"Apache InLong recently released version 1.7.0, which closed about 150+ issues, including 3+ major features and 40+ optimizations. The main features include support for sending data directly to Kafka, MySQL all-database migration with schema change support, GH-OST awareness for MySQL all-database migration, the addition of 4 batch import modes (CSV, SQL, JSON, and Excel), simplification of command line tool for creating data stream configurations, and refactoring of the Dashboard layout.","date":"2023-05-19T00:00:00.000Z","formattedDate":"May 19, 2023","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Version","permalink":"/blog/tags/version"}],"readingTime":7.84,"hasTruncateMarker":true,"authors":[{"name":"Charles Zhang","url":"https://github.com/dockerzhang","imageURL":"https://avatars.githubusercontent.com/u/18047329?v=4"}],"frontMatter":{"title":"Release 1.7.0","author":"Charles Zhang","author_url":"https://github.com/dockerzhang","author_image_url":"https://avatars.githubusercontent.com/u/18047329?v=4","tags":["Apache InLong","Version"]},"prevItem":{"title":"Release 1.8.0","permalink":"/blog/2023/07/24/release-1.8.0"},"nextItem":{"title":"Release 1.6.0","permalink":"/blog/2023/03/23/release-1.6.0"}},"content":"Apache InLong recently released version 1.7.0, which closed about 150+ issues, including 3+ major features and 40+ optimizations. The main features include support for sending data directly to Kafka, MySQL all-database migration with schema change support, GH-OST awareness for MySQL all-database migration, the addition of 4 batch import modes (CSV, SQL, JSON, and Excel), simplification of command line tool for creating data stream configurations, and refactoring of the Dashboard layout.\\n\x3c!--truncate--\x3e\\n\\n## About Apache InLong\\nAs the industry\'s first one-stop open-source massive data integration framework, Apache InLong provides automatic, safe, reliable, and high-performance data transmission capabilities to facilitate businesses to build stream-based data analysis, modeling, and applications quickly. At present, InLong is widely used in various industries such as advertising, payment, social networking, games, artificial intelligence, etc., serving thousands of businesses, among which the scale of high-performance scene data exceeds 1 trillion lines per day, and the scale of high-reliability scene data exceeds 10 trillion lines per day.\\n\\nThe core keywords of InLong project positioning are \\"one-stop\\" and \\"massive data\\". For \\"one-stop\\", we hope to shield technical details, provide complete data integration and support services, and implement out-of-the-box; With its advantages, such as multi-cluster management, it can stably support larger-scale data volumes based on trillions lines per day.\\n\\n## 1.7.0 Overview\\nApache InLong recently released version 1.7.0, which closed about 150+ issues, including 3+ major features and 40+ optimizations. The main features include support for sending data directly to Kafka, MySQL all-database migration with schema change support, GH-OST awareness for MySQL all-database migration, the addition of 4 batch import modes (CSV, SQL, JSON, and Excel), simplification of command line tool for creating data stream configurations, and refactoring of the Dashboard layout. This version also includes a large number of other features, mainly consisting of:\\n\\n### Agent Module\\n- Support for sending data directly to Kafka, bypassing DataProxy\\n- Agent optimization, improving file collection and transmission performance\\n- Fixed the issue of Reader creation failure during MySQL data collection\\n\\n### DataProxy Module\\n- Simplify common configuration and related control logic\\n- Code optimization, cleaning up invalid configurations in ConfigManager\\n\\n### Manager Module\\n- Add PostgreSQL and Redis data node management\\n- Add heartbeat timeout status for data sources\\n- Add 4 batch import modes: CSV, SQL, JSON, and Excel\\n- Simplify command-line tools, including data stream creation logic\\n- Support restarting and stopping data source tasks in data streams\\n- Add connectivity tests for Redis and Kudu\\n\\n### Sort Module\\n- Mask sensitive information of Flink SQL-related data sources/targets in logs\\n- Optimize the logic for calculating object byte size and related metrics\\n- Support extracting DDL and operations from raw data\\n- Add rate control when writing to Iceberg\\n- Support schema changes in MySQL full-database migration\\n- In full-database migration, MySQL Connector supports detecting GH-OST DDLs\\n\\n### Dashboard Module\\n- Add CSV, SQL, JSON, and Excel batch import pages for 4 import modes\\n- Optimize Clickhouse flow configuration, supporting ttl/engine and other configurations\\n- Refactor Dashboard layout, improving display experience\\n- Optimize the creation process for data sources and data targets\\n\\n### Other\\n- Fix multiple MySQL-related security vulnerabilities\\n- TubeMQ Golang SDK supports production, completing the first phase of development\\n- Optimize InLong development tool support for MacOS and Linux\\n- Optimize Pulsar Client dependency to reduce installation package size\\n\\n## 1.7.0 Feature Introduction\\n### Support for sending data directly to Kafka\\nIn previous versions, InLong supported sending data directly from Agent to Pulsar without going through DataProxy. With this design, users with simple data scenarios and who want to ensure data integrity as much as possible can reduce their dependency on DataProxy. For users accustomed to using Kafka, version 1.7.0 supports the feature of sending data directly from Agent to Kafka. Thanks to @wangpeix for the complete contribution, and details can be found in INLONG-7783. If you want to experience this feature, you can choose \\"Send to MQ, and respond after MQ receives\\" during the data stream approval process.\\n\\n![1.7.0-kafka-stream](./img/1.7.0-kafka-stream.png)\\n\\n### MySQL all-database migration with schema change support\\nAs community users delve deeper into using InLong, the drawbacks of not supporting schema changes become increasingly apparent. After the source end changes the DDL, the task needs to modify the configuration and restart, significantly increasing operational costs. In the current version, InLong supports automatic schema change capabilities. Upstream data sources can perceive Create, Alter, Drop, Truncate, and Rename DDL operations and synchronize these operations downstream. Meanwhile, downstream data sources can respond to upstream DDL changes and process them accordingly, supporting different processing strategies. For more details, refer to INLONG-7553. Thanks to @Emsnap, @yunqingmoswu, and @lordcheng10 for contributing to this feature. The following diagram illustrates the core process:\\n\\n![1.7.0-mysql-schema](./img/1.7.0-mysql-schema.png)\\n\\nIn the database, DDL messages are perceived by Debezium in the CDC. At this point, the data obtained is a single DDL statement, such as \\"DROP TABLE A\\". This statement is a field in the Debezium JSON. The DDL statement is then parsed into a DDL model by JSQLParser. This model parses common DDL messages and processes them into a JSON format that is easy for the program to handle. The DDL model will be sent to the Sink Operator in Flink as data, and the Operator will process the DDL model.\\n\\n### GH-OST awareness for MySQL all-database migration\\nGH-OST (GitHub Online Schema Migration) is a trigger-free online schema migration solution for MySQL released by GitHub. It is testable and provides pause, dynamic control/reconfiguration, auditing, and many operational privileges. Throughout the migration process, it generates minimal workload on the primary server and is separated from the existing work on the migrated tables. By supporting GH-OST-aware DDL, the MySQL Connector can correctly handle table structure changes caused by GH-OST while capturing data changes. Thanks to @e-mhui for the complete contribution, and details of this feature can be found in INLONG-7554. The following diagram illustrates the core process:\\n\\n![1.7.0-mysql-ghost](./img/1.7.0-mysql-ghost.png)\\n\\nFirst, after enabling the automatic DDL response for MySQL CDC, the ghc, gho, and del tables generated by GH-OST are also captured. Second, when perceiving the changes made by GH-OST to the gho table, the gho table in the DDL statement is replaced with the source table and stored in the state. Finally, after GH-OST completes the entire change process for the source table, the DDL statements previously stored in the state are sent downstream.\\n\\n### Addition of 4 batch import modes (CSV, SQL, JSON, and Excel)\\nWhen creating data stream input metadata fields, we need to enter information such as name, type, and description in sequence. If we need to input hundreds or thousands of field information, this processing method is extremely inefficient. In version 1.7.0, InLong has added four batch import modes for CSV/SQL/JSON/Excel formats. Users only need to refer to the template for each format and fill in the selected information to achieve one-time import. Many thanks to @featzhang and @fuweng11 for their participation in the development of this feature. The four batch import modes are now supported by both front-end and back-end, and you can download the latest version for direct use.\\n\\n![1.7.0-batch-add](./img/1.7.0-batch-add.png)\\n\\n### Simplification of command line tool for creating data stream configurations\\nIn the before version, when creating a data stream using the command line, the JSON file content required was complex, and the file structure was not clear enough, making the threshold for users to create data streams through the command line very high. Additionally, when users wanted to reuse the file to create a new data stream, they had to modify many repetitive fields, such as inlongGroupID and inlongStreamID. In version 1.7.0, InLong has optimized the data stream configuration JSON structure and field configuration. Users can simply add Source/Sink content according to their data stream requirements, making creating a data stream much simpler than before. For more details, see INLONG-7778, and many thanks to @haifxu for the contribution. \\nThe following example is a template for creating a File -> Pulsar -> Clickhouse in the new version:\\n\\n```json\\n{\\n    \\"groupInfo\\": {\\n        \\"inlongGroupId\\": \\"test_group_ctl\\",\\n        \\"inlongClusterTag\\": \\"default_cluster\\",\\n        \\"mqType\\": \\"PULSAR\\"\\n    },\\n    \\"streamInfo\\": {\\n        \\"inlongStreamId\\": \\"test_stream_ctl\\",\\n        \\"fieldList\\": [\\n            {\\n                \\"fieldName\\": \\"name\\",\\n                \\"fieldType\\": \\"string\\"\\n            }\\n        ],\\n        \\"sourceList\\": [\\n            {\\n                \\"sourceType\\": \\"FILE\\",\\n                \\"sourceName\\": \\"test_source_ctl\\",\\n                \\"agentIp\\": \\"127.0.0.1\\",\\n                \\"pattern\\": \\"/data/test.txt\\"\\n            }\\n        ],\\n        \\"sinkList\\": [\\n            {\\n                \\"sinkType\\": \\"CLICKHOUSE\\",\\n                \\"sinkName\\": \\"test_sink_ctl\\",\\n                \\"dataNodeName\\": \\"test_clickhouse\\",\\n                \\"dbName\\": \\"db_test\\",\\n                \\"tableName\\": \\"table_test\\",\\n                \\"flushInterval\\": 1,\\n                \\"flushRecord\\": 1000,\\n                \\"retryTimes\\": 3,\\n                \\"engine\\": \\"Log\\",\\n                \\"isDistributed\\": 1,\\n                \\"sinkFieldList\\": [\\n                    {\\n                        \\"sourceFieldName\\": \\"name\\",\\n                        \\"sourceFieldType\\": \\"string\\",\\n                        \\"fieldName\\": \\"name\\",\\n                        \\"fieldType\\": \\"string\\"\\n                    }\\n                ]\\n            }\\n        ]\\n    }\\n}\\n```\\n\\n### Refactoring of the Dashboard layout\\nIn version 1.7.0, the community has refactored the overall layout of the Dashboard, including adjusting the top-bottom layout to a left-right layout (moving the navigation bar to the left), adding a dark theme, adding icons to the main menu, adjusting the data source selection display and process, etc. This adjustment has improved the user experience of the Dashboard. Special thanks to @leezng and @bluewang for their contributions. For more details, see INLONG-7734.\\n\\n![1.7.0-dashboard-refactor](./img/1.7.0-dashboard-refactor.png)\\n\\n## Follow-up planning\\nIn version 1.7.0, the community has also improved the performance and stability of Agent file collection, while TubeMQ has completed the first phase of the Golang SDK production. Additionally, Sort can now consume using the subscription groups allocated by the Manager. In subsequent versions, InLong will support multiple Apache Flink versions, including not only the current Flink 1.13 but also Flink 1.15. Furthermore, tenant management will be added to unify the models of InLong projects, users, and resources. We look forward to more developers participating and contributing."},{"id":"/2023/03/23/release-1.6.0","metadata":{"permalink":"/blog/2023/03/23/release-1.6.0","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2023-03-23-release-1.6.0.md","source":"@site/blog/2023-03-23-release-1.6.0.md","title":"Release 1.6.0","description":"Apache InLong recently released version 1.6.0, which closed about 202+ issues, including 11+ major features and 80+ optimizations. Mainly completed the addition of Kudu data stream, improvement of Redis data stream, the addition of MQ cache cluster selector strategy, optimization of Audit ID allocation rules, the addition of data node connection testing, optimization of Sort Audit reconciliation benchmark time, and expansion of Audit support for using Kafka to cache audit data.","date":"2023-03-23T00:00:00.000Z","formattedDate":"March 23, 2023","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Version","permalink":"/blog/tags/version"}],"readingTime":7.105,"hasTruncateMarker":true,"authors":[{"name":"Charles Zhang","url":"https://github.com/dockerzhang","imageURL":"https://avatars.githubusercontent.com/u/18047329?v=4"}],"frontMatter":{"title":"Release 1.6.0","author":"Charles Zhang","author_url":"https://github.com/dockerzhang","author_image_url":"https://avatars.githubusercontent.com/u/18047329?v=4","tags":["Apache InLong","Version"]},"prevItem":{"title":"Release 1.7.0","permalink":"/blog/2023/05/19/release-1.7.0"},"nextItem":{"title":"Release 1.5.0","permalink":"/blog/2023/01/13/release-1.5.0"}},"content":"Apache InLong recently released version 1.6.0, which closed about 202+ issues, including 11+ major features and 80+ optimizations. Mainly completed the addition of Kudu data stream, improvement of Redis data stream, the addition of MQ cache cluster selector strategy, optimization of Audit ID allocation rules, the addition of data node connection testing, optimization of Sort Audit reconciliation benchmark time, and expansion of Audit support for using Kafka to cache audit data.\\n\x3c!--truncate--\x3e\\n\\n## About Apache InLong\\nAs the industry\'s first one-stop open-source massive data integration framework, Apache InLong provides automatic, safe, reliable, and high-performance data transmission capabilities to facilitate businesses to build stream-based data analysis, modeling, and applications quickly. At present, InLong is widely used in various industries such as advertising, payment, social networking, games, artificial intelligence, etc., serving thousands of businesses, among which the scale of high-performance scene data exceeds 1 trillion lines per day, and the scale of high-reliability scene data exceeds 10 trillion lines per day.\\n\\nThe core keywords of InLong project positioning are \\"one-stop\\" and \\"massive data\\". For \\"one-stop\\", we hope to shield technical details, provide complete data integration and support services, and implement out-of-the-box; With its advantages, such as multi-cluster management, it can stably support larger-scale data volumes based on trillions lines per day.\\n\\n## 1.6.0 Overview\\nApache InLong recently released version 1.6.0, which closed about 202+ issues, including 11+ major features and 80+ optimizations. Mainly completed the addition of Kudu data stream, improvement of Redis data stream, the addition of MQ cache cluster selector strategy, optimization of Audit ID allocation rules, the addition of data node connection testing, optimization of Sort Audit reconciliation benchmark time, and expansion of Audit support for using Kafka to cache audit data, mainly including the following:\\n\\n### Agent Module\\n- Improved the file collection stability and fixed multiple collection bugs\\n- Fixed multiple bugs such as MQTT, MongoDB\\n\\n### DataProxy Module\\n- Added MQ cluster Selector strategy to reduce the number of producers\\n- Added Audit report for the new MQ Sink\\n\\n### Manager Module\\n- Optimized the Audit ID distribution rules and supported multiple Load Data Node audit\\n- Optimized Clickhouse data node metadata configuration and management\\n- Added connection test for new Data Node, check the availability of nodes\\n- Added Pulsar Multi-Cluster Topic and Subscription Management\\n- Fixed multiple data stream management and status management bugs\\n\\n### Sort Module\\n- Added data Audit for Kafka Source connector\\n- Added new CSV format and dirty data archive for Doris connector\\n- Supported Array, Map, Struct, and other complex types\\n- Optimized Pulsar Connector to solve the issue of data loss\\n- Fixed the writing in chaos for Canal-JSON metadata fields\\n- Optimized reconciliation benchmark time for Sort Audit\\n\\n### Dashboard Module\\n- Continue to optimize the Dashboard experience and reduce the threshold for first users\\n- Added node management for Redis, Kudu, and other data nodes\\n- Optimized data node parameters such as PostgreSQL, Kafka, Redis, etc.\\n- Simplified the Agent node IP selection strategy\\n- Added connection test pages for data nodes\\n\\n### Other\\n- Supported using Kafka as cache MQ for Audit\\n- Audit uniformly obtains the MQ cluster from Manager\\n- Optimized deployment steps such as Standalone, Docker-Compose, Kubernetes, and other deployment steps\\n\\n## 1.6.0 Feature Introduction\\n### Supported Kudu data stream\\nApache Kudu is an open-source storage engine by Cloudera, which can provide low-delayed random read and write and efficient data analysis capabilities simultaneously. In version 1.6.0, InLong supports the Kudu data stream, including adding Kudu Connector, metadata management, metrics, etc. Kudu data stream contributed by @featzhang independently. Interested users can make an installation and experience.\\n![1.6.0-create-kudu](./img/1.6.0-create-kudu.png)\\n\\n### Improved the Redis data stream\\nRedis is a viral open-source memory database with high performance and rich data structure. In version 1.6.0, InLong perfects the Redis data stream, adding SinkFunction, metadata management, indicators, and Dashboard pages in Redis Connector. Supported data formats like Redis\'s PLAIN, Hash, and Bitmap and realized Redis Schema conversion through the SCHEMAMAPPING mechanism. Redis data streams through the SCHEMA mapping mode, and SCHEMA can be converted into different [Redis Data-Type] (https://redis.io/docs/data-types/tutorial/). Redis data stream is mainly contributed to and fulfilled by @featzhang independently. For details, please refer to [INLONG-7060] (https://github.com/apache/inlong/issues/7060).\\n![1.6.0-update-redis](./img/1.6.0-update-redis.png)\\n\\n### Added MQ cluster Selector strategy\\nIn the multi-MQ cluster scene, if DataProxy is connected to all MQ clusters simultaneously, the number of producers in the MQ cluster will surge. At the same time, the amount of metadata of ZooKeeeper is excess, which will cause OutOfMemory. In version 1.6.0, InLong increased the selector strategy of the MQ cache cluster level (mainly for Apache Pulsar). As a result, the DataProxy node can only choose some MQ clusters under the same tag for production, thereby reducing the number of producer connections and Zookeeper metadata. @Luchunliang mainly develops this feature. For details, please refer to [INLONG-7231] (https://github.com/apache/inlong/pull/7236).\\n![1.6.0-mq-selector](./img/1.6.0-mq-selector.png)\\n\\n### Optimized the Audit ID distribution rules\\nIn the original design of InLong Audit, the receiving and sending number of each module is an independent audit ID, which is used to record the receiving and sending number for each module. There is a defect in this scheme. If InLong Sort sorted data to multiple targets at the same time (such as writing Hive and Clickhouse), the audit ID cannot distinguish different data streams for the Sort. In version 1.6.0, the Audit ID distribution rules are optimized, the different data stream has a different audit ID, achieving data audit of multiple sorting targets for the same data stream. This feature also involves changes in Manager and Sort module. It is developed and implemented by @FuWeng11 and @EMSNAP. For details, please refer to [INLONG-7389] (https://github.com/apache/inlong/pull/7390), [INLONG-7232] (https://github.com/apache/inlong/pull/7233), and [INLONG-7503] (https://github.com/apache/inlong/pull/7552).\\n```sql\\n(\'audit_sort_hive_input\', \'HIVE\', 0, \'7\'),\\n(\'audit_sort_hive_output\', \'HIVE\', 1, \'8\'),\\n(\'audit_sort_clickhouse_input\', \'CLICKHOUSE\', 0, \'9\'),\\n(\'audit_sort_clickhouse_output\', \'CLICKHOUSE\', 1, \'10\'),\\n(\'audit_sort_es_input\', \'ELASTICSEARCH\', 0, \'11\'),\\n(\'audit_sort_es_output\', \'ELASTICSEARCH\', 1, \'12\'),\\n(\'audit_sort_starrocks_input\', \'STARROCKS\', 0, \'13\'),\\n(\'audit_sort_starrocks_output\', \'STARROCKS\', 1, \'14\'),\\n(\'audit_sort_hudi_input\', \'HUDI\', 0, \'15\'),\\n(\'audit_sort_hudi_output\', \'HUDI\', 1, \'16\'),\\n(\'audit_sort_iceberg_input\', \'ICEBERG\', 0, \'17\'),\\n(\'audit_sort_iceberg_output\', \'ICEBERG\', 1, \'18\'),\\n(\'audit_sort_hbase_input\', \'HBASE\', 0, \'19\'),\\n(\'audit_sort_hbase_output\', \'HBASE\', 1, \'20\'),\\n(\'audit_sort_doris_input\', \'DORIS\', 0, \'21\'),\\n(\'audit_sort_doris_output\', \'DORIS\', 1, \'22\')\\n```\\n\\n### Added connection test for new Data Node\\nIn the previous version, InLong added data nodes and registered MQ clusters, and did not judge the availability of the cluster. In the new version, InLong adds a connection test for the main data node and InLong system component registration, which enhances the data stream creation. This feature is mainly participated in development by @leosanqing, @Bluewang, and @Fuweng11.\\n![1.6.0-connection-test](./img/1.6.0-connection-test.png)\\n\\n### Optimized reconciliation benchmark time for Sort Audit\\nBefore version 1.6.0, the Sort reconciliation benchmark time is the machine time for data processing. Using this time will cause the full-link reconciliation data to be inaccurate. In this version, the Sort audit reconciliation referred to the design of TimestampedCollector in Apache Flink, replaced the Simple Collector in the original Pulsar Connector, and aligned the audit index. The implementation principle is to set the Timestamp field at the Collector. When obtaining the InLongMsg data transmitted by DataProxy, the reset data time is used as the Audit time record metric when sending the message downstream. The optimized Sort audit index can be aligned with other modules, such as DataProxy, this feature was mainly developed by @Emsnap.\\n![1.6.0-sort-audit-time](./img/1.6.0-sort-audit-time.png)\\n\\n### Supported using Kafka as cache MQ for Audit\\nInLong Audit is an independent subsystem that conducts real-time audit reconciliation of the InLong system\'s Agent, DataProxy, and Sort module\'s inflow, and outflow. The current amount of audits is minute, hour, and day. In the previous version, InLong Audit only supports the use of Pulsar to cache audit data, and this will increase the cost of user deployment when they chose Kafka. In the entire InLong Audit design, the choice of MQ type should be consistent with the data stream to avoid different use of different use MQ types. In version 1.6.0, in order to achieve the use of the same type of MQ service in Audit modules and data stream, Audit supports the use of Kafka cache audit data to achieve the unity of MQ service selection. This feature is mainly completed by @haifxu and @dockerzhang.\\n![1.6.0-audit-kafka](./img/1.6.0-audit-kafka.png)\\n\\n## Follow-up planning\\nIn 1.6.0, the Sort module also fixes multiple bugs such as dirty data archives, metrics, and Connectors. The Dashboard continues to optimize display and approval processes and other experience problems. For more details, please refer to the Release [Changelog] (https: // github. com/Apache/InLong/Blob/Master/Changes.md). In the subsequent version, Apache InLong will add Schema dynamic change, Schema batch import, agent installation, adding more data nodes, looking forward to more developers participating in contributions."},{"id":"/2023/01/13/release-1.5.0","metadata":{"permalink":"/blog/2023/01/13/release-1.5.0","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2023-01-13-release-1.5.0.md","source":"@site/blog/2023-01-13-release-1.5.0.md","title":"Release 1.5.0","description":"Apache InLong recently released version 1.5.0, which closed about 296+ issues, including 12+ major features and 110+ optimizations. Mainly completed the addition of StarRocks, Hudi, Doris, Elasticsearch, and other sinks, optimization of the Dashboard experience, refactor the MQ management model, support dirty data processing, full-link Apache Kafka support, and TubeMQ C++/Python SDK support for production, etc.","date":"2023-01-13T00:00:00.000Z","formattedDate":"January 13, 2023","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Version","permalink":"/blog/tags/version"}],"readingTime":5.07,"hasTruncateMarker":true,"authors":[{"name":"Charles Zhang","url":"https://github.com/dockerzhang","imageURL":"https://avatars.githubusercontent.com/u/18047329?v=4"}],"frontMatter":{"title":"Release 1.5.0","author":"Charles Zhang","author_url":"https://github.com/dockerzhang","author_image_url":"https://avatars.githubusercontent.com/u/18047329?v=4","tags":["Apache InLong","Version"]},"prevItem":{"title":"Release 1.6.0","permalink":"/blog/2023/03/23/release-1.6.0"},"nextItem":{"title":"Release 1.4.0","permalink":"/blog/2022/11/16/release-1.4.0"}},"content":"Apache InLong recently released version 1.5.0, which closed about 296+ issues, including 12+ major features and 110+ optimizations. Mainly completed the addition of StarRocks, Hudi, Doris, Elasticsearch, and other sinks, optimization of the Dashboard experience, refactor the MQ management model, support dirty data processing, full-link Apache Kafka support, and TubeMQ C++/Python SDK support for production, etc.\\n\x3c!--truncate--\x3e\\n\\n## About Apache InLong\\nAs the industry\'s first one-stop open-source massive data integration framework, Apache InLong provides automatic, safe, reliable, and high-performance data transmission capabilities to facilitate businesses to build stream-based data analysis, modeling, and applications quickly. At present, InLong is widely used in various industries such as advertising, payment, social networking, games, artificial intelligence, etc., serving thousands of businesses, among which the scale of high-performance scene data exceeds 1 trillion/day, and the scale of high-reliability scene data exceeds 10 trillion/day sky.\\n\\nThe core keywords of InLong project positioning are \\"one-stop\\" and actual \\"massive data\\". For \\"one-stop\\", we hope to shield technical details, provide complete data integration and support services, and realize out-of-the-box; With its advantages, such as multi-cluster management, it can stably support larger-scale data volumes on the basis of trillions/day.\\n\\n## 1.5.0 Overview\\nApache InLong recently released version 1.5.0, which closed about 296+ issues, including 12+ major features and 110+ optimizations. Mainly completed the addition of StarRocks, Hudi, Doris, Elasticsearch, and other data stream sinks, optimization of the Dashboard experience, reconstruction of the MQ management model, addition of dirty data processing, full-link Apache Kafka support, and TubeMQ C++/Python SDK support for production, etc. This version has also completed a large number of other features, mainly including the following:\\n\\n### Agent Module\\n- Support log collection in CVM scenarios\\n- Added direct sending Pulsar, sending DataProxy synchronous and asynchronous strategies\\n\\n### DataProxy Module\\n- Refactor the MQ management model to support the rapid expansion of new MQ types\\n- Optimized caching layer to support Apache Kafka message queue\\n- Added support for BufferQueueChannel\\n\\n### TubeMQ Module\\n- Increase data sending and receiving delay statistics\\n- TubeMQ C++ SDK supports the produce\\n- TubeMQ Python SDK supports the produce\\n\\n### Manager Module\\n- Added Hudi data node and data stream management\\n- Added StarRocks data node and data stream management\\n- Optimize Elasticsearch data node and data stream management\\n- Added data conversion management in Manager Client\\n- Optimize Apache Kafka message queue management\\n\\n### Sort Module\\n- The MySQL Load node inventory phase supports concurrent reading of tables without primary keys\\n- Added StarRocks, Hudi, Doris, Elasticsearch 5.x data flow support\\n- Add dirty data processing for Doris, PostgreSQL, Hive, HBase, Elasticsearch, etc.\\n- Upgraded Iceberg to version 1.1.0\\n- StarRocks, PostgreSQL, Doris, Hudi and other flows support table-level indicators\\n\\n### Dashboard Module\\n- Experience optimization with more than 50 optimization points\\n- Add JSON, Key-Value, and AVRO formats\\n- Support ClickHouse, Iceberg, Elasticsearch, MySQL, and other data node management pages\\n- Added SQLServer, Oracle, MongoDB, and MQTT data source pages\\n\\n### Other\\n- Add Spotless code formatting plugin and response pipeline\\n- Docker-compose comes with Apache Flink environment\\n- Added Grafana indicator display templates for Agent and DataProxy\\n\\n## 1.5.0 Feature Introduction\\n### Support StarRocks, Hudi, Doris, Elasticsearch Sinks\\nIn version 1.5.0, InLong expanded the new data node Connector, supported StarRocks, Hudi, Doris, Elasticsearch, and other flow directions for community user scenarios, and expanded the data warehouse and lake scenarios. These new data nodes are mainly contributed by @liaorui, @featzhang, @kuansix, @LvJiancheng, and other developers.\\n![1.5.0-create-hudi-source](./img/1.5.0-create-hudi-source.png)\\n\\n### Optimization of the Dashboard Experience\\nCompared with traditional data integration projects, InLong has added concepts such as Group, Stream, and data nodes. Community users using Dashboard for the first time will be confused about the whole process. To reduce the cost of using Dashboard users, InLong has made a lot of optimizations for the Dashboard front-end page, with more than 50 optimization points, and adjusted the concept, process, and display. The figure below shows the process of creating a Stream in 1.5.0, which is more simplified than the previous version. Special thanks to @leezng, @bluewang, @kinfuy for optimizing the Dashboard and @Charles Zhang for the modification suggestions.\\n![1.5.0-create-dashboard-stream](./img/1.5.0-create-dashboard-stream.png)\\n\\n### Refactor the MQ Management Model\\nTo quickly support new message queue services (such as RocketMQ) to implement plug-ins, and unify the existing support for Pulsar, Kafka, and TubeMQ, in version 1.5.0, InLong DataProxy refactored the MQ management model, and all MQ types are based on `MessageQueueHandler ` Implement the corresponding `Handler`. Thanks to @woofyzhao and @luchunliang for the implementation of this feature. If you need to develop a new MQ type, you can refer to the DataProxy plug-in guide.\\n![1.5.0-mq-handler](./img/1.5.0-mq-handler.png)\\n\\n### Support Dirty Data Processing\\nIf there is dirty data that does not meet the data specifications (such as field range exceeding, missing data fields, etc.) when entering the lake into the warehouse, it may cause the user task to fail to write and restart continuously. In version 1.5.0, InLong supports storing unrecoverable dirty data in external storage, including S3 and local logs. At the same time, users can customize the output port of dirty data and can configure \\"whether to enable dirty data archiving\\" and \\"whether to ignore write entry error\\", as follows to design a UML diagram for dirty data archiving. The realization of this feature is thanks to the support of @yunqingmoswu and @Yizhou-Yang.\\n![1.5.0-dirty-data](./img/1.5.0-dirty-data.png)\\n\\n### Support Apache Kafka Full-link\\nIn version 1.5.0, the DataProxy, Manager, Sort, and Dashboard modules have completed the full-link support for Apache Kafka. The support for Kafka has gone through two versions, and it is available for production in 1.5.0. When users create data streams Just choose Kafka. The implementation of this feature is thanks to @woofyzhao, @fuweng11, @haifxu for their support.\\n![1.5.0-support-kafka](./img/1.5.0-support-kafka.png)\\n\\nFor more details on the 1.5.0 release, please refer to the release notes, which detail the features, enhancements, and bug fixes for this release.\\n\\n## Follow-up planning\\nIn the following versions, Apache InLong will add multi-tenant management, standardize data flow, resources, and permissions of projects, clusters, and users, and optimize the performance and stability of various data sources, Agent management, etc., expect more developers to participate and contribute."},{"id":"/2022/11/16/release-1.4.0","metadata":{"permalink":"/blog/2022/11/16/release-1.4.0","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2022-11-16-release-1.4.0.md","source":"@site/blog/2022-11-16-release-1.4.0.md","title":"Release 1.4.0","description":"Apache InLong is a one-stop integration framework for massive data that provides automatic, secure and reliable data transmission capabilities.","date":"2022-11-16T00:00:00.000Z","formattedDate":"November 16, 2022","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Version","permalink":"/blog/tags/version"}],"readingTime":3.575,"hasTruncateMarker":true,"authors":[{"name":"Charles Zhang","url":"https://github.com/dockerzhang","imageURL":"https://avatars.githubusercontent.com/u/18047329?v=4"}],"frontMatter":{"title":"Release 1.4.0","author":"Charles Zhang","author_url":"https://github.com/dockerzhang","author_image_url":"https://avatars.githubusercontent.com/u/18047329?v=4","tags":["Apache InLong","Version"]},"prevItem":{"title":"Release 1.5.0","permalink":"/blog/2023/01/13/release-1.5.0"},"nextItem":{"title":"Release 1.3.0","permalink":"/blog/2022/09/05/release-1.3.0"}},"content":"Apache InLong is a one-stop integration framework for massive data that provides automatic, secure and reliable data transmission capabilities.\\nInLong offers great power to build data analysis, modeling and other real-time applications based on streaming data.\\n\\n\x3c!--truncate--\x3e\\n\\n## 1.4.0 version overview\\nApache InLong recently released version 1.4.0, which closed about 364+ issues with 16+ features and 120+ optimizations. It mainly completes the real-time synchronization of the entire database to Apache Doris and the real-time synchronization of the entire database to Apache Iceberg, the standard architecture supports HTTP reporting, and the standard architecture adds MongoDB and other collection nodes. This release also completes a number of other features, including:\\n\\n### Agent Module\\n- Refactored sink-sending metrics\\n- Audit report increases data size\\n- Support Redis, MQTT, SQLServer, Oracle, and MongoDB data sources\\n- Enhanced Kubernetes environment file collection capability\\n\\n### DataProxy module\\n- Heartbeat reporting adds service status and supports authentication\\n- Added proxy-send mode to send data\\n- Optimized data link buried point indicators\\n\\n### TubeMQ module\\n- Added client load balancing consumer group control API\\n- C++ SDK fixes multiple bugs\\n\\n### Manager module\\n- Data stream Group and Stream support extended parameters\\n- Client supports updating and deleting data flow through Key\\n- Refactored the way to obtain Sort cluster configuration information\\n- Optimized state management\\n- Client supports cluster addition, deletion, modification, and query\\n- Cluster nodes report new protocol types\\n- Cache layer usage supports using Kafka\\n\\n### Sort module\\n- Support debezium-json format\\n- Kafka data nodes support topic dynamic awareness\\n- Connectors such as Hive/Hbase/Iceberg support indicator status recovery\\n- Elasticsearch 6/7, JDBC connector added indicator status\\n- Iceberg sink supports schema revolution, can automatically build tables, and perceive the increase of fields\\n\\n### Dashboard module\\n- Unified data source, data flow type definition\\n- Added Agent type for cluster management\\n- Add data node management\\n- Support selection of Kafka message type\\n\\n### Other\\n- docker-compose deploys the built-in Flink environment\\n- Fix multiple aarch64 mirror bugs\\n- Fix multiple dependency security bugs\\n\\n## 1.4.0 version feature introduction\\n### Agent adds a variety of data sources\\nIn version 1.4.0, Agent supports data sources such as Redis, MQTT, SQLServer, Oracle, MongoDB, etc., so that the collection capabilities of standard architecture and lightweight architecture are basically aligned and users have more choices in massive scenarios. The support of this part of the back-end capabilities is mainly completed by @iamsee123 and @haibo-duan, and the front-end part is completed by @bluewang.\\n\\n### Improve component metrics\\nIn version 1.4.0, the Agent, DataProxy, and Sort modules all have indicators optimized and improved, including the reconstruction of the indicators sent by the Agent, increasing the dimension of the data Group/Stream indicators, and fixing the inaccuracy of the Prometheus Listener indicators. Thanks to @Keylchen, @pocozh, and others for their contributions.\\n\\n### Optimize Docker-compose deployment\\nThere are many InLong service components, and there has always been a problem with high deployment thresholds. In version 1.4.0, the compatibility of docker-compose deployment is optimized, and an Apache Flink environment is built-in to help developers quickly start creating tasks. Thanks to @dockerzhang for optimizing this part.\\n\\n### Optimize heartbeat management\\nIn version 1.4.0, a lot of optimizations have been made for the heartbeat of service components, including adding data protocol when reporting, automatic registration of Agent/DataProxy component reporting, adding heartbeat management API to Manager, and optimizing multiple heartbeat status bugs. Thanks to @gosonzhang, @GanfengTan, @pocozh, @lucaspeng12138 and @haifxu for their contributions.\\n\\n### Support real-time synchronization of the entire database\\nIn version 1.4.0, InLong began to support real-time synchronization of the entire database to follow up on the needs of community users. Currently, it is the first to achieve real-time synchronization of the entire database to Doris and real-time synchronization of the entire database to Iceberg/Kafka/Doris. In the near future, the community will also realize the synchronization of the entire database. Share the details. Thanks to @thesumery, @EMsnap, @yunqingmoswu for their contributions.\\n\\nFor more details on the 1.4.0 release, please refer to the release notes, which detail the features, enhancements, and bug fixes for this release.\\n\\n### Follow-up planning\\nIn the next version, the community will continue to add synchronization scenarios for the entire database, improve task indicators, increase system stability, and conduct stress tests on standard architectures and lightweight architectures."},{"id":"/2022/09/05/release-1.3.0","metadata":{"permalink":"/blog/2022/09/05/release-1.3.0","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2022-09-05-release-1.3.0.md","source":"@site/blog/2022-09-05-release-1.3.0.md","title":"Release 1.3.0","description":"Apache InLong is a one-stop integration framework for massive data that provides automatic, secure and reliable data transmission capabilities.","date":"2022-09-05T00:00:00.000Z","formattedDate":"September 5, 2022","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Version","permalink":"/blog/tags/version"}],"readingTime":3.815,"hasTruncateMarker":true,"authors":[{"name":"EMsnap","url":"https://github.com/EMsnap","imageURL":"https://avatars.githubusercontent.com/u/26538404?v=4"}],"frontMatter":{"title":"Release 1.3.0","author":"EMsnap","author_url":"https://github.com/EMsnap","author_image_url":"https://avatars.githubusercontent.com/u/26538404?v=4","tags":["Apache InLong","Version"]},"prevItem":{"title":"Release 1.4.0","permalink":"/blog/2022/11/16/release-1.4.0"},"nextItem":{"title":"Release 1.2.0","permalink":"/blog/2022/06/22/release-1.2.0"}},"content":"Apache InLong is a one-stop integration framework for massive data that provides automatic, secure and reliable data transmission capabilities.\\nInLong supports both batch and stream data processing at the same time, which offers great power to build data analysis, modeling and other real-time applications based on streaming data.\\n\\n\x3c!--truncate--\x3e\\n\\n## 1.3.0 Features Overview\\n**The just-released 1.3.0 version closes about 410+ issues, contains 110+ features and 170+ optimizations.**\\nMainly include the following:\\n\\n### Enhance management and control capabilities\\n- Added permission authentication for Open Api\\n- Added cluster heartbeat mechanism for Agent and DataProxy\\n- Manager adapts to two roles such as user and approver\\n- Abstract operations on Load nodes to support easy scaling of Load node resources\\n- Supports creation of databases and tables for SQLServer, Oracle and MySQL\\n- Enhanced functionality of the Manager client, including but not limited to user and data node management\\n\\n### Extended collection node\\n- Support for collecting data in TubeMq\\n- Support for collecting data in Redis\\n- Support for collecting data in Doris\\n- Support to collect data in Pulsar without AdminUrl\\n\\n### Optimize write node\\n- Kafka Sink supports All Changelog Mode\\n- JDBC Sink supports All Changelog Mode\\n\\n### Support data conversion\\n- Support Union operator\\n- Support encrypted Udf\\n- Support Json Udf\\n- Support Temporal Join\\n- Support Lookup Join\\n- Support Interval Join\\n\\n### Strengthen Agent function\\n- Support regular expression custom line break: default \\"\\\\n\\" line ending mark, custom regular matching line ending mark can realize multi-line merging and folding\\n- Support K8s log collection and carry cluster information\\n- Supports standard output, node log collection, and will carry container and cluster information for standard output\\n- Support full and incremental collection of file content\\n- Supports automatic heartbeat reporting and registration to Manager\\n- Support custom IP and get IP automatically\\n\\n### Other optimizations\\n- GitHub Action check, pipeline optimization\\n- DataProxy improves monitoring capabilities such as auditing and indicator reporting\\n- DataProxy adds c++ sdk data reporting capability\\n- Sort Support metrics report and audit report \\n\\n## 1.3.0 Features Details\\n\\n### Abstracting Load node operations\\nManager abstracts Load nodes to support easy expansion of Load node resources and greatly reduce the development time of a Load node\\nThis part of the feature was contributed by @ciscozhou\\n\\n### Add permission authentication for Manager Open Api\\nIn the old version, the Manager Open Api can be accessed anonymously, and in the new version, it is implemented using the Apache Shiro framework.\\nLogin authentication method based on Basic Access Authentication, this part of the function was contributed by @woofyzhao\\n\\n### Enhanced collection of file data and k8s logs\\nVersion 1.3.0 enhances the collection of file data and k8s data, in which file collection supports regular expression custom line breaks, so that multiple lines can be merged and folded\\nIn addition, the new version of Agent supports full and incremental collection of file content. This part of the function was contributed by @ganfengtan\\n\\n### DataProxy adds c++ sdk capability\\nIn addition to the current java client, DataProxy has added c++ client capabilities, which are provided by @pocozh\\n\\n### Supports multiple udf and join operators\\nThe new version of Sort supports three kinds of Temporal Join\\\\ Lookup Join \\\\ Interval Join, this part of the function was contributed by @yunqingmoswu\\nMost community users mentioned the need for encryption and decryption and Json Udf, this part of the function was contributed by @Emsnap and @Emhui\\n\\n### Sort connector supports indicator reporting function\\nThe new version of Sort Connector supports Flink built-in indicator reporting of various Connectors. External indicator systems such as Prometheus can directly obtain the number and rate of task data read and write.\\nIn addition, the new version also supports InLong Audit Audit data reporting, which is contributed by @pacigong, @Emsnap, @thesumery @Oneal65 @yunqingmoswu\\n\\n### Manager supports the creation of resources in multiple flow directions\\nIn version 1.3.0, Manager added the creation of some storage resources:\\n\\n- Create Topic for SQLServer\\n- Create Oracle libraries and tables\\n- Create MySQL namespaces and tables\\n\\nThe above are all contributed by community member @haibo-duan, thanks\\n\\n### Other features and bug fixes\\nFor related content, please refer to the [Release Notes](https://github.com/apache/inlong/blob/master/CHANGES.md), which details the features, enhancements and bug fixes of this release.\\n\\n## Apache InLong follow-up planning\\nIn subsequent versions, we will expand more data sources and storages to cover more usage scenarios, and gradually improve the usability and robustness of the system, including:\\n- Agent adds Redis, CloudEvents, MongoDB collection types\\n- Unified DataProxy MQ framework\\n- Full support for Apache Kafka"},{"id":"/2022/06/22/release-1.2.0","metadata":{"permalink":"/blog/2022/06/22/release-1.2.0","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2022-06-22-release-1.2.0.md","source":"@site/blog/2022-06-22-release-1.2.0.md","title":"Release 1.2.0","description":"Apache InLong is a one-stop integration framework for massive data that provides automatic, secure and reliable data transmission capabilities.","date":"2022-06-22T00:00:00.000Z","formattedDate":"June 22, 2022","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Version","permalink":"/blog/tags/version"}],"readingTime":3.74,"hasTruncateMarker":true,"authors":[{"name":"healchow","url":"https://github.com/healchow","imageURL":"https://avatars.githubusercontent.com/u/31994335?v=4"}],"frontMatter":{"title":"Release 1.2.0","author":"healchow","author_url":"https://github.com/healchow","author_image_url":"https://avatars.githubusercontent.com/u/31994335?v=4","tags":["Apache InLong","Version"]},"prevItem":{"title":"Release 1.3.0","permalink":"/blog/2022/09/05/release-1.3.0"},"nextItem":{"title":"Analysis of InLong Sort ETL Solution","permalink":"/blog/2022/06/16/inlong-sort-etl"}},"content":"Apache InLong is a one-stop integration framework for massive data that provides automatic, secure and reliable data transmission capabilities.\\nInLong supports both batch and stream data processing at the same time, which offers great power to build data analysis, modeling and other real-time applications based on streaming data.\\n\\n\x3c!--truncate--\x3e\\n\\n## 1.2.0 Features Overview\\n**The just-released 1.2.0-incubating version closes about 410+ issues, contains 30+ features and 190+ optimizations.**\\nMainly include the following:\\n\\n### Enhance management and control capabilities\\n- Dashboard and Manager add cluster management capabilities\\n- Dashboard optimizes the flow creation process\\n- Manager supports plug-in extension of MQ\\n\\n### Extended collection node\\n- Support for collecting data in Pulsar\\n- Support data collection in MongoDB-CDC\\n- Support data collection in MySQL-CDC\\n- Support data collection in Oracle-CDC\\n- Support data collection in PostgreSQL-CDC\\n- Support data collection in SQLServer-CDC\\n\\n### Extended write node\\n- Support for writing data to Kafka\\n- Support for writing data to HBase\\n- Support for writing data to PostgreSQL\\n- Support for writing data to Oracle\\n- Supports writing data to MySQL\\n- Support writing data to TDSQL-PostgreSQL\\n- Support for writing data to Greenplum\\n- Supports writing data to SQLServer\\n\\n### Support data conversion\\n- Support String Split\\n- Support String Regular Replace\\n- Support String Regular Replace First Matched Value\\n- Support Data Filter\\n- Support Data Distinct\\n- Support Regular Join\\n\\n### Enhanced system monitoring function\\n- Support the reporting and management of data link heartbeat\\n\\n### Other optimizations\\n- Supports the delivery of DataProxy multi-cluster configurations\\n- GitHub Action check, pipeline optimization\\n\\n## 1.2.0 Features Details\\n\\n### Support multi-cluster management\\nManager adds cluster management function, supports multi-cluster configuration, and solves the limitation that only one set of clusters can be defined through configuration files.\\nUsers can create different types of clusters on Dashboard as needed.\\n\\nThe multi-cluster feature is mainly designed and implemented by @healchow, @luchunliang, @leezng, thanks to three contributors.\\n\\n### Enhanced collection of file data and MySQL Binlog\\nVersion 1.2.0 supports collecting complete file data, and also supports collecting data from the specified Binlog location in MySQL. This part of the work was done by @Greedyu.\\n\\n### Support whole database migration\\nSort supports migration of data across the entire database, contributed by @EMsnap.\\n\\n### Supports writing data in Canal format\\nSupport for writing data in Canal format to Kafka, contributed by @thexiay.\\n\\n### Optimize the HTTP request method in Manager Client\\nOptimized the way of executing HTTP requests in Manager Client, and added unit tests for Client, which reduces maintenance costs while reducing duplication of code.\\nThis feature was contributed by new contributor @leosanqing.\\n\\n### Supports running SQL scripts\\nSort supports running SQL scripts, see [INLONG-4405](https://github.com/apache/inlong/issues/4405), thanks to @gong for contributing this feature.\\n\\n### Support the reporting and management of data link heartbeat\\nThis version supports the heartbeat reporting and management of data grouping, data flow and underlying components, which is the premise of the state management of each link of the subsequent system.\\n\\nThis feature was primarily designed and contributed by @baomingyu, @healchow and @kipshi.\\n\\n### Manager supports the creation of resources in multiple flow directions\\nIn version 1.2.0, Manager added the creation of some storage resources:\\n\\n- Create Topic for Kafka (contributed by @woofyzhao)\\n- Create databases and tables for Iceberg (contributed by @woofyzhao)\\n- Create namespaces and tables for HBase (contributed by @woofyzhao)\\n- Create databases and tables for ClickHouse (contributed by @lucaspeng12138)\\n- Create indices for Elasticsearch (contributed by @lucaspeng12138)\\n- Create databases and tables for PostgreSQL (contributed by @baomingyu)\\n\\n### Sort supports lightweight architecture\\nVersion 1.2.0 of Sort has done a lot of refactoring and improvements.\\nBy introducing Flink-CDC, it supports a variety of Extract and Load nodes, and also supports data transformation (ie Transform).\\n\\nThis feature contains many sub-features. The main developers are:\\n@baomingyu, @EMsnap, @GanfengTan, @gong, @lucaspeng12138, @LvJiancheng, @kipshi, @thexiay, @woofyzhao, @yunqingmoswu, thank you all for your contributions.\\n\\nFor more information, please refer to: [Analysis of InLong Sort ETL Solution](2022-06-16-inlong-sort-etl.md).\\n\\n### Other features and bug fixes\\nFor related content, please refer to the [Release Notes](https://github.com/apache/inlong/blob/master/CHANGES.md), which details the features, enhancements and bug fixes of this release.\\n\\n## Apache InLong follow-up planning\\n\\nIn subsequent versions, we will expand more data sources and storages to cover more usage scenarios, and gradually improve the usability and robustness of the system, including:\\n\\n- Heartbeat report of each component\\n- Status management of data flow\\n- Full link audit support for writing to ClickHouse\\n- Expand more types of acquisition nodes and storage nodes"},{"id":"/2022/06/16/inlong-sort-etl","metadata":{"permalink":"/blog/2022/06/16/inlong-sort-etl","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2022-06-16-inlong-sort-etl.md","source":"@site/blog/2022-06-16-inlong-sort-etl.md","title":"Analysis of InLong Sort ETL Solution","description":"1. Background","date":"2022-06-16T00:00:00.000Z","formattedDate":"June 16, 2022","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Sort","permalink":"/blog/tags/sort"}],"readingTime":10.5,"hasTruncateMarker":true,"authors":[{"name":"Oneal65","url":"https://github.com/Oneal65","imageURL":"https://avatars.githubusercontent.com/u/13121552?v=4"}],"frontMatter":{"title":"Analysis of InLong Sort ETL Solution","author":"Oneal65","author_url":"https://github.com/Oneal65","author_image_url":"https://avatars.githubusercontent.com/u/13121552?v=4","tags":["Apache InLong","Sort"]},"prevItem":{"title":"Release 1.2.0","permalink":"/blog/2022/06/22/release-1.2.0"},"nextItem":{"title":"Release 1.1.0","permalink":"/blog/2022/04/25/release-1.1.0"}},"content":"## 1. Background\\n\\nWith the increasing number of users and developers of Apache InLong(incubating), the demand for richer usage scenarios and low-cost operation is getting stronger and stronger. Among them, the demand for adding Transform (T) to the whole link of InLong has received the most feedback. After the research and design of @yunqingmoswu, @EMsnap, @gong, @thexiay community developers, the InLong Sort ETL solution based on Flink SQL has been completed. This article will introduce the implementation details of the solution in detail.\\n\\n\x3c!--truncate--\x3e\\n\\nFirstly, based on Apache Flink SQL, there are mainly the following considerations\uff1a\\n\\n-  Flink SQL has high scalability and flexibility brought about by its powerful expression ability. Basically, Flink SQL can support most demand scenarios in the community. When the built-in functions of Flink SQL do not meet the requirements, we can also extend them through various UDFs.\\n-  Compared with the implementation of the underlying API of Flink, the development cost of Flink SQL is lower. Only for the first time, the conversion logic of Flink SQL needs to be implemented. In the future, we can focus on the construction of the ability of Flink SQL, such as the extension connector and the UDF.\\n- In general, Flink SQL will be more robust and run more stable. The reason is that Flink SQL shields a lot of the underlying details of Flink, has strong community support, and has been practiced by a large number of users.\\n- For users, Flink SQL is also easier to understand, especially for users who have used SQL, the usage is simple and familiar, which helps users to land quickly.\\n- For the migration of existing real-time tasks, if they are originally SQL-type tasks, especially Flink SQL tasks, the migration cost is extremely low, and in some cases, no changes are even required.\\n\\n**Note**: For all codes of this scheme, please refer to [Apache InLong Sort](https://github.com/apache/incubator-inlong/tree/master/inlong-sort), which can be downloaded and used in the upcoming version 1.2.0.\\n\\n## 2. Introduction\\n\\n### 2.1 Requirements\\n\\nThe main requirements of this solution are the completed inlong sort module transform (T) capability, including:\\n\\n|          Transform          |                            Notes                             |\\n| :-------------------------: | :----------------------------------------------------------: |\\n| Deduplication in the window |            Deduplicate data within a time window             |\\n|   time window aggregation   |             Aggregate data within a time window              |\\n|   time format conversion    | Converts the value of a field to a string in the target time format |\\n|     field segmentation      |    Split a field into multiple new fields by a delimiter     |\\n|     string replacement      |    Replace some or all of the contents of a string field     |\\n|       Data filtering        |   Discard or retain data that meets the filter conditions    |\\n|     Content extraction      |        Extract part of a field to create a new field         |\\n|            Join             |                    Support two table join                    |\\n|     Value substitution      | Given a matching value, if the field\'s value is equal to that value, replace it with the target value |\\n\\n### 2.2 Usage Scenarios\\n\\nUsers of big data integration have transform requirements such as data transformation, connection and filtering in many business scenarios.\\n\\n### 2.3 Design Goal\\n\\nThis design needs to achieve the following goals:\\n\\n- Functionality: Under InLong Sort\'s existing architecture and data flow model, it covers basic Transform capabilities and has the ability to expand rapidly.\\n- Compatibility: The new InLong Sort data model is forward compatible to ensure that historical tasks can be configured and run properly.\\n- Maintainability: The conversion of the InLong Sort data model to Flink SQL only needs to be implemented once. When there are new functional requirements later, this part does not need to be changed, even if there are changes, it can be supported with a small amount of changes.\\n- Extensibility: When the open source Flink Connector or the built-in Flink SQL function does not meet the requirements, you can customize the Flink Connector and UDF to achieve its function expansion.\\n\\n### 2.4 Basic Concepts\\n\\nThe core concept refers to the explanation of terms in the outline design\\n\\n|            Name             |                           Meaning                            |\\n| :-------------------------: | :----------------------------------------------------------: |\\n|      InLong Dashboard       |            Inlong front end management interface             |\\n|    InLong Manager Client    | Wrap the interface in the manager for external user programs to call without going through the front-end inlong dashboard |\\n|   InLong Manager Openapi    |      Inlong manager and external system call interface       |\\n|   InLong Manager metaData   | Inlong manager metadata management, including metadata information of group and stream dimensions |\\n| InLong Manager task manager | Inlong manager manages the data source collection task module, manages agent task distribution, instruction distribution, and heartbeat reporting |\\n|        InLong Group         | Data flow group, including multiple data flows, one group represents one data access |\\n|        InLong Stream        |     Data flow: a data flow has a specific flow direction     |\\n|        Stream Source        | There are corresponding acquisition end and sink end in the stream. This design only involves the stream source |\\n|         Stream Info         | Abstract of data flow in sort, including various sources, transformations, destinations, etc. of the data flow |\\n|         Group Info          | Encapsulation of data flow in sort. A group info can contain multiple stream infos |\\n|            Node             | Abstraction of data source, data transformation and data destination in data synchronization |\\n|        Extract Node         |       Source side abstraction of data synchronization        |\\n|          Load Node          |       Destination abstraction of data synchronization        |\\n|     MySQL Extract Node      |                MySQL data source abstraction                 |\\n|       Kafka Load Node       |              Kafka data destination abstraction              |\\n|       Transform Node        |  Transformation process abstraction of data synchronization  |\\n|  Aggregate Transform Node   | Data synchronization aggregation class transformation process abstraction |\\n|        Node Relation        |  Relationship abstraction of nodes in data synchronization   |\\n|       Field Relation        | Abstraction of the relationship between upstream and downstream node fields in data synchronization |\\n|          Function           | Abstraction of the relationship between upstream and downstream node fields in data synchronization |\\n|     Substring Function      |         Abstraction of string interception function          |\\n|       Filter Function       |             Abstraction of data filter function              |\\n|       Function Param        |           Input parameter abstraction of function            |\\n|       Constant Param        |                     Constant parameters                      |\\n|         Field Info          |                          Node field                          |\\n|       Meta FieldInfo        |                 Node meta information field                  |\\n\\n### 2.5 Domain Model\\n\\nThis design mainly involves the following entities: \\n\\nGroup, Stream, GroupInfo, StreamInfo, Node, NodeRelation, FieldRelation, Function, FilterFunction, SubstringFunction, FunctionParam, FieldInfo, MetaFieldInfo, MySQLExtractNode, KafkaLoadNode, etc.\\n\\nFor ease of understanding, this section will model and analyze the relationship between entities. Description of entity correspondence of domain model:\\n\\n- One group corresponds to one group info\\n- A group contains one or more streams\\n- One stream corresponds to one StreamInfo\\n- A GroupInfo contains one or more StreamInfo\\n- A StreamInfo contains multiple nodes\\n- A StreamInfo contains one or more NodeRelations\\n- A NodeRelation contains one or more FieldRelations\\n- A NodeRelation contains 0 or more FilterFunctions\\n- A FieldRelation contains one function or one FieldInfo as the source field and one FieldInfo as the target field\\n- A function contains one or more FunctionParams\\n\\nThe above relationship can be represented by UML object relationship diagram as:\\n\\n![sort_UML](./img/sort_UML.png)\\n\\n### 2.6 Function Use-case Diagram\\n\\n![sort-usecase](./img/sort-usecase.png)\\n\\n## 3. System Outline Design\\n\\n### 3.1 System Architecture Diagram\\n\\n![architecture](./img/architecture.png)\\n\\n- Serialization: Serialization Implementation Module\\n- Deserialization: Deserialization Implementation Module\\n- Flink Source: Custom Flink source implementation module\\n- Flink Sink: Custom Flink sink implementation module\\n- Transformation: Custom Transform implementation module\\n- GroupInfo: Corresponding to Inlong group\\n- StreamInfo: Corresponding to inlong stream\\n- Node: Abstraction of data source, data conversion and data destination in data synchronization\\n- FlinkSQLParser: SQL parser\\n\\n### 3.2 InLong Sort Internal Operation Flow Chart\\n\\n![sort-operation-flow](./img/sort-operation-flow.png)\\n\\n### 3.3 Module Design\\n\\nThis design only adds Flink connector and Flink SQL generator to the original system, and modifies the data model module.\\n\\n#### 3.3.1 Module Structure\\n\\n![sort-module-structure](./img/sort-module-structure.png)\\n\\n#### 3.3.2 Module Division\\n\\nDescription of important module division:\\n\\n|       Name        |                         Description                          |\\n| :---------------: | :----------------------------------------------------------: |\\n|  FlinkSQLParser   | Used to generate Flink SQL core classes, including references to GroupInfo |\\n|     GroupInfo     | The internal abstraction of sort for inlong group is used to encapsulate the synchronization related information of the entire inlong group, including the reference to list\\\\<StreamInfo\\\\> |\\n|    StreamInfo     | The internal abstraction of sort to inlong stream is used to encapsulate inlong stream synchronization related information, including references to list\\\\<node\\\\>, list\\\\<NodeRelation\\\\> |\\n|       Node        | The top-level interface of the synchronization node. Its subclass implementation is mainly used to encapsulate the data of the synchronization data source and the transformation node |\\n|    ExtractNode    |      Data extract node abstraction, inherited from node      |\\n|     LoadNode      |       Data load node abstraction, inherited from node        |\\n|   TransformNode   |  Data transformation node abstraction, inherited from node   |\\n|   NodeRelation    |              Define relationships between nodes              |\\n|   FieldRelation   |           Define field relationships between nodes           |\\n|     Function      |           Abstract of T-ability execution function           |\\n|  FilterFunction   | Function abstraction for data filtering, inherited from function |\\n| SubstringFunction | Used for string interception function abstraction, inherited from function |\\n|   FunctionParam   |             Abstraction for function parameters              |\\n|   ConstantParam   | Encapsulation of function constant parameters, inherited from FunctionParam |\\n|     FieldInfo     | The encapsulation of node fields can also be used as function input parameters, inherited from FunctionParam |\\n|   MetaFieldInfo   | The encapsulation of built-in fields is currently mainly used in the metadata field scenario of canal JSON, which is inherited from FieldInfo |\\n\\n## 4. Detailed System Design\\n\\nThe following describes the principle of SQL generation by taking MySQL synchronizing data to Kafka as an example\\n\\n### 4.1 Node Described in SQL\\n\\n#### 4.1.1 ExtractNode Described in SQL\\n\\nThe node configuration is:\\n\\n```java\\n private Node buildMySQLExtractNode() {\\n        List<FieldInfo> fields = Arrays.asList(\\n                new FieldInfo(\\"name\\", new StringFormatInfo()),\\n                new FieldInfo(\\"age\\", new IntFormatInfo()));\\n        return new MySqlExtractNode(\\"1\\", \\"mysql_input\\", fields,\\n                null, null, \\"id\\",\\n                Collections.singletonList(\\"tableName\\"), \\"localhost\\", \\"root\\", \\"password\\",\\n                \\"inlong\\", null, null,\\n                null, null);\\n    }\\n```\\n\\nThe generated SQL is:\\n\\n```sql\\nCREATE TABLE `mysql_1` (`name` string,`age` int) \\nwith \\n(\'connector\' = \'mysql-cdc-inlong\',\\n\'hostname\' = \'localhost\',\\n\'username\' = \'root\',\\n\'password\' = \'password\',\\n\'database-name\' = \'inlong\',\\n\'table-name\' = \'tableName\')\\n```\\n\\n#### 4.1.2 TransformNode  Described in SQL\\n\\nThe node configuration is:\\n\\n```java\\n List<FilterFunction> filters = Arrays.asList(\\n                new SingleValueFilterFunction(EmptyOperator.getInstance(),\\n                        new FieldInfo(\\"age\\", new IntFormatInfo()),\\n                        LessThanOperator.getInstance(), new ConstantParam(25)),\\n                new SingleValueFilterFunction(AndOperator.getInstance(),\\n                        new FieldInfo(\\"age\\", new IntFormatInfo()),\\n                        MoreThanOrEqualOperator.getInstance(), new ConstantParam(18))\\n        );\\n```\\n\\nThe generated SQL is:\\n\\n```sql\\nSELECT `name` AS `name`,`age` AS `age` FROM `mysql_1` WHERE `age` < 25 AND `age` >= 18\\n```\\n\\n#### 4.1.3 LoadNode Described in SQL\\n\\nThe node configuration is:\\n\\n```java\\n private Node buildKafkaLoadNode(FilterStrategy filterStrategy) {\\n        List<FieldInfo> fields = Arrays.asList(\\n                new FieldInfo(\\"name\\", new StringFormatInfo()),\\n                new FieldInfo(\\"age\\", new IntFormatInfo())\\n        );\\n        List<FieldRelation> relations = Arrays\\n                .asList(\\n                        new FieldRelation(new FieldInfo(\\"name\\", new StringFormatInfo()),\\n                                new FieldInfo(\\"name\\", new StringFormatInfo())),\\n                        new FieldRelation(new FieldInfo(\\"age\\", new IntFormatInfo()),\\n                                new FieldInfo(\\"age\\", new IntFormatInfo()))\\n                );\\n        List<FilterFunction> filters = Arrays.asList(\\n                new SingleValueFilterFunction(EmptyOperator.getInstance(),\\n                        new FieldInfo(\\"age\\", new IntFormatInfo()),\\n                        LessThanOperator.getInstance(), new ConstantParam(25)),\\n                new SingleValueFilterFunction(AndOperator.getInstance(),\\n                        new FieldInfo(\\"age\\", new IntFormatInfo()),\\n                        MoreThanOrEqualOperator.getInstance(), new ConstantParam(18))\\n        );\\n        return new KafkaLoadNode(\\"2\\", \\"kafka_output\\", fields, relations, filters,\\n                filterStrategy, \\"topic1\\", \\"localhost:9092\\",\\n                new CanalJsonFormat(), null,\\n                null, \\"id\\");\\n    }\\n```\\n\\nThe generated SQL is:\\n\\n```sql\\nCREATE TABLE `kafka_3` (`name` string,`age` int) \\nwith (\\n\'connector\' = \'kafka-inlong\',\\n\'topic\' = \'topic1\',\\n\'properties.bootstrap.servers\' = \'localhost:9092\',\\n\'format\' = \'canal-json-inlong\',\\n\'canal-json-inlong.ignore-parse-errors\' = \'true\',\\n\'canal-json-inlong.map-null-key.mode\' = \'DROP\',\\n\'canal-json-inlong.encode.decimal-as-plain-number\' = \'true\',\\n\'canal-json-inlong.timestamp-format.standard\' = \'SQL\',\\n\'canal-json-inlong.map-null-key.literal\' = \'null\'\\n)\\n```\\n\\n### 4.2 Field T Described in SQL\\n\\n#### 4.2.1 Filter operator\\n\\nSee 4.1 node configuration for relevant configurations\\n\\nThe generated SQL is:\\n\\n```sql\\nINSERT INTO `kafka_3` SELECT `name` AS `name`,`age` AS `age` FROM `mysql_1` WHERE `age` < 25 AND `age` >= 18\\n```\\n\\n#### 4.2.2 Watermark\\n\\nThe complete configuration of GroupInfo is as follows:\\n\\n```java\\nprivate Node buildMySqlExtractNode() {\\n        List<FieldInfo> fields = Arrays.asList(\\n                new FieldInfo(\\"name\\", new StringFormatInfo()),\\n                new FieldInfo(\\"age\\", new IntFormatInfo()),\\n                new FieldInfo(\\"ts\\", new TimestampFormatInfo()));\\n        WatermarkField wk = new WatermarkField(new FieldInfo(\\"ts\\", new TimestampFormatInfo()),\\n                new StringConstantParam(\\"1\\"),\\n                new TimeUnitConstantParam(TimeUnit.MINUTE));\\n        return new MySqlExtractNode(\\"1\\", \\"mysql_input\\", fields,\\n                wk, null, \\"id\\",\\n                Collections.singletonList(\\"tableName\\"), \\"localhost\\", \\"root\\", \\"password\\",\\n                \\"inlong\\", null, null,\\n                null, null);\\n    }\\n\\n    private Node buildKafkaNode() {\\n        List<FieldInfo> fields = Arrays.asList(\\n                new FieldInfo(\\"name\\", new StringFormatInfo()),\\n                new FieldInfo(\\"age\\", new IntFormatInfo()),\\n                new FieldInfo(\\"ts\\", new TimestampFormatInfo()));\\n        List<FieldRelation> relations = Arrays\\n                .asList(new FieldRelation(new FieldInfo(\\"name\\", new StringFormatInfo()),\\n                                new FieldInfo(\\"name\\", new StringFormatInfo())),\\n                        new FieldRelation(new FieldInfo(\\"age\\", new IntFormatInfo()),\\n                                new FieldInfo(\\"age\\", new IntFormatInfo()))\\n                );\\n        return new KafkaLoadNode(\\"2\\", \\"kafka_output\\", fields, relations, null, null,\\n                \\"topic\\", \\"localhost:9092\\", new JsonFormat(),\\n                1, null, \\"id\\");\\n    }\\n\\n    private NodeRelation buildNodeRelation(List<Node> inputs, List<Node> outputs) {\\n        List<String> inputIds = inputs.stream().map(Node::getId).collect(Collectors.toList());\\n        List<String> outputIds = outputs.stream().map(Node::getId).collect(Collectors.toList());\\n        return new NodeRelation(inputIds, outputIds);\\n    }\\n\\n    @Override\\n    public GroupInfo getTestObject() {\\n        Node input = buildMySqlExtractNode();\\n        Node output = buildKafkaNode();\\n        StreamInfo streamInfo = new StreamInfo(\\"1\\", Arrays.asList(input, output), Collections.singletonList(\\n                buildNodeRelation(Collections.singletonList(input), Collections.singletonList(output))));\\n        return new GroupInfo(\\"1\\", Collections.singletonList(streamInfo));\\n    }\\n```"},{"id":"/2022/04/25/release-1.1.0","metadata":{"permalink":"/blog/2022/04/25/release-1.1.0","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2022-04-25-release-1.1.0.md","source":"@site/blog/2022-04-25-release-1.1.0.md","title":"Release 1.1.0","description":"Apache InLong is a one-stop integration framework for massive data that provides automatic, secure and reliable data transmission capabilities. InLong supports both batch and stream data processing at the same time, which offers great power to build data analysis, modeling and other real-time applications based on streaming data.","date":"2022-04-25T00:00:00.000Z","formattedDate":"April 25, 2022","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Version","permalink":"/blog/tags/version"}],"readingTime":4.245,"hasTruncateMarker":true,"authors":[{"name":"dockerzhang","url":"https://github.com/dockerzhang","imageURL":"https://avatars.githubusercontent.com/u/18047329?v=4"}],"frontMatter":{"title":"Release 1.1.0","author":"dockerzhang","author_url":"https://github.com/dockerzhang","author_image_url":"https://avatars.githubusercontent.com/u/18047329?v=4","tags":["Apache InLong","Version"]},"prevItem":{"title":"Analysis of InLong Sort ETL Solution","permalink":"/blog/2022/06/16/inlong-sort-etl"},"nextItem":{"title":"Release 0.12.0","permalink":"/blog/2022/01/04/release-0.12.0"}},"content":"Apache InLong is a one-stop integration framework for massive data that provides automatic, secure and reliable data transmission capabilities. InLong supports both batch and stream data processing at the same time, which offers great power to build data analysis, modeling and other real-time applications based on streaming data.\\n\\n\x3c!--truncate--\x3e\\n\\n## 1.1.0 Features Overview\\nThe 1.1.0-incubating just released mainly includes the following:\\n\\n### Enhanced management capabilities for manager\\n- Added Manager Client to support the integration of InLong for creating data streams\\n- Added ManagerCtl command-line tool to support viewing and creating data streams\\n- Manager supports dispatching Agent tasks\\n- Manager supports dispatching Sort Flink tasks\\n- Manger data streams management, supports start, restart, pause operations\\n- Manager plugin support\\n- Manager metadata management supports using MySQL\\n- The first phase of cluster management, unified cluster information registration\\n\\n### Rich data nodes\\n- Support Iceberg\\n- Support ClickHouse\\n- Support MySQL Binlog collection\\n- Support Kafka ingestion\\n- Sort Standalone supports multiple type streams\\n\\n### Tools construction\\n- Dashboard plugin support\\n- Kubernetes deployment optimization\\n- Standalone deployment refactoring\\n\\n### System Upgrade\\n- Protocol Buffers upgrade\\n- Unified version Maven version dependencies\\n- Fixed a bunch of dependency CVEs\\n- DataProxy supports PB compression protocol\\n\\nThis version closed about 642+ issues, including four 23 features and 180 improvements.\\n\\n## 1.1.0 Features Details\\n### Add Manager Client\\nThe newly added Manager Client defines common InLong Group/Stream operation interfaces, including task creation, viewing and deletion. Through Manager Client, users can build InLong into any third-party platform to achieve unified customized platform construction. The Manager Client is mainly designed and implemented by @kipshi, @gong, @ciscozhou, thanks to three contributors.\\n\\n### Add ManagerCtl command line tool\\nManagerCtl is developed based on Manager Client and is a command-line tool for manipulating InLong resources, which can further simplify the use of developers. ManagerCtl was contributed independently by @haifxu and includes guidelines including:\\n```\\nUsage: managerctl [options] [command] [command options]\\nOptions:\\n-h, --help\\nGet all command about managerctl.\\nCommands:\\ncreate      Create resource by json file\\nUsage: create [options]\\n\u200b\\ndescribe      Display details of one or more resources\\nUsage: describe [options]\\n\u200b\\nlist      Displays main information for one or more resources\\nUsage: list [options]\\n```\\n\\n### Manager supports issuing Sort tasks\\nIn previous versions, after the user created the data group/stream task, Sort needed to submit it to the Flink cluster through the command line, and then perform data sorting. In version 1.1.0, we unified the start, stop, and suspend operations of Sort tasks to the Manager to complete. Users only need to configure the correct Flink cluster when the Manager is deployed. When the data stream is approved, Sort will be automatically started. \\nThis part of the work is mainly contributed by @LvJiancheng.\\n\\n### Manager metadata is saved to ZooKeeper\\nInLong uses ZooKeeper to save data stream metadata, which increases the deployment threshold and operation and maintenance difficulty for developers and users. \\nIn version 1.1.0, we save data stream metadata in DB by default, and ZooKeeper is only an optional solution in large-scale scenarios. Thanks to @kipshi @yunqingmoswu for contributing a PR to ZooKeeper.\\n\\n### Support MySQL Binlog collection\\nVersion 1.1.0 fully supports the collection of data from MySQL, and supports both incremental and full strategies. Users can collect MySQL data with simple configuration in InLong. This part of the work was contributed by @EMsnap.\\n\\n### Sort Added Iceberg, ClickHouse, Kafka\\nIn version 1.1.0, the storage of data nodes for various scenarios has been added, including Iceberg, ClickHouse, and Kafka. The support of these three streams enriches the usage scenarios of InLong. New stream support, mainly contributed by @chantccc @KevinWen007 @healchow.\\n\\n### Sort Standalone supports Hive, Elasticsearch, Kafka\\nAs mentioned in the previous version, for non-Flink environments, we can sort data streams through Sort Standalone. In version 1.1.0, we added support for Hive, ElasticSearch, Kafka, and expanded the usage scenarios of Sort Standalone. Sort Standalone is mainly contributed by @vernedeng @luchunliang.\\n\\n### Protocol Buffers upgrade\\nAll InLong components Protocol Buffers dependencies have been upgraded from 2.5.0 to 3.19.4. Thanks to @gosonzhang @doleyzi for their contributions, a lot of compatibility and testing work for Protocol Buffers upgrades.\\n\\n### InLong on Kubernetes optimization\\nThe optimization work of InLong on Kubernetes mainly includes adding Audit, combing configuration, optimizing the use of message queues, optimizing the use of documents, etc., to facilitate the use of InLong on the cloud. Thanks to @shink for contributing to these optimizations.\\n\\n### Dashboard plugin\\nIn order to facilitate users to quickly build new data stream on Dashboard, Dashboard is support plugin in version 1.1.0. JavaScript developers who understand the plugin development guidelines can quickly expand new data stream. Thanks for this part of the work @leezng\\n\\n### Other features and bug fixes\\nFor related content, please refer to the version [release notes](https://github.com/apache/incubator-inlong/blob/master/CHANGES.md), which list the features, enhancements and bug fixes of this version in detail, as well as specific contributors.\\n\\n## Apache InLong(incubating) follow-up planning\\nIn subsequent versions, we will support lightweight Sort, and expand more data sources and targets to cover more usage scenarios, including:\\n- Flink SQL support\\n- Elasticsearch, HBase support"},{"id":"/2022/01/04/release-0.12.0","metadata":{"permalink":"/blog/2022/01/04/release-0.12.0","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2022-01-04-release-0.12.0.md","source":"@site/blog/2022-01-04-release-0.12.0.md","title":"Release 0.12.0","description":"InLong: the sacred animal in Chinese myths stories, draws rivers into the sea, as a metaphor for the InLong system to provide data access capabilities.","date":"2022-01-04T00:00:00.000Z","formattedDate":"January 4, 2022","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Version","permalink":"/blog/tags/version"}],"readingTime":5.155,"hasTruncateMarker":true,"authors":[{"name":"gosonzhang","url":"https://github.com/gosonzhang","imageURL":"https://avatars.githubusercontent.com/u/14038849?v=4"}],"frontMatter":{"title":"Release 0.12.0","author":"gosonzhang","author_url":"https://github.com/gosonzhang","author_image_url":"https://avatars.githubusercontent.com/u/14038849?v=4","tags":["Apache InLong","Version"]},"prevItem":{"title":"Release 1.1.0","permalink":"/blog/2022/04/25/release-1.1.0"},"nextItem":{"title":"Release 0.11.0","permalink":"/blog/2021/11/10/release-0.11.0"}},"content":"InLong: the sacred animal in Chinese myths stories, draws rivers into the sea, as a metaphor for the InLong system to provide data access capabilities.\\n\\n\x3c!--truncate--\x3e\\n\\nApache InLong is a one-stop integration framework for massive data that provides automatic, secure and reliable data transmission capabilities. InLong supports both batch and stream data processing at the same time, which offers great power to build data analysis, modeling and other real-time applications based on streaming data.\\nThe 0.12.0-incubating just released mainly includes the following:\\n- Provide automatic, safe, reliable and high-performance data transmission capabilities, while supporting batch and streaming\\n- Refactor the document structure of the official website to facilitate users to consult related documents based on the main line\\n- The whole process supports Pulsar data flow, and completes the whole process coverage of high-performance and high-reliability scenarios\\n- Full-process support indicators, including JMX and Prometheus output\\n- The first phase of data audit and reconciliation, write audit data to MySQL\\n\\nThis version closed about 120+ issues, including four major features and 35 improvements.\\n\\n### Apache InLong(incubating) Introduction\\n[Apache InLong](https://inlong.apache.org) is a one-stop integration framework for massive data donated by Tencent to the Apache community.  It provides automatic,  safe,  reliable,  and high-performance data transmission capabilities to facilitate the construction of streaming-based data analysis,  modeling,  and applications.  \\nThe Apache InLong project was originally called TubeMQ,  focusing on high-performance,  low-cost message queuing services.  In order to further release the surrounding ecological capabilities of TubeMQ,  we upgraded the project to InLong,  focusing on creating a one-stop integration framework for massive data.\\n\\nApache InLong uses TDBank internally used by Tencent as the prototype,  and relies on trillion-level data access and processing capabilities to integrate the entire process of data collection,  aggregation,  storage,  and sorting data processing.  It is simple to use,  flexible to expand,  stable and reliable characteristic.\\n<img src=\\"/img/inlong-structure-en.png\\" align=\\"center\\" alt=\\"Apache InLong\\"/>\\n\\nApache InLong serves the entire life cycle from data collection to landing,  and provides different processing modules according to different stages of data,  including the next modules:\\n- **inlong-agent**,  data collection agent, supports reading regular logs from specified directories or files and reporting data one by one.  In the future,  DB collection and HTTP reporting capabilities will also be expanded.\\n- **inlong-dataproxy**,  a Proxy component based on Flume-ng,  supports data transmission blocking,  placing retransmission, and has the ability to forward received data to different MQ (message queues).\\n- **inlong-tubemq**,  Tencent\'s self-developed message queuing service,  focuses on high-performance storage and transmission of massive data in big data scenarios and has a relatively good core advantage in mass practice and low cost.\\n- **inlong-sort**,  after consuming data from different MQ services,  perform ETL processing,  and then aggregate and write the data into Apache Hive, ClickHouse,  Hbase,  IceBerg,  etc.\\n- **inlong-manager**, provides complete data service management and control capabilities,  including metadata,  OpenAPI,  task flow,  authority,  etc.\\n- **inlong-website**, a front-end page for managing data access,  simplifying the use of the entire InLong control platform.\\n\\n### What\u2019s New in Apache InLong(incubating) 0.12.0\\n#### 1. Support Apache Pulsar data cache\\nIn version 0.12.0, we have completed the data reporting capability of FileAgent\u2192DataProxy\u2192Pulsar\u2192Sort. So far, InLong supports high-performance and high-reliability data access scenarios: Compared with the high-throughput TubeMQ, Apache Pulsar can provide better data consistency and is more suitable for scenarios that require extremely high data reliability. For example, finance and billing.\\n<img src=\\"/img/pulsar-arch-en.png\\" align=\\"center\\" alt=\\"Report via Pulsar\\"/>\\n\\nThanks to @healchow, @baomingyu, @leezng, @bruceneenhl, @ifndef-SleePy and others for their contributions to this feature. For more information, please refer to [INLONG-1310](https://github.com/apache/)incubator-inlong/issues/1310), please refer to [Pulsar usage example](https://inlong.apache. org/zh -CN/docs/next/quick_start/pulsar_example/) to get the usage guide.\\n\\n#### 2. Support JMX and Prometheus metrics\\nIn addition to the existing file output metrics, the various components of InLong began to gradually support the output of JMX and Prometheus metrics to improve the visibility of the entire system. Currently, modules including Agent, DataProxy, TubeMQ, Sort-Standalone, etc. already support the above metrics, and the documentation of metrics output by each module is being sorted out.\\n\\nThanks to @shink, @luchunliang, @EMsnap, @gosonzhang and others for their contributions. For related PRs, please see [INLONG-1712](https://github.com/apache/incubator-inlong/issues/1712), [INLONG-1786] (https://github.com/apache/incubator-inlong/issues/1786), [INLONG-1796](https://github.com/apache/incubator-inlong/issues/1796), [INLONG-1827] (https://github.com/apache/incubator-inlong/issues/1827), [INLONG-1851](https://github.com/apache/incubator-inlong/issues/1851), [INLONG-1926] (https://github.com/apache/incubator-inlong/issues/1926).\\n\\n#### 3. Function extension of the modules\\nThe Sort module adds support for Apache Doris storage and realizes the ability to load sorted data into Apache Doris, giving InLong one more storage option. In addition, in order to enrich the functions of the entire data access process, the Audit and Sort-Standalone modules have been added:\\n- The Audit module provides the ability to reconcile the entire process of data flow, and monitor the service quality of the system through data flow indicators;\\n- Sort-Standalone module is a non-Flink-based data sorting module. It adds lightweight data sorting capabilities to the system, facilitating the rapid construction and use of businesses.\\n\\nThe Audit and Sort-Standalone modules are still under development and will be released when the version is stable.\\n\\nThanks to @huzk8, @doleyzi, @luchunliang and others for their contributions, please refer to [INLONG-1821](https://github.com/apache/incubator-inlong/issues/1821), [INLONG-1738]( https: / /github.com/apache/incubator-inlong/issues/1738), [INLONG-1889](https://github.com/apache/incubator-inlong/issues/1889).\\n\\n#### 4. Official website document directory reconstruction\\nIn addition to the improvement of functional modules in version 0.12.0, the official website structure and the use of documents have also been deeply adjusted, including the reconstruction of the document directory structure, supplementing and improving the function introduction of each module, adding document translation, and further improving the documentation of the InLong official website. Readability, to achieve quick search and easy reading. You can check the official website to understand this content. The document is still under construction. We welcome your valuable comments or suggestions.\\n\\nThanks to @bluewang, @dockerzhang, @healchow and others for their contributions, please refer to [INLONG-1711](https://github.com/apache/incubator-inlong/issues/1711), [INLONG-1740](https: //github.com/apache/incubator-inlong/issues/1740), [INLONG-1802](https://github.com/apache/incubator-inlong/issues/1802), [INLONG-1809](https: //github.com/apache/incubator-inlong/issues/1809), [INLONG-1810](https://github.com/apache/incubator-inlong/issues/1810), [INLONG-1815](https: //github.com/apache/incubator-inlong/issues/1815), [INLONG-1822](https://github.com/apache/incubator-inlong/issues/1822), [INLONG-1840](https: //github.com/apache/incubator-inlong/issues/1840), [INLONG-1856](https://github.com/apache/incubator-inlong/issues/1856), [INLONG-1861](https: //github.com/apache/incubator-inlong/issues/1861), [INLONG-1867](https://github.com/apache/incubator-inlong/issues/1867), [INLONG-1878](https: //github.com/apache/incubator-inlong/issues/1878), [INLONG-1901](https://github.com/apache/incubator-inlong/issues/1901), [INLONG-1939](https: //gith ub.com/apache/incubator-inlong/issues/1939).\\n\\n#### 5. Other features and bug fixes\\nFor related content, please refer to [Version Release Notes](https://github.com/apache/incubator-inlong/blob/0.12.0-incubating-RC0/CHANGES.md), which lists the detailed features of this version, Improvements, bug fixes, and specific contributors.\\n\\n\\n### Apache InLong(incubating) follow-up planning\\nIn subsequent versions, we will further enhance the capabilities of InLong to cover more usage scenarios, including:\\n- Support link for data access ClickHouse\\n- Support DB data collection\\n- The second stage full link indicator audit function"},{"id":"/2021/11/10/release-0.11.0","metadata":{"permalink":"/blog/2021/11/10/release-0.11.0","editUrl":"https://github.com/apache/inlong-website/edit/master/blog/blog/2021-11-10-release-0.11.0.md","source":"@site/blog/2021-11-10-release-0.11.0.md","title":"Release 0.11.0","description":"Apache InLong (incubating)  has been renamed from the original Apache TubeMQ (incubating) from 0.9.0.  With the name change,  InLong has also been upgraded from a single message queue to a one-stop integration framework for massive data.  InLong supports data collection,  aggregation,  caching,  and sorting,  users can import data from the data source to the real-time computing engine or land to offline storage with a simple configuration.","date":"2021-11-10T00:00:00.000Z","formattedDate":"November 10, 2021","tags":[{"label":"Apache InLong","permalink":"/blog/tags/apache-in-long"},{"label":"Version","permalink":"/blog/tags/version"}],"readingTime":4.92,"hasTruncateMarker":true,"authors":[{"name":"dockerzhang","url":"https://github.com/dockerzhang","imageURL":"https://avatars.githubusercontent.com/u/18047329?v=4"}],"frontMatter":{"title":"Release 0.11.0","author":"dockerzhang","author_url":"https://github.com/dockerzhang","author_image_url":"https://avatars.githubusercontent.com/u/18047329?v=4","tags":["Apache InLong","Version"]},"prevItem":{"title":"Release 0.12.0","permalink":"/blog/2022/01/04/release-0.12.0"}},"content":"Apache InLong (incubating)  has been renamed from the original Apache TubeMQ (incubating) from 0.9.0.  With the name change,  InLong has also been upgraded from a single message queue to a one-stop integration framework for massive data.  InLong supports data collection,  aggregation,  caching,  and sorting,  users can import data from the data source to the real-time computing engine or land to offline storage with a simple configuration.\\n\\n\x3c!--truncate--\x3e\\n\\nThe just-released version `0.11.0-incubating` is the third version after the name changed.  This version includes next features:\\n- Lower the user\'s threshold for use further.  Support all modules of InLong to be deployed on Kubernetes,  and refactor the official website,  so that users can more easily access related documents.\\n- Support more usage scenarios,  increase the data flow direction of `Dataproxy -> Pulsar`,  and cover scenarios with higher requirements for data integrity and consistency.\\n- Supports SDKs in more languages for TubeMQ.  This version opens the production-level TubeMQ Go SDK, which is convenient for users who use the Go language to access\\n\\nThis version closed more than 80 issues, including four significant features and 35 improvements.\\n\\n### Apache InLong(incubating) Introduction\\n[Apache InLong](https://inlong.apache.org) is a one-stop integration framework for massive data donated by Tencent to the Apache community.  It provides automatic,  safe,  reliable,  and high-performance data transmission capabilities to facilitate the construction of streaming-based data analysis,  modeling,  and applications.  \\nThe Apache InLong project was originally called TubeMQ,  focusing on high-performance,  low-cost message queuing services.  In order to further release the surrounding ecological capabilities of TubeMQ,  we upgraded the project to InLong,  focusing on creating a one-stop integration framework for massive data.\\n\\nApache InLong uses TDBank internally used by Tencent as the prototype,  and relies on trillion-level data access and processing capabilities to integrate the entire process of data collection,  aggregation,  storage,  and sorting data processing.  It is simple to use,  flexible to expand,  stable and reliable characteristic.\\n<img src=\\"/img/inlong-structure-en.png\\" align=\\"center\\" alt=\\"Apache InLong\\"/>\\n\\nApache InLong serves the entire life cycle from data collection to landing,  and provides different processing modules according to different stages of data,  including the next modules:\\n- **inlong-agent**,  data collection agent, supports reading regular logs from specified directories or files and reporting data one by one.  In the future,  DB collection and HTTP reporting capabilities will also be expanded.\\n- **inlong-dataproxy**,  a Proxy component based on Flume-ng,  supports data transmission blocking,  placing retransmission, and has the ability to forward received data to different MQ (message queues).\\n- **inlong-tubemq**,  Tencent\'s self-developed message queuing service,  focuses on high-performance storage and transmission of massive data in big data scenarios and has a relatively good core advantage in mass practice and low cost.\\n- **inlong-sort**,  after consuming data from different MQ services,  perform ETL processing,  and then aggregate and write the data into Apache Hive, ClickHouse,  Hbase,  IceBerg,  etc.\\n- **inlong-manager**, provides complete data service management and control capabilities,  including metadata,  OpenAPI,  task flow,  authority,  etc.\\n- **inlong-website**, a front-end page for managing data access,  simplifying the use of the entire InLong control platform.\\n\\n### What\u2019s New in Apache InLong(incubating) 0.11.0\\n#### InLong on Kubernetes \\nApache InLong includes multiple components such as data collection,  data aggregation,  data caching,  data sorting,  and cluster management and control.  In order to facilitate users to use and support cloud-native features,  all components currently support deployment in Kubernetes.\\nThanks to @shink for contributing to this feature.  For specific details,  please refer to [INLONG-1308](https://github.com/apache/incubator-inlong/issues/1308).\\n\\n#### Open up dataproxy->pulsar data flow\\nBefore version 0.11.0,  InLong\'s data caching layer could only support TubeMQ.  TubeMQ is very suitable for scenarios with huge data volumes,  but in extreme scenarios,  there may be a small amount of data loss. To provide data reliability, the Inlong added support for Apache Pulsar in version 0.11.0.  Now InLong backend can support data flow `agent -> dataProxy -> tubeMQ/pulsar -> sort.` The introduction of Pulsar makes the application scenarios covered by InLong more abundant,  which could meet the needs of more users.\\nThanks to @baomingyu for his contribution to this feature.  For more details,  please refer to [INLONG-1330](https://github.com/apache/incubator-inlong/issues/1330).\\n\\n#### Go SDK for InLong TubeMQ\\nBefore version 0.11.0,  InLong TubeMQ supports SDKs in three languages:  Java,  C++,  and Python.  With more and more applications of Go language,  the demand for Go language SDK in the community is also increasing. Version 0.11.0 was officially introduced to the Go language SDK of TubeMQ.  The multilingual SDK is enriched,  and the difficulty of access and use for Go language users is also reduced.\\nThanks to @TszKitLo40 for contributing to this feature. For more details, please refer to:\\n- [INLONG-624](https://github.com/apache/incubator-inlong/issues/624)\\n- [INLONG-1578](https://github.com/apache/incubator-inlong/issues/1570)\\n- [INLONG-1584](https://github.com/apache/incubator-inlong/issues/1584)\\n- [INLONG-1666](https://github.com/apache/incubator-inlong/issues/1666)\\n- [INLONG-1682](https://github.com/apache/incubator-inlong/issues/1682)\\n\\n#### refactor the official website\\nIn version 0.11.0,  InLong uses Docusaurus to refactor the [official website](https://inlong.apache.org/) to provide a more concise and intuitive document management and display.\\nThanks to @leezng for his contribution to this feature. For more details,  please refer to:\\n- [INLONG-1631](https://github.com/apache/incubator-inlong/issues/1631)\\n- [INLONG-1632](https://github.com/apache/incubator-inlong/issues/1632)\\n- [INLONG-1633](https://github.com/apache/incubator-inlong/issues/1633)\\n- [INLONG-1634](https://github.com/apache/incubator-inlong/issues/1634)\\n- [INLONG-1635](https://github.com/apache/incubator-inlong/issues/1635)\\n- [INLONG-1636](https://github.com/apache/incubator-inlong/issues/1636)\\n- [INLONG-1637](https://github.com/apache/incubator-inlong/issues/1637)\\n- [INLONG-1638](https://github.com/apache/incubator-inlong/issues/1638)\\n\\nIn addition to the above major features,  InLong 0.11.0 version has other key improvements,  including but not limited to:\\n- Added contribution guidelines in the main Repo,  [INLONG-1623](https://github.com/apache/incubator-inlong/issues/1623)\\n- Add Inlong-Manager to DataProxy configuration management, [INLONG-1595](https://github.com/apache/incubator-inlong/issues/1595)\\n- Optimized the GitHub issue template, [INLONG-1585](https://github.com/apache/incubator-inlong/issues/1585)\\n- Code Checkstyle optimization, [INLONG-1571](https://github.com/apache/incubator-inlong/issues/1571), [INLONG-1593](https://github.com/apache/incubator-inlong/issues/1593), [INLONG-1593](https://github.com/apache/incubator-inlong/issues/1593), [INLONG-1662](https://github.com/apache/incubator-inlong/issues/1662)\\n- Agent introduces message filter, [INLONG-1641](https://github.com/apache/incubator-inlong/issues/1641)\\n\\nThe 0.11.0 version also fixes ~45 bugs. Thanks to all the contributions who have contributed to the Inlong community (in no particular order):\\n- shink\\n- baomingyu\\n- TszKitLo40\\n- leezng\\n- ruanwenjun\\n- leo65535\\n- luchunliang\\n- pierre94\\n- EMsnap\\n- dockerzhang\\n- gosonzhang\\n- healchow\\n- guangxuCheng\\n- yuanboliu\\n\\n### Apache InLong(incubating) follow-up planning\\nIn the subsequent version planning of InLong, we will further release the capabilities of InLong to cover more usage scenarios, mainly including\\n- Support Apache Pulsar full link data access capabilities, including back-end processing and front-end management capabilities.\\n- Support data flow such as ClickHouse,  Apache Iceberg,  Apache HBase, etc."}]}')}}]);