{
  "swagger": "2.0",
  "tags": [
    {
      "name": "Audit-API",
      "description": "Audit Controller"
    },
    {
      "name": "Data-Node-API",
      "description": "Data Node Controller"
    },
    {
      "name": "Heartbeat-API",
      "description": "Heartbeat Controller"
    },
    {
      "name": "INLONG-User-API",
      "description": "Inlong Role Controller"
    },
    {
      "name": "Inlong-Cluster-API",
      "description": "Inlong Cluster Controller"
    },
    {
      "name": "Inlong-Consume-API",
      "description": "Inlong Consume Controller"
    },
    {
      "name": "Inlong-Group-API",
      "description": "Inlong Group Controller"
    },
    {
      "name": "Inlong-Sort-API",
      "description": "Inlong Sort Controller"
    },
    {
      "name": "Inlong-Stream-API",
      "description": "Inlong Stream Controller"
    },
    {
      "name": "Open-Agent-API",
      "description": "Agent Controller"
    },
    {
      "name": "Open-Audit-API",
      "description": "Audit Controller"
    },
    {
      "name": "Open-Cluster-API",
      "description": "Open In Long Cluster Controller"
    },
    {
      "name": "Open-DBCollector-API",
      "description": "DB Collector Controller"
    },
    {
      "name": "Open-DataNode-API",
      "description": "Open Data Node Controller"
    },
    {
      "name": "Open-DataProxy-API",
      "description": "Data Proxy Controller"
    },
    {
      "name": "Open-Heartbeat-API",
      "description": "Open Heartbeat Controller"
    },
    {
      "name": "Open-InLongGroup-API",
      "description": "Open In Long Group Controller"
    },
    {
      "name": "Open-InLongStream-API",
      "description": "Open In Long Stream Controller"
    },
    {
      "name": "Open-InlongTenant-API",
      "description": "Open Inlong Tenant Controller"
    },
    {
      "name": "Open-InlongTenantRole-API",
      "description": "Open Inlong Tenant Role Controller"
    },
    {
      "name": "Open-Sort-API",
      "description": "Sort Controller"
    },
    {
      "name": "Open-StreamSink-API",
      "description": "Open Stream Sink Controller"
    },
    {
      "name": "Open-StreamSource-API",
      "description": "Open Stream Source Controller"
    },
    {
      "name": "Open-StreamTransform-API",
      "description": "Open Stream Transform Controller"
    },
    {
      "name": "Stream-Sink-API",
      "description": "Stream Sink Controller"
    },
    {
      "name": "Stream-Source-API",
      "description": "Stream Source Controller"
    },
    {
      "name": "Stream-Transform-API",
      "description": "Stream Transform Controller"
    },
    {
      "name": "Tenant-API",
      "description": "Inlong Tenant Controller"
    },
    {
      "name": "User-Anno-API",
      "description": "Anno Controller"
    },
    {
      "name": "User-Auth-API",
      "description": "User Controller"
    },
    {
      "name": "Workflow-API",
      "description": "Workflow Controller"
    },
    {
      "name": "Workflow-Approver-API",
      "description": "Workflow Approver Controller"
    },
    {
      "name": "Workflow-Event-API",
      "description": "Workflow Event Controller"
    }
  ],
  "paths": {
    "/inlong/manager/api/anno/login": {
      "post": {
        "tags": [
          "User-Anno-API"
        ],
        "summary": "login",
        "operationId": "loginUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "loginRequest",
            "description": "loginRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login user and password",
              "originalRef": "Login user and password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/anno/logout": {
      "get": {
        "tags": [
          "User-Anno-API"
        ],
        "summary": "logout",
        "operationId": "logoutUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/anno/register": {
      "post": {
        "tags": [
          "User-Anno-API"
        ],
        "summary": "register",
        "operationId": "registerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User info request",
              "originalRef": "User info request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/audit/getSource": {
      "get": {
        "tags": [
          "Audit-API"
        ],
        "summary": "Get the audit source",
        "operationId": "getAuditSourceUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Audit source response»",
              "originalRef": "Response«Audit source response»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/audit/list": {
      "post": {
        "tags": [
          "Audit-API"
        ],
        "summary": "Query audit list according to conditions",
        "operationId": "listByConditionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Audit query request",
              "originalRef": "Audit query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«AuditVO»»",
              "originalRef": "Response«List«AuditVO»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/audit/refreshCache": {
      "post": {
        "tags": [
          "Audit-API"
        ],
        "summary": "Refresh audit base item cache",
        "operationId": "refreshCacheUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/audit/updateSource": {
      "post": {
        "tags": [
          "Audit-API"
        ],
        "summary": "Update the audit source",
        "operationId": "updateAuditSourceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Audit source request",
              "originalRef": "Audit source request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/bindTag": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Bind or unbind cluster tag",
        "operationId": "bindTagUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster bind and unbind tag request",
              "originalRef": "Cluster bind and unbind tag request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/delete/{id}": {
      "delete": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Delete cluster by id",
        "operationId": "deleteUsingDELETE_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/deleteByKey": {
      "delete": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Delete cluster by cluster name and type",
        "operationId": "deleteByKeyUsingDELETE_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Cluster name",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Cluster type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/get/{id}": {
      "get": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Get cluster by id",
        "operationId": "getUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong cluster info»",
              "originalRef": "Response«Inlong cluster info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/list": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "List clusters",
        "operationId": "listUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster paging query request",
              "originalRef": "Inlong cluster paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong cluster info»»",
              "originalRef": "Response«Paginated query results«Inlong cluster info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/listByTenantRole": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "List cluster by tenant condition",
        "operationId": "listByTenantRoleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster paging query request",
              "originalRef": "Inlong cluster paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong cluster info»»",
              "originalRef": "Response«Paginated query results«Inlong cluster info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/node/delete/{id}": {
      "delete": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Delete cluster node",
        "operationId": "deleteNodeUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster node ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/node/get/{id}": {
      "get": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Get cluster node by id",
        "operationId": "getNodeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster node ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Cluster node response»",
              "originalRef": "Response«Cluster node response»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/node/list": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "List cluster nodes by pagination",
        "operationId": "listNodeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster paging query request",
              "originalRef": "Inlong cluster paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Cluster node response»»",
              "originalRef": "Response«Paginated query results«Cluster node response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/node/listByGroupId": {
      "get": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "List cluster nodes by groupId, clusterType and protocolType",
        "operationId": "listByGroupIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clusterType",
            "in": "query",
            "description": "clusterType",
            "required": true,
            "type": "string"
          },
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "inlongGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "protocolType",
            "in": "query",
            "description": "protocolType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Cluster node response»»",
              "originalRef": "Response«List«Cluster node response»»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/node/save": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Save cluster node",
        "operationId": "saveNodeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster node request",
              "originalRef": "Cluster node request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/node/update": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Update cluster node",
        "operationId": "updateNodeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster node request",
              "originalRef": "Cluster node request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/save": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Save cluster",
        "operationId": "saveUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster request",
              "originalRef": "Inlong cluster request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/tag/delete/{id}": {
      "delete": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Delete cluster tag by id",
        "operationId": "deleteTagUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster tag ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/tag/get/{id}": {
      "get": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Get cluster tag by id",
        "operationId": "getTagUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Cluster tag response»",
              "originalRef": "Response«Cluster tag response»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/tag/list": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "List cluster tags",
        "operationId": "listTagUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster tag paging query request",
              "originalRef": "Cluster tag paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Cluster tag response»»",
              "originalRef": "Response«Paginated query results«Cluster tag response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/tag/listTagByTenantRole": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "List cluster tags by tenant condition",
        "operationId": "listTagByTenantRoleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster tag paging query request",
              "originalRef": "Cluster tag paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Cluster tag response»»",
              "originalRef": "Response«Paginated query results«Cluster tag response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/tag/save": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Save cluster tag",
        "operationId": "saveTagUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster tag request",
              "originalRef": "Cluster tag request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/tag/update": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Update cluster tag",
        "operationId": "updateTagUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster tag request",
              "originalRef": "Cluster tag request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/tenant/tag/delete/{id}": {
      "delete": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Delete tenant cluster tag by id",
        "operationId": "deleteTenantTagUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster tag ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/tenant/tag/list": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "List tenant cluster tags",
        "operationId": "listTenantTagUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster tag paging query request",
              "originalRef": "Cluster tag paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Tenant cluster tag response»»",
              "originalRef": "Response«Paginated query results«Tenant cluster tag response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/tenant/tag/save": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Save tenant cluster tag",
        "operationId": "saveTenantTagUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant Cluster tag request",
              "originalRef": "Tenant Cluster tag request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/testConnection": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Test connection for inlong cluster",
        "operationId": "testConnectionUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster request",
              "originalRef": "Inlong cluster request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/update": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Update cluster",
        "operationId": "updateUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster request",
              "originalRef": "Inlong cluster request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/cluster/updateByKey": {
      "post": {
        "tags": [
          "Inlong-Cluster-API"
        ],
        "summary": "Update cluster by key",
        "operationId": "updateByKeyUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster request",
              "originalRef": "Inlong cluster request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Update result info»",
              "originalRef": "Response«Update result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/consume/countStatus": {
      "get": {
        "tags": [
          "Inlong-Consume-API"
        ],
        "summary": "Count inlong consume status by current user",
        "operationId": "countStatusByUserUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Count info of inlong consume status»",
              "originalRef": "Response«Count info of inlong consume status»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/consume/delete/{id}": {
      "delete": {
        "tags": [
          "Inlong-Consume-API"
        ],
        "summary": "Delete inlong consume by ID",
        "operationId": "deleteUsingDELETE_2",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inlong consume ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/consume/get/{id}": {
      "get": {
        "tags": [
          "Inlong-Consume-API"
        ],
        "summary": "Get inlong consume",
        "operationId": "getUsingGET_2",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inlong consume ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Base inlong consume info»",
              "originalRef": "Response«Base inlong consume info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/consume/list": {
      "post": {
        "tags": [
          "Inlong-Consume-API"
        ],
        "summary": "List inlong consume by pagination",
        "operationId": "listUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong consume query request",
              "originalRef": "Inlong consume query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong consume brief info»»",
              "originalRef": "Response«Paginated query results«Inlong consume brief info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/consume/save": {
      "post": {
        "tags": [
          "Inlong-Consume-API"
        ],
        "summary": "Save inlong consume",
        "operationId": "saveUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Base inlong consume request",
              "originalRef": "Base inlong consume request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/consume/startProcess/{id}": {
      "post": {
        "tags": [
          "Inlong-Consume-API"
        ],
        "summary": "Start inlong consume process",
        "operationId": "startProcessUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Inlong consume ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/consume/update": {
      "post": {
        "tags": [
          "Inlong-Consume-API"
        ],
        "summary": "Update inlong consume",
        "operationId": "updateUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Base inlong consume request",
              "originalRef": "Base inlong consume request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/countByStatus": {
      "get": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Count inlong group status for current user",
        "operationId": "countGroupByUserUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "inlongGroupMode",
            "in": "query",
            "description": "inlongGroupMode",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Statistics of inlong group status»",
              "originalRef": "Response«Statistics of inlong group status»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/delete/{groupId}": {
      "delete": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Delete inlong group info",
        "operationId": "deleteUsingDELETE_3",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/group/deleteAsync/{groupId}": {
      "delete": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Delete inlong group info",
        "operationId": "deleteAsyncUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«string»",
              "originalRef": "Response«string»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/group/detail/{groupId}": {
      "get": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "get group detail",
        "operationId": "detailUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Map«string,object»»",
              "originalRef": "Response«Map«string,object»»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/exist/{groupId}": {
      "get": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Is the inlong group id exists",
        "operationId": "existUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/get/{groupId}": {
      "get": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Get inlong group",
        "operationId": "getUsingGET_3",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong group info»",
              "originalRef": "Response«Inlong group info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/getBackupTopic/{groupId}": {
      "get": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Get backup topic info",
        "operationId": "getBackupTopicUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong group and topic info»",
              "originalRef": "Response«Inlong group and topic info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/getTopic/{groupId}": {
      "get": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Get topic info",
        "operationId": "getTopicUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong group and topic info»",
              "originalRef": "Response«Inlong group and topic info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/list": {
      "post": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "List inlong groups by paginating",
        "operationId": "listBriefUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong group query request",
              "originalRef": "Inlong group query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong group brief info»»",
              "originalRef": "Response«Paginated query results«Inlong group brief info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/listTopics": {
      "post": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Get topic infos",
        "operationId": "listTopicsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong group topic request",
              "originalRef": "Inlong group topic request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Inlong group and topic info»»",
              "originalRef": "Response«List«Inlong group and topic info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/reset": {
      "post": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Reset group status when group is in CONFIG_ING|SUSPENDING|RESTARTING|DELETING",
        "operationId": "resetUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong group reset request",
              "originalRef": "Inlong group reset request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/restartProcess/{groupId}": {
      "post": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Restart inlong group process",
        "operationId": "restartProcessUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/restartProcessAsync/{groupId}": {
      "post": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Restart inlong group process",
        "operationId": "restartProcessAsyncUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«string»",
              "originalRef": "Response«string»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/save": {
      "post": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Save inlong group",
        "operationId": "saveUsingPOST_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "groupRequest",
            "description": "groupRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong group create request",
              "originalRef": "Inlong group create request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«string»",
              "originalRef": "Response«string»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/startProcess/{groupId}": {
      "post": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Start inlong approval process",
        "operationId": "startProcessUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/suspendProcess/{groupId}": {
      "post": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Suspend inlong group process",
        "operationId": "suspendProcessUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/suspendProcessAsync/{groupId}": {
      "post": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Suspend inlong group process",
        "operationId": "suspendProcessAsyncUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«string»",
              "originalRef": "Response«string»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/group/update": {
      "post": {
        "tags": [
          "Inlong-Group-API"
        ],
        "summary": "Update inlong group",
        "operationId": "updateUsingPOST_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "groupRequest",
            "description": "groupRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong group create request",
              "originalRef": "Inlong group create request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«string»",
              "originalRef": "Response«string»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/heartbeat/component/get": {
      "post": {
        "tags": [
          "Heartbeat-API"
        ],
        "summary": "Get component heartbeat",
        "operationId": "getComponentHeartbeatUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Heartbeat query request",
              "originalRef": "Heartbeat query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Component heartbeat response»",
              "originalRef": "Response«Component heartbeat response»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/heartbeat/component/list": {
      "post": {
        "tags": [
          "Heartbeat-API"
        ],
        "summary": "List component heartbeats",
        "operationId": "listComponentHeartbeatUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Base heartbeat page request",
              "originalRef": "Base heartbeat page request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Component heartbeat response»»",
              "originalRef": "Response«Paginated query results«Component heartbeat response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/heartbeat/group/get": {
      "post": {
        "tags": [
          "Heartbeat-API"
        ],
        "summary": "Get group heartbeat",
        "operationId": "getGroupHeartbeatUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Heartbeat query request",
              "originalRef": "Heartbeat query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong group heartbeat response»",
              "originalRef": "Response«Inlong group heartbeat response»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/heartbeat/group/list": {
      "post": {
        "tags": [
          "Heartbeat-API"
        ],
        "summary": "List group heartbeats",
        "operationId": "listGroupHeartbeatUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Base heartbeat page request",
              "originalRef": "Base heartbeat page request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong group heartbeat response»»",
              "originalRef": "Response«Paginated query results«Inlong group heartbeat response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/heartbeat/stream/get": {
      "post": {
        "tags": [
          "Heartbeat-API"
        ],
        "summary": "Get stream heartbeat",
        "operationId": "getStreamHeartbeatUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Heartbeat query request",
              "originalRef": "Heartbeat query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong stream heartbeat response»",
              "originalRef": "Response«Inlong stream heartbeat response»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/heartbeat/stream/list": {
      "post": {
        "tags": [
          "Heartbeat-API"
        ],
        "summary": "List stream heartbeats",
        "operationId": "listStreamHeartbeatUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Base heartbeat page request",
              "originalRef": "Base heartbeat page request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong stream heartbeat response»»",
              "originalRef": "Response«Paginated query results«Inlong stream heartbeat response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/node/delete/{id}": {
      "delete": {
        "tags": [
          "Data-Node-API"
        ],
        "summary": "Delete data node by id",
        "operationId": "deleteUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Data node ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/node/deleteByKey": {
      "delete": {
        "tags": [
          "Data-Node-API"
        ],
        "summary": "Delete data node by key",
        "operationId": "deleteByKeyUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Data node name",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Data node type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/node/get/{id}": {
      "get": {
        "tags": [
          "Data-Node-API"
        ],
        "summary": "Get node by id",
        "operationId": "getUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Data node ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Data node info»",
              "originalRef": "Response«Data node info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/node/list": {
      "post": {
        "tags": [
          "Data-Node-API"
        ],
        "summary": "List data node",
        "operationId": "listUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Data node paging query request",
              "originalRef": "Data node paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Data node info»»",
              "originalRef": "Response«Paginated query results«Data node info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/node/save": {
      "post": {
        "tags": [
          "Data-Node-API"
        ],
        "summary": "Save node",
        "operationId": "saveUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Data node request",
              "originalRef": "Data node request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/node/testConnection": {
      "post": {
        "tags": [
          "Data-Node-API"
        ],
        "summary": "Test connection for data node",
        "operationId": "testConnectionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Data node request",
              "originalRef": "Data node request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/node/update": {
      "post": {
        "tags": [
          "Data-Node-API"
        ],
        "summary": "Update data node",
        "operationId": "updateUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Data node request",
              "originalRef": "Data node request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/node/updateByKey": {
      "post": {
        "tags": [
          "Data-Node-API"
        ],
        "summary": "Update data node by key",
        "operationId": "updateByKeyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Data node request",
              "originalRef": "Data node request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Update result info»",
              "originalRef": "Response«Update result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/role/inlong/get/{id}": {
      "get": {
        "tags": [
          "INLONG-USER-API"
        ],
        "summary": "Get inlong role by ID",
        "operationId": "getUsingGET_4",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong user role info»",
              "originalRef": "Response«Inlong user role info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/role/inlong/list": {
      "post": {
        "tags": [
          "INLONG-USER-API"
        ],
        "summary": "List inlong roles by paginating",
        "operationId": "listByConditionUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong user paging query request",
              "originalRef": "Inlong user paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong user role info»»",
              "originalRef": "Response«Paginated query results«Inlong user role info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/role/inlong/save": {
      "post": {
        "tags": [
          "INLONG-USER-API"
        ],
        "summary": "Save inlong role",
        "operationId": "saveUsingPOST_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong user role request",
              "originalRef": "Inlong user role request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/role/inlong/update": {
      "post": {
        "tags": [
          "INLONG-USER-API"
        ],
        "summary": "Update inlong role",
        "operationId": "updateUsingPOST_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong user role request",
              "originalRef": "Inlong user role request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/role/tenant/delete/{id}": {
      "delete": {
        "tags": [
          "Tenant-API"
        ],
        "summary": "Delete tenant role by ID",
        "operationId": "deleteUsingDELETE_5",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/role/tenant/get/{id}": {
      "get": {
        "tags": [
          "Tenant-API"
        ],
        "summary": "Get tenant role by ID",
        "operationId": "getUsingGET_7",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong tenant user role info»",
              "originalRef": "Response«Inlong tenant user role info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/role/tenant/list": {
      "post": {
        "tags": [
          "Tenant-API"
        ],
        "summary": "List tenant roles by paginating",
        "operationId": "listByConditionUsingPOST_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant user paging query request",
              "originalRef": "Tenant user paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong tenant user role info»»",
              "originalRef": "Response«Paginated query results«Inlong tenant user role info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/role/tenant/save": {
      "post": {
        "tags": [
          "Tenant-API"
        ],
        "summary": "Save tenant role",
        "operationId": "saveUsingPOST_7",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant user role request",
              "originalRef": "Tenant user role request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/role/tenant/update": {
      "post": {
        "tags": [
          "Tenant-API"
        ],
        "summary": "Update tenant role",
        "operationId": "updateUsingPOST_7",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant user role request",
              "originalRef": "Tenant user role request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/sink/delete/{id}": {
      "delete": {
        "tags": [
          "Stream-Sink-API"
        ],
        "summary": "Delete stream sink",
        "operationId": "deleteUsingDELETE_14",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startProcess",
            "in": "query",
            "description": "startProcess",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/sink/deleteByKey": {
      "delete": {
        "tags": [
          "Stream-Sink-API"
        ],
        "summary": "Delete stream sink by key",
        "operationId": "deleteByKeyUsingDELETE_2",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": true,
            "type": "string"
          },
          {
            "name": "startProcess",
            "in": "query",
            "description": "startProcess",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "streamId",
            "in": "query",
            "description": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/sink/get/{id}": {
      "get": {
        "tags": [
          "Stream-Sink-API"
        ],
        "summary": "Get stream sink",
        "operationId": "getUsingGET_16",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Stream sink info»",
              "originalRef": "Response«Stream sink info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/sink/list": {
      "post": {
        "tags": [
          "Stream-Sink-API"
        ],
        "summary": "List stream sinks by paginating",
        "operationId": "listByConditionUsingPOST_10",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Paging query request for Sink",
              "originalRef": "Paging query request for Sink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Stream sink info»»",
              "originalRef": "Response«Paginated query results«Stream sink info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/sink/parseFields": {
      "post": {
        "tags": [
          "Stream-Sink-API"
        ],
        "summary": "parse stream sink fields from statement",
        "operationId": "parseFieldsUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "parseFieldRequest",
            "description": "parseFieldRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Parse field request - with stream",
              "originalRef": "Parse field request - with stream"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Sink field info»»",
              "originalRef": "Response«List«Sink field info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/sink/save": {
      "post": {
        "tags": [
          "Stream-Sink-API"
        ],
        "summary": "Save stream sink",
        "operationId": "saveUsingPOST_17",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream sink request",
              "originalRef": "Stream sink request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/sink/update": {
      "post": {
        "tags": [
          "Stream-Sink-API"
        ],
        "summary": "Update stream sink",
        "operationId": "updateUsingPOST_17",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream sink request",
              "originalRef": "Stream sink request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/sink/updateByKey": {
      "post": {
        "tags": [
          "Stream-Sink-API"
        ],
        "summary": "Update stream sink by key",
        "operationId": "updateByKeyUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream sink request",
              "originalRef": "Stream sink request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Update result info»",
              "originalRef": "Response«Update result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/sort/listStatus": {
      "post": {
        "tags": [
          "Inlong-Sort-API"
        ],
        "summary": "List sort job status",
        "operationId": "listSortStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sort status request",
              "originalRef": "Sort status request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Sort status info»»",
              "originalRef": "Response«List«Sort status info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/source/delete/{id}": {
      "delete": {
        "tags": [
          "Stream-Source-API"
        ],
        "summary": "Delete stream source",
        "operationId": "deleteUsingDELETE_15",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/source/forceDelete": {
      "delete": {
        "tags": [
          "Stream-Source-API"
        ],
        "summary": "Force delete stream source by groupId and streamId",
        "operationId": "forceDeleteUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "inlongGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "inlongStreamId",
            "in": "query",
            "description": "inlongStreamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/source/get/{id}": {
      "get": {
        "tags": [
          "Stream-Source-API"
        ],
        "summary": "Get stream source",
        "operationId": "getUsingGET_17",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Stream source info»",
              "originalRef": "Response«Stream source info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/source/list": {
      "post": {
        "tags": [
          "Stream-Source-API"
        ],
        "summary": "List stream sources by paginating",
        "operationId": "listByConditionUsingPOST_11",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Paging query request for Source",
              "originalRef": "Paging query request for Source"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Stream source info»»",
              "originalRef": "Response«Paginated query results«Stream source info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/source/restart/{id}": {
      "post": {
        "tags": [
          "Stream-Source-API"
        ],
        "summary": "restart stream source",
        "operationId": "restartUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/source/save": {
      "post": {
        "tags": [
          "Stream-Source-API"
        ],
        "summary": "Save stream source",
        "operationId": "saveUsingPOST_18",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream source request",
              "originalRef": "Stream source request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/source/stop/{id}": {
      "post": {
        "tags": [
          "Stream-Source-API"
        ],
        "summary": "stop stream source",
        "operationId": "stopUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/source/update": {
      "post": {
        "tags": [
          "Stream-Source-API"
        ],
        "summary": "Update stream source",
        "operationId": "updateUsingPOST_18",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream source request",
              "originalRef": "Stream source request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/addFields": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Add inlong stream fields",
        "operationId": "addFieldsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "addFieldsRequest",
            "description": "addFieldsRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Add field request - with stream",
              "originalRef": "Add field request - with stream"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/delete": {
      "delete": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Delete inlong stream",
        "operationId": "deleteUsingDELETE_4",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "query",
            "description": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": true
      }
    },
    "/inlong/manager/api/stream/deleteProcess/{groupId}/{streamId}": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Delete inlong stream process",
        "operationId": "deleteProcessUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "streamId",
            "required": true,
            "type": "string"
          },
          {
            "name": "sync",
            "in": "query",
            "description": "sync",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/exist/{groupId}/{streamId}": {
      "get": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Is the inlong stream exists",
        "operationId": "existUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/fieldsImportTemplate": {
      "get": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Download fields import template",
        "operationId": "downloadFieldsImportTemplateUsingGET",
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/get": {
      "get": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Get inlong stream",
        "operationId": "getUsingGET_5",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "query",
            "description": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong stream info»",
              "originalRef": "Response«Inlong stream info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/getBrief": {
      "get": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Get inlong stream brief",
        "operationId": "getBriefUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "query",
            "description": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong stream brief info»",
              "originalRef": "Response«Inlong stream brief info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/list": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "List inlong stream briefs by paginating",
        "operationId": "listByConditionUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong stream paging query request",
              "originalRef": "Inlong stream paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong stream brief info»»",
              "originalRef": "Response«Paginated query results«Inlong stream brief info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/listAll": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "List inlong streams with sources and sinks by paginating",
        "operationId": "listAllWithGroupIdUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong stream paging query request",
              "originalRef": "Inlong stream paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong stream info»»",
              "originalRef": "Response«Paginated query results«Inlong stream info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/listMessages": {
      "get": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Get inlong stream message",
        "operationId": "listMessagesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageCount",
            "in": "query",
            "description": "messageCount",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "query",
            "description": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Brief Message info for MQ»»",
              "originalRef": "Response«List«Brief Message info for MQ»»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/parseFields": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Parse inlong stream fields from statement",
        "operationId": "parseFieldsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "parseFieldRequest",
            "description": "parseFieldRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Parse field request - with stream",
              "originalRef": "Parse field request - with stream"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Stream field configuration»»",
              "originalRef": "Response«List«Stream field configuration»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/parseFieldsByExcel": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Parse inlong stream fields by update excel file",
        "operationId": "parseFieldsByExcelUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "file object",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Stream field configuration»»",
              "originalRef": "Response«List«Stream field configuration»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/restartProcess/{groupId}/{streamId}": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Restart inlong stream process",
        "operationId": "restartProcessUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "streamId",
            "required": true,
            "type": "string"
          },
          {
            "name": "sync",
            "in": "query",
            "description": "sync",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/save": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Save inlong stream",
        "operationId": "saveUsingPOST_5",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong stream request",
              "originalRef": "Inlong stream request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/startProcess/{groupId}/{streamId}": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Start inlong stream process",
        "operationId": "startProcessUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "streamId",
            "required": true,
            "type": "string"
          },
          {
            "name": "sync",
            "in": "query",
            "description": "sync",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/suspendProcess/{groupId}/{streamId}": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Suspend inlong stream process",
        "operationId": "suspendProcessUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "streamId",
            "required": true,
            "type": "string"
          },
          {
            "name": "sync",
            "in": "query",
            "description": "sync",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/stream/update": {
      "post": {
        "tags": [
          "Inlong-Stream-API"
        ],
        "summary": "Update inlong stream",
        "operationId": "updateUsingPOST_5",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong stream request",
              "originalRef": "Inlong stream request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/tenant/delete/{name}": {
      "get": {
        "tags": [
          "Tenant-API"
        ],
        "summary": "Delete inlong tenant by name",
        "operationId": "deleteUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/tenant/get/{name}": {
      "get": {
        "tags": [
          "Tenant-API"
        ],
        "summary": "Get inlong tenant by name",
        "operationId": "getUsingGET_6",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong tenant info»",
              "originalRef": "Response«Inlong tenant info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/tenant/list": {
      "post": {
        "tags": [
          "Tenant-API"
        ],
        "summary": "List tenant by paginating",
        "operationId": "listByConditionUsingPOST_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant paging query request",
              "originalRef": "Tenant paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong tenant info»»",
              "originalRef": "Response«Paginated query results«Inlong tenant info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/tenant/save": {
      "post": {
        "tags": [
          "Tenant-API"
        ],
        "summary": "Save inlong tenant",
        "operationId": "saveUsingPOST_6",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant request",
              "originalRef": "Tenant request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/tenant/update": {
      "post": {
        "tags": [
          "Tenant-API"
        ],
        "summary": "Update inlong tenant",
        "operationId": "updateUsingPOST_6",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant request",
              "originalRef": "Tenant request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/transform/delete": {
      "delete": {
        "tags": [
          "Stream-Transform-API"
        ],
        "summary": "Delete stream transform",
        "operationId": "deleteUsingDELETE_16",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "Inlong group id",
            "required": true,
            "type": "string",
            "pattern": "^[a-z0-9_.-]{4,100}$"
          },
          {
            "name": "inlongStreamId",
            "in": "query",
            "description": "Inlong stream id",
            "required": true,
            "type": "string",
            "pattern": "^[a-z0-9_.-]{1,100}$"
          },
          {
            "name": "transformName",
            "in": "query",
            "description": "Transform name, unique in one stream",
            "required": true,
            "type": "string",
            "pattern": "^[a-z0-9_-]{1,100}$"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/transform/get/{id}": {
      "get": {
        "tags": [
          "Stream-Transform-API"
        ],
        "summary": "Get stream transform",
        "operationId": "getUsingGET_18",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Response of the stream transform»",
              "originalRef": "Response«Response of the stream transform»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/transform/list": {
      "post": {
        "tags": [
          "Stream-Transform-API"
        ],
        "summary": "Get stream transform list",
        "operationId": "listUsingPOST_5",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Paging query request for TransformPageRequest",
              "originalRef": "Paging query request for TransformPageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Response of the stream transform»»",
              "originalRef": "Response«Paginated query results«Response of the stream transform»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/transform/save": {
      "post": {
        "tags": [
          "Stream-Transform-API"
        ],
        "summary": "Save stream transform",
        "operationId": "saveUsingPOST_19",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream transform request",
              "originalRef": "Stream transform request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/transform/update": {
      "post": {
        "tags": [
          "Stream-Transform-API"
        ],
        "summary": "Update stream transform",
        "operationId": "updateUsingPOST_19",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream transform request",
              "originalRef": "Stream transform request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/user/currentUser": {
      "post": {
        "tags": [
          "User-Auth-API"
        ],
        "summary": "Get the logged-in user",
        "operationId": "currentUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«User info»",
              "originalRef": "Response«User info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/user/delete": {
      "delete": {
        "tags": [
          "User-Auth-API"
        ],
        "summary": "Delete user by id",
        "operationId": "deleteUsingDELETE_17",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/user/get/{id}": {
      "get": {
        "tags": [
          "User-Auth-API"
        ],
        "summary": "Get user by ID",
        "operationId": "getByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«User info»",
              "originalRef": "Response«User info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/user/getByName/{name}": {
      "get": {
        "tags": [
          "User-Auth-API"
        ],
        "summary": "Get user by name",
        "operationId": "getByNameUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«User info»",
              "originalRef": "Response«User info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/user/listAll": {
      "post": {
        "tags": [
          "User-Auth-API"
        ],
        "summary": "List all users",
        "operationId": "listUsingPOST_6",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User info request",
              "originalRef": "User info request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«User info»»",
              "originalRef": "Response«Paginated query results«User info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/user/register": {
      "post": {
        "tags": [
          "User-Auth-API"
        ],
        "summary": "Register user",
        "operationId": "registerUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userInfo",
            "description": "userInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User info request",
              "originalRef": "User info request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/user/update": {
      "post": {
        "tags": [
          "User-Auth-API"
        ],
        "summary": "Update user info",
        "operationId": "updateUsingPOST_20",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userInfo",
            "description": "userInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User info request",
              "originalRef": "User info request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/approve/{id}": {
      "post": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Approval and consent",
        "operationId": "approveUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow approval request",
              "originalRef": "Workflow approval request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/approver/delete/{id}": {
      "delete": {
        "tags": [
          "Workflow-Approver-API"
        ],
        "summary": "Delete approver by ID",
        "operationId": "deleteUsingDELETE_18",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow approver ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/approver/get/{id}": {
      "get": {
        "tags": [
          "Workflow-Approver-API"
        ],
        "summary": "Get approver by ID",
        "operationId": "getUsingGET_19",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow approver ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow Approver response»",
              "originalRef": "Response«Workflow Approver response»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/approver/list": {
      "get": {
        "tags": [
          "Workflow-Approver-API"
        ],
        "summary": "List workflow approvers",
        "operationId": "listByConditionUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "approver",
            "in": "query",
            "description": "Specified workflow approver",
            "required": false,
            "type": "string"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Keywords, can be process name, task name, approver name, etc.",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderField",
            "in": "query",
            "description": "Order field, support create_time and modify_time, default is create_time",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderType",
            "in": "query",
            "description": "Order type, only support asc and desc, default is desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "Current page number, default is 1",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size, default is 10",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "processName",
            "in": "query",
            "description": "Workflow process name",
            "required": false,
            "type": "string"
          },
          {
            "name": "taskName",
            "in": "query",
            "description": "Workflow task name",
            "required": false,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "query",
            "description": "Inlong tenant name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Workflow Approver response»»",
              "originalRef": "Response«Paginated query results«Workflow Approver response»»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/approver/save": {
      "post": {
        "tags": [
          "Workflow-Approver-API"
        ],
        "summary": "Save approver info",
        "operationId": "saveUsingPOST_20",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "config",
            "description": "config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow approver request",
              "originalRef": "Workflow approver request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/approver/update": {
      "post": {
        "tags": [
          "Workflow-Approver-API"
        ],
        "summary": "Update approver info",
        "operationId": "updateUsingPOST_21",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow approver request",
              "originalRef": "Workflow approver request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/cancel/{id}": {
      "post": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Cancellation process",
        "operationId": "cancelUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Process ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow operation request",
              "originalRef": "Workflow operation request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/complete/{id}": {
      "post": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Complete task by ID",
        "operationId": "completeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow approval request",
              "originalRef": "Workflow approval request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/continue/{id}": {
      "post": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Continue process",
        "operationId": "continueProcessUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Process ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow operation request",
              "originalRef": "Workflow operation request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/detail/{id}": {
      "get": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Get process detail",
        "operationId": "detailUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Process ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "taskId",
            "in": "query",
            "description": "Task ID",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Process detail response»",
              "originalRef": "Response«Process detail response»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/event/detail/{id}": {
      "get": {
        "tags": [
          "Workflow-Event-API"
        ],
        "summary": "Get event details",
        "operationId": "getUsingGET_20",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow event log response»",
              "originalRef": "Response«Workflow event log response»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/event/executeEventListener/{id}": {
      "post": {
        "tags": [
          "Workflow-Event-API"
        ],
        "summary": "Execute the listener based on the event log ID",
        "operationId": "executeEventListenerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event log ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«object»",
              "originalRef": "Response«object»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/inlong/manager/api/workflow/event/executeProcessEventListener": {
      "post": {
        "tags": [
          "Workflow-Event-API"
        ],
        "summary": "Re-execute the specified listener based on the process ID",
        "operationId": "executeProcessEventListenerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "listenerName",
            "in": "query",
            "description": "Listener name",
            "required": true,
            "type": "string"
          },
          {
            "name": "processId",
            "in": "query",
            "description": "Process ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«object»",
              "originalRef": "Response«object»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/inlong/manager/api/workflow/event/executeTaskEventListener": {
      "post": {
        "tags": [
          "Workflow-Event-API"
        ],
        "summary": "Re-execute the specified listener based on the task ID",
        "operationId": "executeTaskEventListenerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "listenerName",
            "in": "query",
            "description": "Listener name",
            "required": false,
            "type": "string"
          },
          {
            "name": "taskId",
            "in": "query",
            "description": "Task ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«object»",
              "originalRef": "Response«object»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/inlong/manager/api/workflow/event/list": {
      "get": {
        "tags": [
          "Workflow-Event-API"
        ],
        "summary": "Get event list by paginating",
        "operationId": "listUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "elementName",
            "in": "query",
            "description": "Element name",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTimeBegin",
            "in": "query",
            "description": "End time-upper limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimeEnd",
            "in": "query",
            "description": "End time-lower limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "event",
            "in": "query",
            "description": "Event",
            "required": false,
            "type": "string"
          },
          {
            "name": "eventType",
            "in": "query",
            "description": "Event type",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "Inlong group id",
            "required": false,
            "type": "string"
          },
          {
            "name": "ip",
            "in": "query",
            "description": "Execute IP",
            "required": false,
            "type": "string"
          },
          {
            "name": "listener",
            "in": "query",
            "description": "Listener name",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderField",
            "in": "query",
            "description": "Order field, support create_time and modify_time, default is create_time",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderType",
            "in": "query",
            "description": "Order type, only support asc and desc, default is desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "Current page number, default is 1",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size, default is 10",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "processId",
            "in": "query",
            "description": "Process ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "processName",
            "in": "query",
            "description": "Process name",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTimeBegin",
            "in": "query",
            "description": "Start time-lower limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startTimeEnd",
            "in": "query",
            "description": "Start time-upper limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "taskId",
            "in": "query",
            "description": "Task id",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Workflow event log response»»",
              "originalRef": "Response«Paginated query results«Workflow event log response»»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/event/triggerProcessEvent": {
      "post": {
        "tags": [
          "Workflow-Event-API"
        ],
        "summary": "Re-trigger the process event based on the process ID",
        "operationId": "triggerProcessEventUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "processEvent",
            "description": "process event",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CANCEL",
                "COMPLETE",
                "CREATE",
                "FAIL",
                "REJECT",
                "TERMINATE"
              ]
            }
          },
          {
            "in": "body",
            "name": "processId",
            "description": "process id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«object»",
              "originalRef": "Response«object»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/inlong/manager/api/workflow/event/triggerTaskEvent": {
      "post": {
        "tags": [
          "Workflow-Event-API"
        ],
        "summary": "Re-trigger the task event based on the task ID",
        "operationId": "triggerTaskEventUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "taskEvent",
            "description": "task event",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "APPROVE",
                "CANCEL",
                "COMPLETE",
                "CREATE",
                "FAIL",
                "REJECT",
                "TERMINATE",
                "TRANSFER"
              ]
            }
          },
          {
            "in": "body",
            "name": "taskId",
            "description": "task id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«object»",
              "originalRef": "Response«object»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/inlong/manager/api/workflow/listProcess": {
      "get": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Get process list by paginating",
        "operationId": "listProcessUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "applicant",
            "in": "query",
            "description": "Applicant",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "Process display name",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTimeBegin",
            "in": "query",
            "description": "End time-lower limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimeEnd",
            "in": "query",
            "description": "End time-upper limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "hidden",
            "in": "query",
            "description": "Whether to hide, 0: not hidden, 1: hidden",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Process ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "idList",
            "in": "query",
            "description": "Process id list",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "includeCurrentTask",
            "in": "query",
            "description": "Whether to include the current to-do task",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeShowInList",
            "in": "query",
            "description": "Whether to include the form info displayed in the list",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "Inlong group id",
            "required": false,
            "type": "string"
          },
          {
            "name": "inlongStreamId",
            "in": "query",
            "description": "Inlong stream id",
            "required": false,
            "type": "string"
          },
          {
            "name": "nameList",
            "in": "query",
            "description": "Process name list",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "orderField",
            "in": "query",
            "description": "Order field, support create_time and modify_time, default is create_time",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderType",
            "in": "query",
            "description": "Order type, only support asc and desc, default is desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "Current page number, default is 1",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size, default is 10",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startTimeBegin",
            "in": "query",
            "description": "Start time-lower limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startTimeEnd",
            "in": "query",
            "description": "Start time-upper limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status",
            "required": false,
            "type": "string",
            "enum": [
              "CANCELED",
              "COMPLETED",
              "PROCESSING",
              "REJECTED",
              "TERMINATED"
            ]
          },
          {
            "name": "tenant",
            "in": "query",
            "description": "Inlong tenant name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Process response»»",
              "originalRef": "Response«Paginated query results«Process response»»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/listTask": {
      "get": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Get task list by paginating",
        "operationId": "listTaskUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "applicant",
            "in": "query",
            "description": "Applicant name",
            "required": false,
            "type": "string"
          },
          {
            "name": "approver",
            "in": "query",
            "description": "Approver names",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "Task display name",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTimeBegin",
            "in": "query",
            "description": "End time-upper limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimeEnd",
            "in": "query",
            "description": "End time-lower limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Task ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Task name",
            "required": false,
            "type": "string"
          },
          {
            "name": "operator",
            "in": "query",
            "description": "Actual operator",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderField",
            "in": "query",
            "description": "Order field, support create_time and modify_time, default is create_time",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderType",
            "in": "query",
            "description": "Order type, only support asc and desc, default is desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "Current page number, default is 1",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size, default is 10",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "processId",
            "in": "query",
            "description": "Process ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startTimeBegin",
            "in": "query",
            "description": "Start time-lower limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startTimeEnd",
            "in": "query",
            "description": "Start time-upper limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "statusSet",
            "in": "query",
            "description": "Status set",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPROVED",
                "CANCELED",
                "COMPLETED",
                "FAILED",
                "PENDING",
                "REJECTED",
                "SKIPPED",
                "TERMINATED",
                "TRANSFERRED"
              ]
            },
            "collectionFormat": "multi",
            "enum": [
              "APPROVED",
              "CANCELED",
              "COMPLETED",
              "FAILED",
              "PENDING",
              "REJECTED",
              "SKIPPED",
              "TERMINATED",
              "TRANSFERRED"
            ]
          },
          {
            "name": "tenant",
            "in": "query",
            "description": "Inlong tenant of workflow",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Task type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Task response»»",
              "originalRef": "Response«Paginated query results«Task response»»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/listTaskLogs": {
      "get": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Get task execution logs",
        "operationId": "listTaskLogsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "Inlong group id",
            "required": false,
            "type": "string"
          },
          {
            "name": "inlongStreamId",
            "in": "query",
            "description": "Inlong stream id",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderField",
            "in": "query",
            "description": "Order field, support create_time and modify_time, default is create_time",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderType",
            "in": "query",
            "description": "Order type, only support asc and desc, default is desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "Current page number, default is 1",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size, default is 10",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "processNames",
            "in": "query",
            "description": "Process name list",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "taskType",
            "in": "query",
            "description": "Task type, include: ServiceTask, UserTask",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«WorkflowExecuteLog»»",
              "originalRef": "Response«Paginated query results«WorkflowExecuteLog»»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/processSummary": {
      "get": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Get process statistics",
        "operationId": "processSummaryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "applicant",
            "in": "query",
            "description": "Applicant",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "Process display name",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTimeBegin",
            "in": "query",
            "description": "End time-upper limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimeEnd",
            "in": "query",
            "description": "End time-lower limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "hidden",
            "in": "query",
            "description": "Whether to hide",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "Inlong group id",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Process name",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTimeBegin",
            "in": "query",
            "description": "Start time-lower limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startTimeEnd",
            "in": "query",
            "description": "Start time-upper limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "tenant",
            "in": "query",
            "description": "Inlong tenant name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Process count response»",
              "originalRef": "Response«Process count response»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/reject/{id}": {
      "post": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Approval rejected",
        "operationId": "rejectUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow approval request",
              "originalRef": "Workflow approval request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/start": {
      "post": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Initiation process",
        "operationId": "startUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow operation request",
              "originalRef": "Workflow operation request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/taskSummary": {
      "get": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Get task statistics",
        "operationId": "taskSummaryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "applicant",
            "in": "query",
            "description": "Applicant name",
            "required": false,
            "type": "string"
          },
          {
            "name": "approver",
            "in": "query",
            "description": "Approver name",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "Task display name",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTimeBegin",
            "in": "query",
            "description": "End time-upper limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimeEnd",
            "in": "query",
            "description": "End time-lower limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Task name",
            "required": false,
            "type": "string"
          },
          {
            "name": "processId",
            "in": "query",
            "description": "Process ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startTimeBegin",
            "in": "query",
            "description": "Start time-lower limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startTimeEnd",
            "in": "query",
            "description": "Start time-upper limit",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "tenant",
            "in": "query",
            "description": "Inlong tenant",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Task type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Task count response»",
              "originalRef": "Response«Task count response»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/api/workflow/transfer/{id}": {
      "post": {
        "tags": [
          "Workflow-API"
        ],
        "summary": "Turn to another approver",
        "description": "Change approver",
        "operationId": "transferUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow approval request",
              "originalRef": "Workflow approval request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Workflow result info»",
              "originalRef": "Response«Workflow result info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/agent/bindGroup": {
      "post": {
        "tags": [
          "Open-Agent-API"
        ],
        "summary": "Divide the agent into different groups, which collect different stream source tasks.",
        "operationId": "bindGroupUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster node bind and unbind stream source label request, stream source label is a filter to judge whether to accept the stream source task",
              "originalRef": "Cluster node bind and unbind stream source label request, stream source label is a filter to judge whether to accept the stream source task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/agent/getManagerIpList": {
      "post": {
        "tags": [
          "Open-Agent-API"
        ],
        "summary": "Get inlong manager ip list",
        "operationId": "getInLongManagerIpUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«string»»",
              "originalRef": "Response«List«string»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/agent/reportAndGetTask": {
      "post": {
        "tags": [
          "Open-Agent-API"
        ],
        "summary": "Report task result and get next tasks",
        "operationId": "reportAndGetTaskUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskRequest",
              "originalRef": "TaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«TaskResult»",
              "originalRef": "Response«TaskResult»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/agent/reportSnapshot": {
      "post": {
        "tags": [
          "Open-Agent-API"
        ],
        "summary": "Report source task snapshot",
        "operationId": "reportSnapshotUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskSnapshotRequest",
              "originalRef": "TaskSnapshotRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/audit/getConfig": {
      "post": {
        "tags": [
          "Open-Audit-API"
        ],
        "summary": "Get mq config list",
        "operationId": "getConfigUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuditConfigRequest",
              "originalRef": "AuditConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«AuditConfig»",
              "originalRef": "Response«AuditConfig»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/changeClusterTag": {
      "put": {
        "tags": [
          "Open-DataProxy-API"
        ],
        "summary": "Change cluster tag and topic for inlong group id",
        "operationId": "changeClusterTagUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clusterTag",
            "in": "query",
            "description": "clusterTag",
            "required": true,
            "type": "string"
          },
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "inlongGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "topic",
            "in": "query",
            "description": "topic",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«string»",
              "originalRef": "Response«string»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/bindTag": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Bind or unbind cluster tag",
        "operationId": "bindTagUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster bind and unbind tag request",
              "originalRef": "Cluster bind and unbind tag request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/delete/{id}": {
      "delete": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Delete cluster by id",
        "operationId": "deleteUsingDELETE_7",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/get/{id}": {
      "get": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Get cluster by id",
        "operationId": "getUsingGET_9",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong cluster info»",
              "originalRef": "Response«Inlong cluster info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/list": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "List clusters",
        "operationId": "listUsingPOST_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster paging query request",
              "originalRef": "Inlong cluster paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Inlong cluster info»»",
              "originalRef": "Response«List«Inlong cluster info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/listByTenantRole": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "List cluster by tenant condition",
        "operationId": "listByTenantRoleUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster paging query request",
              "originalRef": "Inlong cluster paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong cluster info»»",
              "originalRef": "Response«Paginated query results«Inlong cluster info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/node/delete/{id}": {
      "delete": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Delete cluster node",
        "operationId": "deleteNodeUsingDELETE_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster node ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/node/get/{id}": {
      "get": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Get cluster node by id",
        "operationId": "getNodeUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster node ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Cluster node response»",
              "originalRef": "Response«Cluster node response»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/node/list": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "List cluster nodes",
        "operationId": "listNodeUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster paging query request",
              "originalRef": "Inlong cluster paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Cluster node response»»",
              "originalRef": "Response«List«Cluster node response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/node/listByGroupId": {
      "get": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "List cluster nodes by groupId, clusterType and protocolType",
        "operationId": "listByGroupIdUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clusterType",
            "in": "query",
            "description": "clusterType",
            "required": true,
            "type": "string"
          },
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "inlongGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "protocolType",
            "in": "query",
            "description": "protocolType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Cluster node response»»",
              "originalRef": "Response«List«Cluster node response»»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/node/save": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Save cluster node",
        "operationId": "saveNodeUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster node request",
              "originalRef": "Cluster node request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/node/update": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Update cluster node",
        "operationId": "updateNodeUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster node request",
              "originalRef": "Cluster node request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/save": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Save cluster",
        "operationId": "saveUsingPOST_9",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster request",
              "originalRef": "Inlong cluster request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/tag/delete/{id}": {
      "delete": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Delete cluster tag by id",
        "operationId": "deleteTagUsingDELETE_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster tag ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/tag/get/{id}": {
      "get": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Get cluster tag by id",
        "operationId": "getTagUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Cluster tag response»",
              "originalRef": "Response«Cluster tag response»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/tag/list": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "List cluster tags",
        "operationId": "listTagUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster tag paging query request",
              "originalRef": "Cluster tag paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Cluster tag response»»",
              "originalRef": "Response«List«Cluster tag response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/tag/listTagByTenantRole": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "List cluster tags by tenant condition",
        "operationId": "listTagByTenantRoleUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster tag paging query request",
              "originalRef": "Cluster tag paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Cluster tag response»»",
              "originalRef": "Response«Paginated query results«Cluster tag response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/tag/save": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Save cluster tag",
        "operationId": "saveTagUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster tag request",
              "originalRef": "Cluster tag request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/tag/update": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Update cluster tag",
        "operationId": "updateTagUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster tag request",
              "originalRef": "Cluster tag request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/tenant/tag/delete/{id}": {
      "delete": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Delete tenant cluster tag by id",
        "operationId": "deleteTenantTagUsingDELETE_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster tag ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/tenant/tag/list": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "List tenant cluster tags",
        "operationId": "listTenantTagUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster tag paging query request",
              "originalRef": "Cluster tag paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Tenant cluster tag response»»",
              "originalRef": "Response«Paginated query results«Tenant cluster tag response»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/tenant/tag/save": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Save tenant cluster tag",
        "operationId": "saveTenantTagUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant Cluster tag request",
              "originalRef": "Tenant Cluster tag request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/cluster/update": {
      "post": {
        "tags": [
          "Open-Cluster-API"
        ],
        "summary": "Update cluster",
        "operationId": "updateUsingPOST_9",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong cluster request",
              "originalRef": "Inlong cluster request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/dataproxy/getAllConfig": {
      "post": {
        "tags": [
          "Open-DataProxy-API"
        ],
        "summary": "Get all proxy config. This method was deprecated since version 1.8.0. Please use new method /dataproxy/getMetaConfig",
        "operationId": "getAllConfigUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataProxyConfigRequest",
              "originalRef": "DataProxyConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/inlong/manager/openapi/dataproxy/getConfig": {
      "post": {
        "tags": [
          "Open-DataProxy-API"
        ],
        "summary": "Get data proxy topic list",
        "operationId": "getConfigUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataProxyConfigRequest",
              "originalRef": "DataProxyConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«DataProxyConfig»",
              "originalRef": "Response«DataProxyConfig»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/dataproxy/getIpList/{inlongGroupId}": {
      "post": {
        "tags": [
          "Open-DataProxy-API"
        ],
        "summary": "Get data proxy IP list by InlongGroupId",
        "operationId": "getIpListUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "inlongGroupId",
            "in": "path",
            "description": "inlongGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "protocolType",
            "in": "query",
            "description": "protocolType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«DataProxyNodeResponse»",
              "originalRef": "Response«DataProxyNodeResponse»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/dataproxy/getMetaConfig": {
      "post": {
        "tags": [
          "Open-DataProxy-API"
        ],
        "summary": "Get all DataProxy meta config",
        "operationId": "getMetaConfigUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataProxyConfigRequest",
              "originalRef": "DataProxyConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/dbCollector/getTask": {
      "post": {
        "tags": [
          "Open-DBCollector-API"
        ],
        "summary": "fetch db collector task",
        "operationId": "getTaskUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": {
              "$ref": "#/definitions/db collector request",
              "originalRef": "db collector request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«db collector task info»",
              "originalRef": "Response«db collector task info»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/inlong/manager/openapi/dbCollector/reportTask": {
      "post": {
        "tags": [
          "Open-DBCollector-API"
        ],
        "summary": "report task state",
        "operationId": "reportTaskUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "req",
            "description": "req",
            "required": true,
            "schema": {
              "$ref": "#/definitions/db collector report task request",
              "originalRef": "db collector report task request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/inlong/manager/openapi/group/delete/{groupId}": {
      "delete": {
        "tags": [
          "Open-InLongGroup-API"
        ],
        "summary": "Delete inlong group info",
        "operationId": "deleteUsingDELETE_8",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Inlong group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/group/get/{groupId}": {
      "get": {
        "tags": [
          "Open-InLongGroup-API"
        ],
        "summary": "Get InLong group information by groupId",
        "operationId": "getUsingGET_10",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "InLong Group ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong group info»",
              "originalRef": "Response«Inlong group info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/group/list": {
      "post": {
        "tags": [
          "Open-InLongGroup-API"
        ],
        "summary": "List inlong groups by paginating",
        "operationId": "listBriefUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong group query request",
              "originalRef": "Inlong group query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Inlong group brief info»»",
              "originalRef": "Response«List«Inlong group brief info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/group/save": {
      "post": {
        "tags": [
          "Open-InLongGroup-API"
        ],
        "summary": "Save inlong group",
        "operationId": "saveUsingPOST_10",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "groupRequest",
            "description": "groupRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong group create request",
              "originalRef": "Inlong group create request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«string»",
              "originalRef": "Response«string»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/group/update": {
      "post": {
        "tags": [
          "Open-InLongGroup-API"
        ],
        "summary": "Update inlong group",
        "operationId": "updateUsingPOST_10",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "groupRequest",
            "description": "groupRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong group create request",
              "originalRef": "Inlong group create request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«string»",
              "originalRef": "Response«string»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/heartbeat/report": {
      "post": {
        "tags": [
          "Open-Heartbeat-API"
        ],
        "summary": "heartbeat report",
        "operationId": "reportHeartbeatUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "info",
            "description": "info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request of heartbeat report",
              "originalRef": "Request of heartbeat report"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/node/delete/{id}": {
      "delete": {
        "tags": [
          "Open-DataNode-API"
        ],
        "summary": "Delete data node by id",
        "operationId": "deleteUsingDELETE_6",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Data node ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/node/get/{id}": {
      "get": {
        "tags": [
          "Open-DataNode-API"
        ],
        "summary": "Get node by id",
        "operationId": "getUsingGET_8",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Data node ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Data node info»",
              "originalRef": "Response«Data node info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/node/list": {
      "post": {
        "tags": [
          "Open-DataNode-API"
        ],
        "summary": "List data node",
        "operationId": "listUsingPOST_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Data node paging query request",
              "originalRef": "Data node paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Data node info»»",
              "originalRef": "Response«List«Data node info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/node/save": {
      "post": {
        "tags": [
          "Open-DataNode-API"
        ],
        "summary": "Save node",
        "operationId": "saveUsingPOST_8",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Data node request",
              "originalRef": "Data node request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/node/update": {
      "post": {
        "tags": [
          "Open-DataNode-API"
        ],
        "summary": "Update data node",
        "operationId": "updateUsingPOST_8",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Data node request",
              "originalRef": "Data node request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/removeBackupClusterTag": {
      "put": {
        "tags": [
          "Open-DataProxy-API"
        ],
        "summary": "Remove backup cluster tag and topic for inlong group id",
        "operationId": "removeBackupClusterTagUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "inlongGroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«string»",
              "originalRef": "Response«string»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/role/tenant/delete/{id}": {
      "delete": {
        "tags": [
          "Open-InlongTenantRole-API"
        ],
        "summary": "Delete tenant role by ID",
        "operationId": "deleteUsingDELETE_10",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/role/tenant/get/{id}": {
      "get": {
        "tags": [
          "Open-InlongTenantRole-API"
        ],
        "summary": "Get tenant role by ID",
        "operationId": "getUsingGET_13",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong tenant user role info»",
              "originalRef": "Response«Inlong tenant user role info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/role/tenant/list": {
      "post": {
        "tags": [
          "Open-InlongTenantRole-API"
        ],
        "summary": "List tenant roles by paginating",
        "operationId": "listByConditionUsingPOST_7",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant user paging query request",
              "originalRef": "Tenant user paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong tenant user role info»»",
              "originalRef": "Response«Paginated query results«Inlong tenant user role info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/role/tenant/save": {
      "post": {
        "tags": [
          "Open-InlongTenantRole-API"
        ],
        "summary": "Save tenant role",
        "operationId": "saveUsingPOST_13",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant user role request",
              "originalRef": "Tenant user role request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/role/tenant/update": {
      "post": {
        "tags": [
          "Open-InlongTenantRole-API"
        ],
        "summary": "Update tenant role",
        "operationId": "updateUsingPOST_13",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant user role request",
              "originalRef": "Tenant user role request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/sink/delete/{id}": {
      "delete": {
        "tags": [
          "Open-StreamSink-API"
        ],
        "summary": "Delete stream sink",
        "operationId": "deleteUsingDELETE_11",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startProcess",
            "in": "query",
            "description": "startProcess",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/sink/get/{id}": {
      "get": {
        "tags": [
          "Open-StreamSink-API"
        ],
        "summary": "Get stream sink",
        "operationId": "getUsingGET_14",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Stream sink info»",
              "originalRef": "Response«Stream sink info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/sink/list": {
      "post": {
        "tags": [
          "Open-StreamSink-API"
        ],
        "summary": "List stream sinks by paginating",
        "operationId": "listByConditionUsingPOST_8",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Paging query request for Sink",
              "originalRef": "Paging query request for Sink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Stream sink info»»",
              "originalRef": "Response«List«Stream sink info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/sink/save": {
      "post": {
        "tags": [
          "Open-StreamSink-API"
        ],
        "summary": "Save stream sink",
        "operationId": "saveUsingPOST_14",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream sink request",
              "originalRef": "Stream sink request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/sink/update": {
      "post": {
        "tags": [
          "Open-StreamSink-API"
        ],
        "summary": "Update stream sink",
        "operationId": "updateUsingPOST_14",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream sink request",
              "originalRef": "Stream sink request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/sort/getClusterConfig": {
      "get": {
        "tags": [
          "Open-Sort-API"
        ],
        "summary": "get sort cluster config",
        "operationId": "getSortClusterConfigUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clusterName",
            "in": "query",
            "description": "clusterName",
            "required": true,
            "type": "string"
          },
          {
            "name": "md5",
            "in": "query",
            "description": "md5",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SortClusterResponse",
              "originalRef": "SortClusterResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/sort/getSortSource": {
      "get": {
        "tags": [
          "Open-Sort-API"
        ],
        "summary": "get sort sdk config",
        "operationId": "getSortSourceConfigUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "clusterName",
            "in": "query",
            "description": "clusterName",
            "required": true,
            "type": "string"
          },
          {
            "name": "md5",
            "in": "query",
            "description": "md5",
            "required": true,
            "type": "string"
          },
          {
            "name": "sortTaskId",
            "in": "query",
            "description": "sortTaskId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SortSourceConfigResponse",
              "originalRef": "SortSourceConfigResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/source/delete/{id}": {
      "delete": {
        "tags": [
          "Open-StreamSource-API"
        ],
        "summary": "Delete stream source",
        "operationId": "deleteUsingDELETE_12",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/source/get/{id}": {
      "get": {
        "tags": [
          "Open-StreamSource-API"
        ],
        "summary": "Get stream source",
        "operationId": "getUsingGET_15",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Stream source info»",
              "originalRef": "Response«Stream source info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/source/list": {
      "post": {
        "tags": [
          "Open-StreamSource-API"
        ],
        "summary": "List stream sources by paginating",
        "operationId": "listByConditionUsingPOST_9",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Paging query request for Source",
              "originalRef": "Paging query request for Source"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Stream source info»»",
              "originalRef": "Response«Paginated query results«Stream source info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/source/restart/{id}": {
      "post": {
        "tags": [
          "Open-StreamSource-API"
        ],
        "summary": "Restart stream source",
        "operationId": "restartUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/source/save": {
      "post": {
        "tags": [
          "Open-StreamSource-API"
        ],
        "summary": "Save stream source",
        "operationId": "saveUsingPOST_15",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream source request",
              "originalRef": "Stream source request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/source/stop/{id}": {
      "post": {
        "tags": [
          "Open-StreamSource-API"
        ],
        "summary": "Stop stream source",
        "operationId": "stopUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/source/update": {
      "post": {
        "tags": [
          "Open-StreamSource-API"
        ],
        "summary": "Update stream source",
        "operationId": "updateUsingPOST_15",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream source request",
              "originalRef": "Stream source request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/stream/addFields": {
      "post": {
        "tags": [
          "Open-InLongStream-API"
        ],
        "summary": "Add inlong stream fields",
        "operationId": "addFieldsUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "addFieldsRequest",
            "description": "addFieldsRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Add field request - with stream",
              "originalRef": "Add field request - with stream"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/stream/delete": {
      "delete": {
        "tags": [
          "Open-InLongStream-API"
        ],
        "summary": "Delete inlong stream",
        "operationId": "deleteUsingDELETE_9",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "query",
            "description": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/stream/get": {
      "get": {
        "tags": [
          "Open-InLongStream-API"
        ],
        "summary": "Get inlong stream",
        "operationId": "getUsingGET_11",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "query",
            "description": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong stream info»",
              "originalRef": "Response«Inlong stream info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/stream/getBrief": {
      "get": {
        "tags": [
          "Open-InLongStream-API"
        ],
        "summary": "Get inlong stream brief",
        "operationId": "getBriefUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "query",
            "description": "streamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong stream brief info»",
              "originalRef": "Response«Inlong stream brief info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/stream/list": {
      "post": {
        "tags": [
          "Open-InLongStream-API"
        ],
        "summary": "List inlong stream briefs by paginating",
        "operationId": "listByConditionUsingPOST_5",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong stream paging query request",
              "originalRef": "Inlong stream paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Inlong stream brief info»»",
              "originalRef": "Response«List«Inlong stream brief info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/stream/save": {
      "post": {
        "tags": [
          "Open-InLongStream-API"
        ],
        "summary": "Save inlong stream",
        "operationId": "saveUsingPOST_11",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong stream request",
              "originalRef": "Inlong stream request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/stream/startProcess/{groupId}/{streamId}": {
      "post": {
        "tags": [
          "Open-InLongStream-API"
        ],
        "summary": "Start inlong stream process",
        "operationId": "startProcessUsingPOST_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "description": "streamId",
            "required": true,
            "type": "string"
          },
          {
            "name": "sync",
            "in": "query",
            "description": "sync",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/stream/update": {
      "post": {
        "tags": [
          "Open-InLongStream-API"
        ],
        "summary": "Update inlong stream",
        "operationId": "updateUsingPOST_11",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Inlong stream request",
              "originalRef": "Inlong stream request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/tenant/delete/{name}": {
      "get": {
        "tags": [
          "Open-InlongTenant-API"
        ],
        "summary": "Delete inlong tenant by name",
        "operationId": "deleteUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/tenant/get/{name}": {
      "get": {
        "tags": [
          "Open-InlongTenant-API"
        ],
        "summary": "Get inlong tenant by name",
        "operationId": "getUsingGET_12",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Inlong tenant info»",
              "originalRef": "Response«Inlong tenant info»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/tenant/list": {
      "post": {
        "tags": [
          "Open-InlongTenant-API"
        ],
        "summary": "List tenant by paginating",
        "operationId": "listByConditionUsingPOST_6",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant paging query request",
              "originalRef": "Tenant paging query request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«Paginated query results«Inlong tenant info»»",
              "originalRef": "Response«Paginated query results«Inlong tenant info»»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/tenant/save": {
      "post": {
        "tags": [
          "Open-InlongTenant-API"
        ],
        "summary": "Save inlong tenant",
        "operationId": "saveUsingPOST_12",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant request",
              "originalRef": "Tenant request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/tenant/update": {
      "post": {
        "tags": [
          "Open-InlongTenant-API"
        ],
        "summary": "Update inlong tenant",
        "operationId": "updateUsingPOST_12",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tenant request",
              "originalRef": "Tenant request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/transform/delete": {
      "delete": {
        "tags": [
          "Open-StreamTransform-API"
        ],
        "summary": "Delete stream transform",
        "operationId": "deleteUsingDELETE_13",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "Inlong group id",
            "required": true,
            "type": "string",
            "pattern": "^[a-z0-9_.-]{4,100}$"
          },
          {
            "name": "inlongStreamId",
            "in": "query",
            "description": "Inlong stream id",
            "required": true,
            "type": "string",
            "pattern": "^[a-z0-9_.-]{1,100}$"
          },
          {
            "name": "transformName",
            "in": "query",
            "description": "Transform name, unique in one stream",
            "required": true,
            "type": "string",
            "pattern": "^[a-z0-9_-]{1,100}$"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inlong/manager/openapi/transform/list": {
      "get": {
        "tags": [
          "Open-StreamTransform-API"
        ],
        "summary": "Get stream transform list",
        "operationId": "listUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "inlongGroupId",
            "in": "query",
            "description": "inlongGroupId",
            "required": true,
            "type": "string"
          },
          {
            "name": "inlongStreamId",
            "in": "query",
            "description": "inlongStreamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«List«Response of the stream transform»»",
              "originalRef": "Response«List«Response of the stream transform»»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/transform/save": {
      "post": {
        "tags": [
          "Open-StreamTransform-API"
        ],
        "summary": "Save stream transform",
        "operationId": "saveUsingPOST_16",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream transform request",
              "originalRef": "Stream transform request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«int»",
              "originalRef": "Response«int»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inlong/manager/openapi/transform/update": {
      "post": {
        "tags": [
          "Open-StreamTransform-API"
        ],
        "summary": "Update stream transform",
        "operationId": "updateUsingPOST_16",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Stream transform request",
              "originalRef": "Stream transform request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response«boolean»",
              "originalRef": "Response«boolean»"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "Add field request - with stream": {
      "type": "object",
      "properties": {
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "sinkFieldList": {
          "type": "array",
          "description": "Sink field list",
          "items": {
            "$ref": "#/definitions/Sink field info",
            "originalRef": "Sink field info"
          }
        }
      },
      "title": "Add field request - with stream"
    },
    "ApplyConsumeProcessForm": {
      "title": "ApplyConsumeProcessForm",
      "allOf": [
        {
          "$ref": "#/definitions/BaseProcessForm",
          "originalRef": "BaseProcessForm"
        },
        {
          "type": "object",
          "properties": {
            "consumeInfo": {
              "description": "Inlong consume info",
              "$ref": "#/definitions/Base inlong consume info",
              "originalRef": "Base inlong consume info"
            }
          },
          "title": "ApplyConsumeProcessForm"
        }
      ]
    },
    "ApplyGroupProcessForm": {
      "title": "ApplyGroupProcessForm",
      "allOf": [
        {
          "$ref": "#/definitions/BaseProcessForm",
          "originalRef": "BaseProcessForm"
        },
        {
          "type": "object",
          "required": [
            "groupInfo"
          ],
          "properties": {
            "groupInfo": {
              "description": "Inlong group info",
              "$ref": "#/definitions/Inlong group info",
              "originalRef": "Inlong group info"
            },
            "streamInfoList": {
              "type": "array",
              "description": "All inlong stream info under the inlong group, including the sink info",
              "items": {
                "$ref": "#/definitions/Inlong stream brief info",
                "originalRef": "Inlong stream brief info"
              }
            }
          },
          "title": "ApplyGroupProcessForm"
        }
      ]
    },
    "Audit query request": {
      "type": "object",
      "required": [
        "auditIds",
        "endDate",
        "inlongGroupId",
        "inlongStreamId",
        "startDate",
        "timeStaticsDim"
      ],
      "properties": {
        "auditIds": {
          "type": "array",
          "description": "audit id list",
          "items": {
            "type": "string"
          }
        },
        "endDate": {
          "type": "string",
          "example": "2022-01-01",
          "description": "query end date, format by 'yyyy-MM-dd'"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "inlong stream id"
        },
        "sinkId": {
          "type": "integer",
          "format": "int32",
          "description": "sink id"
        },
        "startDate": {
          "type": "string",
          "example": "2022-01-01",
          "description": "query start date, format by 'yyyy-MM-dd'"
        },
        "timeStaticsDim": {
          "type": "string",
          "example": "MINUTE",
          "description": "time statics dim, default MINUTE",
          "enum": [
            "DAY",
            "HOUR",
            "MINUTE",
            "MONTH",
            "WEEK",
            "YEAR"
          ]
        }
      },
      "title": "Audit query request"
    },
    "Audit source request": {
      "type": "object",
      "required": [
        "type",
        "url"
      ],
      "properties": {
        "enableAuth": {
          "type": "integer",
          "format": "int32",
          "description": "Enable auth or not, 0: disable, 1: enable"
        },
        "name": {
          "type": "string",
          "description": "Audit source name"
        },
        "offlineUrl": {
          "type": "string",
          "description": "Offline the url if not null"
        },
        "token": {
          "type": "string",
          "description": "Audit source token, needed if enableAuth is 1"
        },
        "type": {
          "type": "string",
          "description": "Audit source type, including: MYSQL, CLICKHOUSE, ELASTICSEARCH"
        },
        "url": {
          "type": "string",
          "description": "Audit source URL, for MYSQL or CLICKHOUSE, is jdbcUrl, and for ELASTICSEARCH is the access URL with hostname:port"
        },
        "username": {
          "type": "string",
          "description": "Audit source username, needed if enableAuth is 1"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Audit source request"
    },
    "Audit source response": {
      "type": "object",
      "required": [
        "type",
        "url"
      ],
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Creator"
        },
        "enableAuth": {
          "type": "integer",
          "format": "int32",
          "description": "Enable auth or not, 0: disable, 1: enable"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "modifier": {
          "type": "string",
          "description": "Modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "description": "Audit source name"
        },
        "offlineUrl": {
          "type": "string",
          "description": "Offline the url if not null"
        },
        "token": {
          "type": "string",
          "description": "Audit source token, needed if enableAuth is 1"
        },
        "type": {
          "type": "string",
          "description": "Audit source type, including: MYSQL, CLICKHOUSE, ELASTICSEARCH"
        },
        "url": {
          "type": "string",
          "description": "Audit source URL, for MYSQL or CLICKHOUSE, is jdbcUrl, and for ELASTICSEARCH is the access URL with hostname:port"
        },
        "username": {
          "type": "string",
          "description": "Audit source username, needed if enableAuth is 1"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Audit source response"
    },
    "AuditConfig": {
      "type": "object",
      "properties": {
        "mqInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MQInfo",
            "originalRef": "MQInfo"
          }
        }
      },
      "title": "AuditConfig"
    },
    "AuditConfigRequest": {
      "type": "object",
      "properties": {
        "clusterTag": {
          "type": "string"
        }
      },
      "title": "AuditConfigRequest"
    },
    "AuditInfo": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Audit count"
        },
        "delay": {
          "type": "integer",
          "format": "int64",
          "description": "Audit delay"
        },
        "logTs": {
          "type": "string",
          "description": "Audit log timestamp"
        }
      },
      "title": "AuditInfo"
    },
    "AuditVO": {
      "type": "object",
      "properties": {
        "auditId": {
          "type": "string",
          "description": "Audit id"
        },
        "auditSet": {
          "type": "array",
          "description": "Audit set",
          "items": {
            "$ref": "#/definitions/AuditInfo",
            "originalRef": "AuditInfo"
          }
        },
        "nodeType": {
          "type": "string",
          "description": "Node type"
        }
      },
      "title": "AuditVO"
    },
    "Base heartbeat page request": {
      "type": "object",
      "properties": {
        "component": {
          "type": "string",
          "description": "Component name, such as: Agent, Sort..."
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "instance": {
          "type": "string",
          "description": "Component instance, can be ip, name..."
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        }
      },
      "title": "Base heartbeat page request"
    },
    "Base inlong consume info": {
      "type": "object",
      "properties": {
        "clusterInfos": {
          "type": "array",
          "description": "MQ cluster info list",
          "items": {
            "$ref": "#/definitions/Inlong cluster info",
            "originalRef": "Inlong cluster info"
          }
        },
        "clusterUrl": {
          "type": "string",
          "description": "Cluster URL of message queue"
        },
        "consumerGroup": {
          "type": "string",
          "description": "Consumer group, only support [a-zA-Z0-9_]"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of creator"
        },
        "filterEnabled": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to filter consumption, 0-not filter, 1-filter"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of responsible person, separated by commas"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "The target inlong group id of this consume"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "The target inlong stream id of this consume, needed if the filterEnabled=1"
        },
        "modifier": {
          "type": "string",
          "description": "Name of modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "mqType": {
          "type": "string",
          "description": "MQ type, high throughput: TUBEMQ, high consistency: PULSAR"
        },
        "previousStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Previous status"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Consume status"
        },
        "topic": {
          "type": "string",
          "description": "The target topic of this consume"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Base inlong consume info"
    },
    "Base inlong consume request": {
      "type": "object",
      "properties": {
        "consumerGroup": {
          "type": "string",
          "description": "Consumer group, only support [a-zA-Z0-9_]"
        },
        "filterEnabled": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to filter consumption, 0-not filter, 1-filter"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of responsible person, separated by commas"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "The target inlong group id of this consume"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "The target inlong stream id of this consume, needed if the filterEnabled=1"
        },
        "mqType": {
          "type": "string",
          "description": "MQ type, high throughput: TUBEMQ, high consistency: PULSAR"
        },
        "topic": {
          "type": "string",
          "description": "The target topic of this consume"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Base inlong consume request"
    },
    "BaseProcessForm": {
      "type": "object",
      "discriminator": "formName",
      "title": "BaseProcessForm"
    },
    "BaseTaskForm": {
      "type": "object",
      "discriminator": "formName",
      "title": "BaseTaskForm"
    },
    "Brief Message info for MQ": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "Message body"
        },
        "clientIp": {
          "type": "string",
          "description": "Client ip"
        },
        "dt": {
          "type": "integer",
          "format": "int64",
          "description": "Message date"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Message index id"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        }
      },
      "title": "Brief Message info for MQ"
    },
    "CacheZone": {
      "type": "object",
      "properties": {
        "authentication": {
          "type": "string"
        },
        "cacheZoneProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "serviceUrl": {
          "type": "string"
        },
        "topics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Topic",
            "originalRef": "Topic"
          }
        },
        "zoneName": {
          "type": "string"
        },
        "zoneType": {
          "type": "string"
        }
      },
      "title": "CacheZone"
    },
    "CacheZoneConfig": {
      "type": "object",
      "properties": {
        "cacheZones": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CacheZone",
            "originalRef": "CacheZone"
          }
        },
        "sortClusterName": {
          "type": "string"
        },
        "sortTaskId": {
          "type": "string"
        }
      },
      "title": "CacheZoneConfig"
    },
    "Cluster bind and unbind tag request": {
      "type": "object",
      "properties": {
        "bindClusters": {
          "type": "array",
          "description": "Cluster-ID list which needs to bind tag",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "clusterTag": {
          "type": "string",
          "description": "Cluster tag",
          "pattern": "^[a-z0-9_.-]{1,128}$"
        },
        "unbindClusters": {
          "type": "array",
          "description": "Cluster-ID list which needs to unbind tag",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "title": "Cluster bind and unbind tag request"
    },
    "Cluster node bind and unbind stream source label request, stream source label is a filter to judge whether to accept the stream source task": {
      "type": "object",
      "properties": {
        "agentGroup": {
          "type": "string",
          "description": "Cluster agent group"
        },
        "bindClusterNodes": {
          "type": "array",
          "description": "Cluster node ip list which needs to bind tag",
          "items": {
            "type": "string"
          }
        },
        "clusterName": {
          "type": "string",
          "description": "Cluster name"
        },
        "unbindClusterNodes": {
          "type": "array",
          "description": "Cluster node ip list which needs to unbind tag",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Cluster node bind and unbind stream source label request, stream source label is a filter to judge whether to accept the stream source task"
    },
    "Cluster node request": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the cluster node"
        },
        "extParams": {
          "type": "string",
          "description": "Extended params"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "ip": {
          "type": "string",
          "description": "Cluster IP"
        },
        "nodeLoad": {
          "type": "integer",
          "format": "int32",
          "description": "Current load value of the node"
        },
        "parentId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the parent cluster"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Cluster port"
        },
        "protocolType": {
          "type": "string",
          "description": "Cluster protocol type"
        },
        "type": {
          "type": "string",
          "description": "Cluster type, including AGENT, DATAPROXY, etc."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Cluster node request"
    },
    "Cluster node response": {
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of in creator"
        },
        "description": {
          "type": "string",
          "description": "Description of the cluster node"
        },
        "extParams": {
          "type": "string",
          "description": "Extended params"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "ip": {
          "type": "string",
          "description": "Cluster IP"
        },
        "modifier": {
          "type": "string",
          "description": "Name of in modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "nodeLoad": {
          "type": "integer",
          "format": "int32",
          "description": "Load value of the node"
        },
        "nodeTags": {
          "type": "string",
          "description": "Cluster node tag, separated by commas"
        },
        "parentId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the parent cluster"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Cluster port"
        },
        "protocolType": {
          "type": "string",
          "description": "Cluster protocol type"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Cluster status"
        },
        "type": {
          "type": "string",
          "description": "Cluster type, including AGENT, DATAPROXY, etc."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Cluster node response"
    },
    "Cluster tag paging query request": {
      "type": "object",
      "properties": {
        "clusterTags": {
          "type": "array",
          "description": "Keywords, used for fuzzy query",
          "items": {
            "type": "string"
          }
        },
        "keyword": {
          "type": "string",
          "description": "Keywords, used for fuzzy query"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        }
      },
      "title": "Cluster tag paging query request"
    },
    "Cluster tag request": {
      "type": "object",
      "properties": {
        "clusterTag": {
          "type": "string",
          "description": "Cluster tag",
          "pattern": "^[a-z0-9_.-]{1,128}$"
        },
        "description": {
          "type": "string",
          "description": "Description of the cluster tag"
        },
        "extParams": {
          "type": "string",
          "description": "Extended params"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of in charges, separated by commas"
        },
        "tenantList": {
          "type": "array",
          "description": "Bind tenants",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Cluster tag request"
    },
    "Cluster tag response": {
      "type": "object",
      "properties": {
        "clusterTag": {
          "type": "string",
          "description": "Cluster tag"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of in creator"
        },
        "description": {
          "type": "string",
          "description": "Description of the cluster tag"
        },
        "extParams": {
          "type": "string",
          "description": "Extended params"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of in charges, separated by commas"
        },
        "modifier": {
          "type": "string",
          "description": "Name of in modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Cluster status"
        },
        "tenantList": {
          "type": "array",
          "description": "tenant list",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Cluster tag response"
    },
    "CmdConfig": {
      "type": "object",
      "properties": {
        "dataTime": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "op": {
          "type": "integer",
          "format": "int32"
        },
        "taskId": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "CmdConfig"
    },
    "CommandEntity": {
      "type": "object",
      "properties": {
        "acked": {
          "type": "boolean"
        },
        "commandResult": {
          "type": "integer",
          "format": "int32"
        },
        "deliveryTime": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "taskId": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "CommandEntity"
    },
    "Component heartbeat response": {
      "type": "object",
      "properties": {
        "component": {
          "type": "string",
          "description": "Component name, such as: Agent, Sort..."
        },
        "instance": {
          "type": "string",
          "description": "Component instance, can be ip, name..."
        },
        "metricHeartbeat": {
          "type": "string",
          "description": "Stream metric heartbeat"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "reportTime": {
          "type": "integer",
          "format": "int64",
          "description": "Report time of heartbeat"
        },
        "statusHeartbeat": {
          "type": "string",
          "description": "Stream status heartbeat"
        }
      },
      "title": "Component heartbeat response"
    },
    "ConsumeApproveForm": {
      "title": "ConsumeApproveForm",
      "allOf": [
        {
          "$ref": "#/definitions/BaseTaskForm",
          "originalRef": "BaseTaskForm"
        },
        {
          "type": "object",
          "properties": {
            "consumerGroup": {
              "type": "string",
              "description": "Consumer group"
            }
          },
          "title": "ConsumeApproveForm"
        }
      ]
    },
    "Count info of inlong consume status": {
      "type": "object",
      "properties": {
        "rejectCount": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of rejections"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32",
          "description": "Total consume number"
        },
        "waitApproveCount": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of to be approved"
        },
        "waitAssignCount": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of to be allocated (the number of configuring consumes)"
        }
      },
      "title": "Count info of inlong consume status"
    },
    "Data node info": {
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of in creator"
        },
        "description": {
          "type": "string",
          "description": "Description of the data node"
        },
        "displayName": {
          "type": "string",
          "description": "Data node display name, just for display"
        },
        "extParams": {
          "type": "string",
          "description": "Extended params"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of in charges, separated by commas"
        },
        "modifier": {
          "type": "string",
          "description": "Name of in modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "description": "Data node name"
        },
        "tenant": {
          "type": "string",
          "description": "Inlong tenant to which the data node belongs"
        },
        "token": {
          "type": "string",
          "description": "Data node token if needed"
        },
        "type": {
          "type": "string",
          "description": "Data node type, including MYSQL, HIVE, KAFKA, ES, etc."
        },
        "url": {
          "type": "string",
          "description": "Data node URL"
        },
        "username": {
          "type": "string",
          "description": "Data node username"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Data node info"
    },
    "Data node paging query request": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Data node display name, just for display"
        },
        "keyword": {
          "type": "string",
          "description": "Keywords, name, url, etc."
        },
        "name": {
          "type": "string",
          "description": "Data node name",
          "pattern": "^[A-Za-z0-9_-]{1,128}$"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "type": {
          "type": "string",
          "description": "Data node type, including MYSQL, HIVE, KAFKA, ES, etc."
        }
      },
      "title": "Data node paging query request"
    },
    "Data node request": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the data node"
        },
        "displayName": {
          "type": "string",
          "description": "Data node display name, just for display"
        },
        "extParams": {
          "type": "string",
          "description": "Extended params"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of responsible person, separated by commas"
        },
        "name": {
          "type": "string",
          "description": "Data node name",
          "pattern": "^[A-Za-z0-9_-]{1,128}$"
        },
        "token": {
          "type": "string",
          "description": "Data node token if needed"
        },
        "type": {
          "type": "string",
          "description": "Data node type, including MYSQL, HIVE, KAFKA, ES, etc."
        },
        "url": {
          "type": "string",
          "description": "Data node URL",
          "pattern": "^((?!\\s).)*$"
        },
        "username": {
          "type": "string",
          "description": "Data node username"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Data node request"
    },
    "DataConfig": {
      "type": "object",
      "properties": {
        "dataReportType": {
          "type": "integer",
          "format": "int32"
        },
        "deliveryTime": {
          "type": "string"
        },
        "extParams": {
          "type": "string"
        },
        "inlongGroupId": {
          "type": "string"
        },
        "inlongStreamId": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "mqClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MQClusterInfo",
            "originalRef": "MQClusterInfo"
          }
        },
        "op": {
          "type": "string"
        },
        "snapshot": {
          "type": "string"
        },
        "syncPartitionKey": {
          "type": "string"
        },
        "syncSend": {
          "type": "integer",
          "format": "int32"
        },
        "taskId": {
          "type": "integer",
          "format": "int32"
        },
        "taskName": {
          "type": "string"
        },
        "taskType": {
          "type": "integer",
          "format": "int32"
        },
        "topicInfo": {
          "$ref": "#/definitions/DataProxyTopicInfo",
          "originalRef": "DataProxyTopicInfo"
        },
        "uuid": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "DataConfig"
    },
    "DataProxyConfig": {
      "type": "object",
      "properties": {
        "mqClusterList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MQClusterInfo",
            "originalRef": "MQClusterInfo"
          }
        },
        "topicList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataProxyTopicInfo",
            "originalRef": "DataProxyTopicInfo"
          }
        }
      },
      "title": "DataProxyConfig"
    },
    "DataProxyConfigRequest": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "clusterTag": {
          "type": "string"
        },
        "md5": {
          "type": "string"
        }
      },
      "title": "DataProxyConfigRequest"
    },
    "DataProxyNodeInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "ip": {
          "type": "string"
        },
        "nodeLoad": {
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "protocolType": {
          "type": "string"
        }
      },
      "title": "DataProxyNodeInfo"
    },
    "DataProxyNodeResponse": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "integer",
          "format": "int32"
        },
        "isIntranet": {
          "type": "integer",
          "format": "int32"
        },
        "isSwitch": {
          "type": "integer",
          "format": "int32"
        },
        "load": {
          "type": "integer",
          "format": "int32"
        },
        "nodeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataProxyNodeInfo",
            "originalRef": "DataProxyNodeInfo"
          }
        }
      },
      "title": "DataProxyNodeResponse"
    },
    "DataProxyTopicInfo": {
      "type": "object",
      "properties": {
        "inlongGroupId": {
          "type": "string"
        },
        "m": {
          "type": "string"
        },
        "topic": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "title": "DataProxyTopicInfo"
    },
    "GroupHeartbeat": {
      "type": "object",
      "properties": {
        "inlongGroupId": {
          "type": "string"
        },
        "metric": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "title": "GroupHeartbeat"
    },
    "GroupResourceProcessForm": {
      "title": "GroupResourceProcessForm",
      "allOf": [
        {
          "$ref": "#/definitions/BaseProcessForm",
          "originalRef": "BaseProcessForm"
        },
        {
          "type": "object",
          "properties": {
            "groupInfo": {
              "$ref": "#/definitions/Inlong group info",
              "originalRef": "Inlong group info"
            },
            "groupOperateType": {
              "type": "string",
              "enum": [
                "DELETE",
                "INIT",
                "RESTART",
                "SUSPEND"
              ]
            },
            "streamInfos": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Inlong stream info",
                "originalRef": "Inlong stream info"
              }
            }
          },
          "title": "GroupResourceProcessForm"
        }
      ]
    },
    "Heartbeat query request": {
      "type": "object",
      "properties": {
        "component": {
          "type": "string",
          "description": "Component name, such as: Agent, Sort..."
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "instance": {
          "type": "string",
          "description": "Component instance, can be ip, name..."
        }
      },
      "title": "Heartbeat query request"
    },
    "Inlong cluster info": {
      "type": "object",
      "properties": {
        "clusterTags": {
          "type": "string",
          "description": "Cluster tags, separated by commas"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of in creator"
        },
        "description": {
          "type": "string",
          "description": "Description of the cluster"
        },
        "displayName": {
          "type": "string",
          "description": "Cluster display name, just for display"
        },
        "extParams": {
          "type": "string",
          "description": "Extended params"
        },
        "extTag": {
          "type": "string",
          "description": "Extension tag"
        },
        "heartbeat": {
          "type": "string",
          "description": "Cluster heartbeat info"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of in charges, separated by commas"
        },
        "modifier": {
          "type": "string",
          "description": "Name of in modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "description": "Cluster name"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Cluster status"
        },
        "token": {
          "type": "string",
          "description": "Cluster token"
        },
        "type": {
          "type": "string",
          "description": "Cluster type, including TUBEMQ, PULSAR, KAFKA, DATAPROXY, etc."
        },
        "url": {
          "type": "string",
          "description": "Cluster url"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Inlong cluster info"
    },
    "Inlong cluster paging query request": {
      "type": "object",
      "properties": {
        "clusterTag": {
          "type": "string",
          "description": "Cluster tag"
        },
        "clusterTagList": {
          "type": "array",
          "description": "The inlong cluster tag list",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string",
          "description": "Cluster display name, just for display"
        },
        "extTag": {
          "type": "string",
          "description": "Extend tag"
        },
        "keyword": {
          "type": "string",
          "description": "Keywords, name, url, cluster tag, etc."
        },
        "name": {
          "type": "string",
          "description": "Cluster name"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "parentId": {
          "type": "integer",
          "format": "int32",
          "description": "Parent cluster ID, used for cluster node"
        },
        "protocolType": {
          "type": "string",
          "description": "Protocol type, such as: TCP, HTTP"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "type": {
          "type": "string",
          "description": "Cluster type, including TUBEMQ, PULSAR, DATAPROXY, etc."
        },
        "typeList": {
          "type": "array",
          "description": "Cluster type list",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Inlong cluster paging query request"
    },
    "Inlong cluster request": {
      "type": "object",
      "properties": {
        "clusterTags": {
          "type": "string",
          "description": "Cluster tags, separated by commas"
        },
        "description": {
          "type": "string",
          "description": "Description of the cluster"
        },
        "displayName": {
          "type": "string",
          "description": "Cluster display name, just for display"
        },
        "extParams": {
          "type": "string",
          "description": "Extended params"
        },
        "extTag": {
          "type": "string",
          "description": "Extension tag"
        },
        "heartbeat": {
          "type": "string",
          "description": "Cluster heartbeat info"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of responsible person, separated by commas"
        },
        "name": {
          "type": "string",
          "description": "Cluster name",
          "pattern": "^[A-Za-z0-9_-]{1,128}$"
        },
        "token": {
          "type": "string",
          "description": "Cluster token"
        },
        "type": {
          "type": "string",
          "description": "Cluster type, including TUBEMQ, PULSAR, KAFKA, DATAPROXY, etc."
        },
        "url": {
          "type": "string",
          "description": "Cluster url",
          "pattern": "^((?!\\s).)*$"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Inlong cluster request"
    },
    "Inlong consume brief info": {
      "type": "object",
      "properties": {
        "consumerGroup": {
          "type": "string",
          "description": "Consumer group, only support [a-zA-Z0-9_]"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of creator"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of responsible person, separated by commas"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "The target inlongGroupId of inlong consume"
        },
        "modifier": {
          "type": "string",
          "description": "Name of modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "mqType": {
          "type": "string",
          "description": "MQ type, high throughput: TUBEMQ, high consistency: PULSAR"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Consume status"
        },
        "topic": {
          "type": "string",
          "description": "The target topic of inlong consume"
        }
      },
      "title": "Inlong consume brief info"
    },
    "Inlong consume query request": {
      "type": "object",
      "properties": {
        "consumerGroup": {
          "type": "string",
          "description": "Consumer group name"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "The target inlongGroupId of inlong consume"
        },
        "keyword": {
          "type": "string",
          "description": "Keyword, can be consumer group"
        },
        "mqType": {
          "type": "string",
          "description": "MQ type, high throughput: TUBEMQ, high consistency: PULSAR"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Consume status"
        },
        "statusList": {
          "type": "array",
          "description": "Consume status list",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "topic": {
          "type": "string",
          "description": "The target topic of inlong consume"
        }
      },
      "title": "Inlong consume query request"
    },
    "Inlong group and topic info": {
      "type": "object",
      "required": [
        "inlongGroupId"
      ],
      "properties": {
        "clusterInfos": {
          "type": "array",
          "description": "MQ cluster info list",
          "items": {
            "$ref": "#/definitions/Inlong cluster info",
            "originalRef": "Inlong cluster info"
          }
        },
        "inlongClusterTag": {
          "type": "string",
          "description": "Inlong cluster tag of the current InlongGroup"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "mqType": {
          "type": "string",
          "description": "MQ type, high throughput: TUBEMQ, high consistency: PULSAR, or KAFKA"
        }
      },
      "title": "Inlong group and topic info"
    },
    "Inlong group approval request": {
      "type": "object",
      "required": [
        "inlongGroupId"
      ],
      "properties": {
        "ackQuorum": {
          "type": "integer",
          "format": "int32",
          "description": "Number of responses requested"
        },
        "dataReportType": {
          "type": "integer",
          "format": "int32",
          "description": "Data report type, default is 0.\n 0: report to DataProxy and respond when the DataProxy received data.\n 1: report to DataProxy and respond after DataProxy sends data.\n 2: report to MQ and respond when the MQ received data."
        },
        "ensemble": {
          "type": "integer",
          "format": "int32",
          "description": "Ledger's number of writable nodes"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inlongClusterTag": {
          "type": "string",
          "description": "Inlong cluster tag, inlong group will be associated with the cluster"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "maxMarkDeleteRate": {
          "type": "number",
          "format": "double",
          "description": "The limit rate of the mark-delete operation"
        },
        "mqResource": {
          "type": "string",
          "description": "MQ resource, for TubeMQ, it is Topic, for Pulsar, it is Namespace"
        },
        "mqType": {
          "type": "string",
          "description": "MQ Type"
        },
        "retentionSize": {
          "type": "integer",
          "format": "int32",
          "description": "Message size"
        },
        "retentionSizeUnit": {
          "type": "string",
          "description": "The unit of message size"
        },
        "retentionTime": {
          "type": "integer",
          "format": "int32",
          "description": "Message storage time"
        },
        "retentionTimeUnit": {
          "type": "string",
          "description": "The unit of the message storage time"
        },
        "topicPartitionNum": {
          "type": "integer",
          "format": "int32",
          "description": "The partition num of Pulsar topic, between 1-20"
        },
        "ttl": {
          "type": "integer",
          "format": "int32",
          "description": "Message time-to-live duration"
        },
        "ttlUnit": {
          "type": "string",
          "description": "The unit of message's time-to-live duration"
        },
        "writeQuorum": {
          "type": "integer",
          "format": "int32",
          "description": "Ledger's number of copies"
        }
      },
      "title": "Inlong group approval request"
    },
    "Inlong group brief info": {
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of creator"
        },
        "extParams": {
          "type": "string",
          "description": "Inlong cluster tag, which links to inlong_cluster table"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of responsible person, separated by commas"
        },
        "inlongClusterTag": {
          "type": "string",
          "description": "Inlong cluster tag, which links to inlong_cluster table"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "modifier": {
          "type": "string",
          "description": "Name of modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "mqResource": {
          "type": "string",
          "description": "MQ resource"
        },
        "mqType": {
          "type": "string",
          "description": "MQ type, high throughput: TUBEMQ, high consistency: PULSAR"
        },
        "name": {
          "type": "string",
          "description": "Inlong group name"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "streamSources": {
          "type": "array",
          "description": "Stream sources in the inlong group",
          "items": {
            "$ref": "#/definitions/Stream source info",
            "originalRef": "Stream source info"
          }
        }
      },
      "title": "Inlong group brief info"
    },
    "Inlong group create request": {
      "type": "object",
      "required": [
        "inlongGroupId",
        "name"
      ],
      "properties": {
        "dailyRecords": {
          "type": "integer",
          "format": "int32",
          "description": "Number of access items per day, unit: 10,000 items per day"
        },
        "dailyStorage": {
          "type": "integer",
          "format": "int32",
          "description": "Access size per day, unit: GB per day"
        },
        "dataReportType": {
          "type": "integer",
          "format": "int32",
          "description": "Data report type, default is 0.\n 0: report to DataProxy and respond when the DataProxy received data.\n 1: report to DataProxy and respond after DataProxy sends data.\n 2: report to MQ and respond when the MQ received data.",
          "minimum": 0,
          "maximum": 9223372036854775807,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "description": {
          "type": "string",
          "description": "Inlong group description"
        },
        "enableCreateResource": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to enable create resource? 0: disable, 1: enable",
          "minimum": 0,
          "maximum": 9223372036854775807,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "enableZookeeper": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to enable zookeeper? 0: disable, 1: enable",
          "minimum": 0,
          "maximum": 9223372036854775807,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "extList": {
          "type": "array",
          "description": "Inlong group Extension properties",
          "items": {
            "$ref": "#/definitions/Inlong group extension information",
            "originalRef": "Inlong group extension information"
          }
        },
        "followers": {
          "type": "string",
          "description": "Name of followers, separated by commas"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of responsible person, separated by commas"
        },
        "inlongClusterTag": {
          "type": "string",
          "description": "Inlong cluster tag, which links to inlong_cluster table"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id",
          "pattern": "^[a-zA-Z0-9_.-]{4,200}$"
        },
        "inlongGroupMode": {
          "type": "integer",
          "format": "int32",
          "description": "Standard mode(include Data Ingestion and Synchronization): 0, DataSync mode(only Data Synchronization): 1",
          "minimum": 0,
          "maximum": 9223372036854775807,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum length of a single piece of data, unit: Byte"
        },
        "middlewareType": {
          "type": "string",
          "description": "MQ type, replaced by mqType"
        },
        "mqResource": {
          "type": "string",
          "description": "MQ resource",
          "pattern": "^[a-z0-9_-]{1,128}$"
        },
        "mqType": {
          "type": "string",
          "description": "MQ type, high throughput: TUBEMQ, high consistency: PULSAR"
        },
        "name": {
          "type": "string",
          "description": "Inlong group name"
        },
        "peakRecords": {
          "type": "integer",
          "format": "int32",
          "description": "peak access per second, unit: bars per second"
        },
        "tubeMaster": {
          "type": "string",
          "description": "TubeMQ master URL"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Inlong group create request"
    },
    "Inlong group extension information": {
      "type": "object",
      "required": [
        "inlongGroupId"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "inlong group id",
          "pattern": "^[a-z0-9_-]{4,100}$"
        },
        "keyName": {
          "type": "string",
          "description": "property name"
        },
        "keyValue": {
          "type": "string",
          "description": "property value"
        }
      },
      "title": "Inlong group extension information"
    },
    "Inlong group heartbeat response": {
      "type": "object",
      "properties": {
        "component": {
          "type": "string",
          "description": "Component name, such as: Agent, Sort..."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "instance": {
          "type": "string",
          "description": "Component instance, can be ip, name..."
        },
        "metricHeartbeat": {
          "type": "string",
          "description": "Stream metric heartbeat"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "reportTime": {
          "type": "integer",
          "format": "int64",
          "description": "Report time of heartbeat"
        },
        "statusHeartbeat": {
          "type": "string",
          "description": "Stream status heartbeat"
        }
      },
      "title": "Inlong group heartbeat response"
    },
    "Inlong group info": {
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of creator"
        },
        "dailyRecords": {
          "type": "integer",
          "format": "int32",
          "description": "Number of access items per day, unit: 10,000 items per day"
        },
        "dailyStorage": {
          "type": "integer",
          "format": "int32",
          "description": "Access size per day, unit: GB per day"
        },
        "dataReportType": {
          "type": "integer",
          "format": "int32",
          "description": "Data report type, default is 0.\n 0: report to DataProxy and respond when the DataProxy received data.\n 1: report to DataProxy and respond after DataProxy sends data.\n 2: report to MQ and respond when the MQ received data."
        },
        "description": {
          "type": "string",
          "description": "Inlong group description"
        },
        "enableCreateResource": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to enable create resource? 0: disable, 1: enable"
        },
        "enableZookeeper": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to enable zookeeper? 0: disable, 1: enable"
        },
        "extList": {
          "type": "array",
          "description": "Inlong group Extension properties",
          "items": {
            "$ref": "#/definitions/Inlong group extension information",
            "originalRef": "Inlong group extension information"
          }
        },
        "followers": {
          "type": "string",
          "description": "Name of followers, separated by commas"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inCharges": {
          "type": "string",
          "description": "Name of responsible person, separated by commas"
        },
        "inlongClusterTag": {
          "type": "string",
          "description": "Inlong cluster tag, which links to inlong_cluster table"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongGroupMode": {
          "type": "integer",
          "format": "int32",
          "description": "Standard mode(include Data Ingestion and Synchronization): 0, DataSync mode(only Data Synchronization): 1"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum length of a single piece of data, unit: Byte"
        },
        "middlewareType": {
          "type": "string",
          "description": "MQ type, replaced by mqType"
        },
        "modifier": {
          "type": "string",
          "description": "Name of modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "mqResource": {
          "type": "string",
          "description": "MQ resource"
        },
        "mqType": {
          "type": "string",
          "description": "MQ type, high throughput: TUBEMQ, high consistency: PULSAR"
        },
        "name": {
          "type": "string",
          "description": "Inlong group name"
        },
        "peakRecords": {
          "type": "integer",
          "format": "int32",
          "description": "peak access per second, unit: bars per second"
        },
        "previousStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Previous status"
        },
        "sortConf": {
          "description": "Sort configuration, will transfer into extList",
          "$ref": "#/definitions/Sort configuration for inlong group",
          "originalRef": "Sort configuration for inlong group"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Inlong group info"
    },
    "Inlong group query request": {
      "type": "object",
      "properties": {
        "clusterTagList": {
          "type": "array",
          "description": "The inlong cluster tag list",
          "items": {
            "type": "string"
          }
        },
        "groupIdList": {
          "type": "array",
          "description": "Inlong group id list",
          "items": {
            "type": "string"
          }
        },
        "inlongGroupMode": {
          "type": "integer",
          "format": "int32",
          "description": "Standard mode(include Data Ingestion and Synchronization): 0, DataSync mode(only Data Synchronization): 1"
        },
        "keyword": {
          "type": "string",
          "description": "Keyword, can be group id or name"
        },
        "mqType": {
          "type": "string",
          "description": "MQ type"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Group status"
        },
        "statusList": {
          "type": "array",
          "description": "Group status list",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "title": "Inlong group query request"
    },
    "Inlong group reset request": {
      "type": "object",
      "required": [
        "inlongGroupId"
      ],
      "properties": {
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id",
          "pattern": "^[a-zA-Z0-9_.-]{4,200}$"
        },
        "rerunProcess": {
          "type": "integer",
          "format": "int32",
          "description": "If rerun process when group is in operating, 0: false 1: true"
        },
        "resetFinalStatus": {
          "type": "integer",
          "format": "int32",
          "description": "This params will work when rerunProcess = 0, 0: reset to fail, 1: reset to success"
        }
      },
      "title": "Inlong group reset request"
    },
    "Inlong group topic request": {
      "type": "object",
      "properties": {
        "clusterTag": {
          "type": "string",
          "description": "The cluster tag of target group"
        },
        "groupIdList": {
          "type": "array",
          "description": "The target group id list, empty means list all groups ",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Inlong group topic request"
    },
    "Inlong stream approval info": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "sinkList": {
          "type": "array",
          "description": "Stream sink approve list",
          "items": {
            "$ref": "#/definitions/Sink approve info",
            "originalRef": "Sink approve info"
          }
        }
      },
      "title": "Inlong stream approval info"
    },
    "Inlong stream brief info": {
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of creator"
        },
        "dailyRecords": {
          "type": "integer",
          "format": "int32",
          "description": "Number of access items per day, unit: 10,000 items per day"
        },
        "dailyStorage": {
          "type": "integer",
          "format": "int32",
          "description": "Access size per day, unit: GB per day"
        },
        "dataEncoding": {
          "type": "string",
          "description": "Data encoding format: UTF-8, GBK"
        },
        "dataEscapeChar": {
          "type": "string",
          "description": "Data field escape symbol"
        },
        "dataSeparator": {
          "type": "string",
          "description": "Data separator"
        },
        "dataType": {
          "type": "string",
          "description": "Data type, including: TEXT, KV, etc."
        },
        "description": {
          "type": "string",
          "description": "Inlong stream description"
        },
        "extList": {
          "type": "array",
          "description": "Inlong stream Extension properties",
          "items": {
            "$ref": "#/definitions/Inlong stream extension information",
            "originalRef": "Inlong stream extension information"
          }
        },
        "fieldList": {
          "type": "array",
          "description": "Field list",
          "items": {
            "$ref": "#/definitions/Stream field configuration",
            "originalRef": "Stream field configuration"
          }
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "ignoreParseError": {
          "type": "boolean",
          "description": "Whether to ignore the parse errors of field value"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum length of a single piece of data, unit: Byte"
        },
        "modifier": {
          "type": "string",
          "description": "Name of modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "mqResource": {
          "type": "string",
          "description": "MQ resource"
        },
        "name": {
          "type": "string",
          "description": "Inlong stream name"
        },
        "peakRecords": {
          "type": "integer",
          "format": "int32",
          "description": "peak access per second, unit: bars per second"
        },
        "sinkList": {
          "type": "array",
          "description": "Sink brief list",
          "items": {
            "$ref": "#/definitions/Sink brief info",
            "originalRef": "Sink brief info"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "storagePeriod": {
          "type": "integer",
          "format": "int32",
          "description": "Data storage period, unit: day"
        },
        "syncSend": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to send synchronously, 0: no, 1: yes"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        },
        "wrapWithInlongMsg": {
          "type": "boolean",
          "description": "Whether the message body wrapped with InlongMsg"
        }
      },
      "title": "Inlong stream brief info"
    },
    "Inlong stream extension information": {
      "type": "object",
      "required": [
        "inlongGroupId",
        "inlongStreamId"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "inlong stream id"
        },
        "keyName": {
          "type": "string",
          "description": "property name"
        },
        "keyValue": {
          "type": "string",
          "description": "property value"
        }
      },
      "title": "Inlong stream extension information"
    },
    "Inlong stream heartbeat response": {
      "type": "object",
      "properties": {
        "component": {
          "type": "string",
          "description": "Component name, such as: Agent, Sort..."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "instance": {
          "type": "string",
          "description": "Component instance, can be ip, name..."
        },
        "metricHeartbeat": {
          "type": "string",
          "description": "Stream metric heartbeat"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "reportTime": {
          "type": "integer",
          "format": "int64",
          "description": "Report time of heartbeat"
        },
        "statusHeartbeat": {
          "type": "string",
          "description": "Stream status heartbeat"
        }
      },
      "title": "Inlong stream heartbeat response"
    },
    "Inlong stream info": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of creator"
        },
        "dailyRecords": {
          "type": "integer",
          "format": "int32",
          "description": "Number of access items per day, unit: 10,000 items per day"
        },
        "dailyStorage": {
          "type": "integer",
          "format": "int32",
          "description": "Access size per day, unit: GB per day"
        },
        "dataEncoding": {
          "type": "string",
          "description": "Data encoding format: UTF-8, GBK"
        },
        "dataEscapeChar": {
          "type": "string",
          "description": "Data field escape symbol"
        },
        "dataSeparator": {
          "type": "string",
          "description": "Data separator"
        },
        "dataType": {
          "type": "string",
          "description": "Data type, including: TEXT, KV, etc."
        },
        "description": {
          "type": "string",
          "description": "Inlong stream description"
        },
        "extList": {
          "type": "array",
          "description": "Inlong stream Extension properties",
          "items": {
            "$ref": "#/definitions/Inlong stream extension information",
            "originalRef": "Inlong stream extension information"
          }
        },
        "extParams": {
          "type": "string",
          "description": "Extended params, will be saved as JSON string"
        },
        "fieldList": {
          "type": "array",
          "description": "Field list",
          "items": {
            "$ref": "#/definitions/Stream field configuration",
            "originalRef": "Stream field configuration"
          }
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "ignoreParseError": {
          "type": "boolean",
          "description": "Whether to ignore the parse errors of field value"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum length of a single piece of data, unit: Byte"
        },
        "modifier": {
          "type": "string",
          "description": "Name of modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "mqResource": {
          "type": "string",
          "description": "MQ resource for inlong stream. Default: ${inlongStreamId}"
        },
        "name": {
          "type": "string",
          "description": "Inlong stream name"
        },
        "peakRecords": {
          "type": "integer",
          "format": "int32",
          "description": "peak access per second, unit: bars per second"
        },
        "previousStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Previous status"
        },
        "sinkList": {
          "type": "array",
          "description": "Stream sink infos",
          "items": {
            "$ref": "#/definitions/Stream sink info",
            "originalRef": "Stream sink info"
          }
        },
        "sourceList": {
          "type": "array",
          "description": "Stream source infos",
          "items": {
            "$ref": "#/definitions/Stream source info",
            "originalRef": "Stream source info"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "storagePeriod": {
          "type": "integer",
          "format": "int32",
          "description": "Data storage period, unit: day"
        },
        "syncSend": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to send synchronously, 0: no, 1: yes"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        },
        "wrapWithInlongMsg": {
          "type": "boolean",
          "description": "Whether the message body wrapped with InlongMsg"
        }
      },
      "title": "Inlong stream info"
    },
    "Inlong stream paging query request": {
      "type": "object",
      "properties": {
        "inCharge": {
          "type": "string",
          "description": "Inlong group in charge"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "keyword": {
          "type": "string",
          "description": "Keyword, can be stream id or name"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "status"
        },
        "statusList": {
          "type": "array",
          "description": "Stream status list",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "title": "Inlong stream paging query request"
    },
    "Inlong stream request": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "dailyRecords": {
          "type": "integer",
          "format": "int32",
          "description": "Number of access items per day, unit: 10,000 items per day"
        },
        "dailyStorage": {
          "type": "integer",
          "format": "int32",
          "description": "Access size per day, unit: GB per day"
        },
        "dataEncoding": {
          "type": "string",
          "description": "Data encoding format: UTF-8, GBK"
        },
        "dataEscapeChar": {
          "type": "string",
          "description": "Data field escape symbol"
        },
        "dataSeparator": {
          "type": "string",
          "description": "Data separator"
        },
        "dataType": {
          "type": "string",
          "description": "Data type, including: TEXT, KV, etc."
        },
        "description": {
          "type": "string",
          "description": "Inlong stream description"
        },
        "extList": {
          "type": "array",
          "description": "Inlong stream Extension properties",
          "items": {
            "$ref": "#/definitions/Inlong stream extension information",
            "originalRef": "Inlong stream extension information"
          }
        },
        "extParams": {
          "type": "string",
          "description": "Extended params, will be saved as JSON string"
        },
        "fieldList": {
          "type": "array",
          "description": "Field list",
          "items": {
            "$ref": "#/definitions/Stream field configuration",
            "originalRef": "Stream field configuration"
          }
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "ignoreParseError": {
          "type": "boolean",
          "description": "Whether to ignore the parse errors of field value"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id",
          "pattern": "^[a-zA-Z0-9_.-]{4,200}$"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id",
          "pattern": "^[a-zA-Z0-9_.-]{1,200}$"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum length of a single piece of data, unit: Byte"
        },
        "mqResource": {
          "type": "string",
          "description": "MQ resource"
        },
        "name": {
          "type": "string",
          "description": "Inlong stream name"
        },
        "peakRecords": {
          "type": "integer",
          "format": "int32",
          "description": "peak access per second, unit: bars per second"
        },
        "storagePeriod": {
          "type": "integer",
          "format": "int32",
          "description": "Data storage period, unit: day"
        },
        "syncSend": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to send synchronously, 0: no, 1: yes",
          "minimum": 0,
          "maximum": 9223372036854775807,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        },
        "wrapWithInlongMsg": {
          "type": "boolean",
          "description": "Whether the message body wrapped with InlongMsg"
        }
      },
      "title": "Inlong stream request"
    },
    "Inlong tenant info": {
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of in creator"
        },
        "description": {
          "type": "string",
          "description": "Description of the tenant"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "modifier": {
          "type": "string",
          "description": "Name of in modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "description": "Tenant name"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Inlong tenant info"
    },
    "Inlong tenant user role info": {
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of in creator"
        },
        "disabled": {
          "type": "integer",
          "format": "int32",
          "description": "If disabled"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "modifier": {
          "type": "string",
          "description": "Name of in modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "roleCode": {
          "type": "string",
          "description": "Role code"
        },
        "tenant": {
          "type": "string",
          "description": "Tenant"
        },
        "username": {
          "type": "string",
          "description": "User name"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Inlong tenant user role info"
    },
    "Inlong user paging query request": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "integer",
          "format": "int32",
          "description": "If disabled"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "roleCode": {
          "type": "string",
          "description": "Role code"
        },
        "username": {
          "type": "string",
          "description": "User name"
        }
      },
      "title": "Inlong user paging query request"
    },
    "Inlong user role info": {
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of in creator"
        },
        "disabled": {
          "type": "integer",
          "format": "int32",
          "description": "If disabled"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "modifier": {
          "type": "string",
          "description": "Name of in modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "roleCode": {
          "type": "string",
          "description": "Role code"
        },
        "username": {
          "type": "string",
          "description": "User name"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Inlong user role info"
    },
    "Inlong user role request": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "integer",
          "format": "int32",
          "description": "If disabled"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "roleCode": {
          "type": "string",
          "description": "Role code"
        },
        "username": {
          "type": "string",
          "description": "User name"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Inlong user role request"
    },
    "InlongGroupApproveForm": {
      "title": "InlongGroupApproveForm",
      "allOf": [
        {
          "$ref": "#/definitions/BaseTaskForm",
          "originalRef": "BaseTaskForm"
        },
        {
          "type": "object",
          "required": [
            "groupApproveInfo"
          ],
          "properties": {
            "groupApproveInfo": {
              "description": "Inlong group approve info",
              "$ref": "#/definitions/Inlong group approval request",
              "originalRef": "Inlong group approval request"
            },
            "streamApproveInfoList": {
              "type": "array",
              "description": "All inlong stream info under the inlong group, including the sink info",
              "items": {
                "$ref": "#/definitions/Inlong stream approval info",
                "originalRef": "Inlong stream approval info"
              }
            }
          },
          "title": "InlongGroupApproveForm"
        }
      ]
    },
    "ListenerExecuteLog": {
      "type": "object",
      "properties": {
        "async": {
          "type": "integer",
          "format": "int32",
          "description": "Is it synchronized"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time"
        },
        "event": {
          "type": "string",
          "description": "Event"
        },
        "eventType": {
          "type": "string",
          "description": "Event type"
        },
        "exception": {
          "type": "string",
          "description": "Exception"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "ip": {
          "type": "string",
          "description": "Execute IP"
        },
        "listener": {
          "type": "string",
          "description": "Listener name"
        },
        "remark": {
          "type": "string",
          "description": "Execution result information"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        }
      },
      "title": "ListenerExecuteLog"
    },
    "Login user and password": {
      "type": "object",
      "required": [
        "password",
        "username"
      ],
      "properties": {
        "password": {
          "type": "string",
          "description": "password"
        },
        "username": {
          "type": "string",
          "description": "username"
        }
      },
      "title": "Login user and password"
    },
    "MQClusterInfo": {
      "type": "object",
      "properties": {
        "mqType": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "token": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "title": "MQClusterInfo"
    },
    "MQInfo": {
      "type": "object",
      "properties": {
        "mqType": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "url": {
          "type": "string"
        }
      },
      "title": "MQInfo"
    },
    "Paginated query results«Cluster node response»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Cluster node response",
            "originalRef": "Cluster node response"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Cluster node response»"
    },
    "Paginated query results«Cluster tag response»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Cluster tag response",
            "originalRef": "Cluster tag response"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Cluster tag response»"
    },
    "Paginated query results«Component heartbeat response»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Component heartbeat response",
            "originalRef": "Component heartbeat response"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Component heartbeat response»"
    },
    "Paginated query results«Data node info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Data node info",
            "originalRef": "Data node info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Data node info»"
    },
    "Paginated query results«Inlong cluster info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Inlong cluster info",
            "originalRef": "Inlong cluster info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Inlong cluster info»"
    },
    "Paginated query results«Inlong consume brief info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Inlong consume brief info",
            "originalRef": "Inlong consume brief info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Inlong consume brief info»"
    },
    "Paginated query results«Inlong group brief info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Inlong group brief info",
            "originalRef": "Inlong group brief info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Inlong group brief info»"
    },
    "Paginated query results«Inlong group heartbeat response»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Inlong group heartbeat response",
            "originalRef": "Inlong group heartbeat response"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Inlong group heartbeat response»"
    },
    "Paginated query results«Inlong stream brief info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Inlong stream brief info",
            "originalRef": "Inlong stream brief info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Inlong stream brief info»"
    },
    "Paginated query results«Inlong stream heartbeat response»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Inlong stream heartbeat response",
            "originalRef": "Inlong stream heartbeat response"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Inlong stream heartbeat response»"
    },
    "Paginated query results«Inlong stream info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Inlong stream info",
            "originalRef": "Inlong stream info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Inlong stream info»"
    },
    "Paginated query results«Inlong tenant info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Inlong tenant info",
            "originalRef": "Inlong tenant info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Inlong tenant info»"
    },
    "Paginated query results«Inlong tenant user role info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Inlong tenant user role info",
            "originalRef": "Inlong tenant user role info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Inlong tenant user role info»"
    },
    "Paginated query results«Inlong user role info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Inlong user role info",
            "originalRef": "Inlong user role info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Inlong user role info»"
    },
    "Paginated query results«Process response»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Process response",
            "originalRef": "Process response"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Process response»"
    },
    "Paginated query results«Response of the stream transform»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Response of the stream transform",
            "originalRef": "Response of the stream transform"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Response of the stream transform»"
    },
    "Paginated query results«Stream sink info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Stream sink info",
            "originalRef": "Stream sink info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Stream sink info»"
    },
    "Paginated query results«Stream source info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Stream source info",
            "originalRef": "Stream source info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Stream source info»"
    },
    "Paginated query results«Task response»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Task response",
            "originalRef": "Task response"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Task response»"
    },
    "Paginated query results«Tenant cluster tag response»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Tenant cluster tag response",
            "originalRef": "Tenant cluster tag response"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Tenant cluster tag response»"
    },
    "Paginated query results«User info»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/User info",
            "originalRef": "User info"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«User info»"
    },
    "Paginated query results«Workflow Approver response»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Workflow Approver response",
            "originalRef": "Workflow Approver response"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Workflow Approver response»"
    },
    "Paginated query results«Workflow event log response»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/Workflow event log response",
            "originalRef": "Workflow event log response"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«Workflow event log response»"
    },
    "Paginated query results«WorkflowExecuteLog»": {
      "type": "object",
      "required": [
        "list",
        "pageNum",
        "pageSize",
        "total"
      ],
      "properties": {
        "list": {
          "type": "array",
          "description": "data record",
          "items": {
            "$ref": "#/definitions/WorkflowExecuteLog",
            "originalRef": "WorkflowExecuteLog"
          }
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "pageNum"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "pageSize"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items matching the filter criteria"
        }
      },
      "title": "Paginated query results«WorkflowExecuteLog»"
    },
    "Paging query request for Sink": {
      "type": "object",
      "required": [
        "inlongGroupId"
      ],
      "properties": {
        "dataNodeName": {
          "type": "string",
          "description": "Data node name"
        },
        "inlongClusterName": {
          "type": "string",
          "description": "Inlong cluster name"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "keyword": {
          "type": "string",
          "description": "Keyword, can be group id, stream id or sink name"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "sinkType": {
          "type": "string",
          "description": "Sink type, such as HIVE"
        },
        "sortConsumerGroup": {
          "type": "string",
          "description": "Sort consumer group"
        },
        "sortTaskName": {
          "type": "string",
          "description": "Sort task name"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "statusList": {
          "type": "array",
          "description": "Sink status list",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "title": "Paging query request for Sink"
    },
    "Paging query request for Source": {
      "type": "object",
      "required": [
        "inlongGroupId"
      ],
      "properties": {
        "dataNodeName": {
          "type": "string",
          "description": "Data node name"
        },
        "inlongClusterName": {
          "type": "string",
          "description": "Inlong cluster name"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "keyword": {
          "type": "string",
          "description": "Keyword, can be group id, stream id or source name"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "sourceType": {
          "type": "string",
          "description": "Source type, such as FILE"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "statusList": {
          "type": "array",
          "description": "Source status list",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "title": "Paging query request for Source"
    },
    "Paging query request for TransformPageRequest": {
      "type": "object",
      "required": [
        "inlongGroupId"
      ],
      "properties": {
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "transformName": {
          "type": "string",
          "description": "Transform name, unique in one stream"
        },
        "transformType": {
          "type": "string",
          "description": "Transform type, including: splitter, filter, joiner, etc."
        }
      },
      "title": "Paging query request for TransformPageRequest"
    },
    "Parse field request - with stream": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "description": "Parse method: json or sql"
        },
        "statement": {
          "type": "string",
          "description": "Statement for create fields"
        }
      },
      "title": "Parse field request - with stream"
    },
    "Process count response": {
      "type": "object",
      "properties": {
        "totalApplyCount": {
          "type": "integer",
          "format": "int32",
          "description": "Count of applications"
        },
        "totalApproveCount": {
          "type": "integer",
          "format": "int32",
          "description": "Count of approved"
        },
        "totalCancelCount": {
          "type": "integer",
          "format": "int32",
          "description": "Count of cancelled"
        },
        "totalProcessingCount": {
          "type": "integer",
          "format": "int32",
          "description": "Count of awaiting approval"
        },
        "totalRejectCount": {
          "type": "integer",
          "format": "int32",
          "description": "Count of dismissed data"
        }
      },
      "title": "Process count response"
    },
    "Process detail response": {
      "type": "object",
      "properties": {
        "currentTask": {
          "description": "Current task to be done",
          "$ref": "#/definitions/Task response",
          "originalRef": "Task response"
        },
        "processInfo": {
          "description": "Process info",
          "$ref": "#/definitions/Process response",
          "originalRef": "Process response"
        },
        "taskHistory": {
          "type": "array",
          "description": "Approval history",
          "items": {
            "$ref": "#/definitions/Task response",
            "originalRef": "Task response"
          }
        },
        "workflow": {
          "description": "Workflow view",
          "$ref": "#/definitions/Workflow brief info",
          "originalRef": "Workflow brief info"
        }
      },
      "title": "Process detail response"
    },
    "Process response": {
      "type": "object",
      "properties": {
        "applicant": {
          "type": "string",
          "description": "Applicant name"
        },
        "currentTasks": {
          "type": "array",
          "description": "Tasks currently to be done",
          "items": {
            "$ref": "#/definitions/Task response",
            "originalRef": "Task response"
          }
        },
        "displayName": {
          "type": "string",
          "description": "Process display name"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time"
        },
        "extParams": {
          "type": "object",
          "description": "Extended information-JSON"
        },
        "formData": {
          "type": "object",
          "description": "Form information-JSON"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Process ID"
        },
        "name": {
          "type": "string",
          "description": "Process name"
        },
        "showInList": {
          "type": "object",
          "description": "Extra information shown in the list"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time"
        },
        "status": {
          "type": "string",
          "description": "Process status",
          "enum": [
            "CANCELED",
            "COMPLETED",
            "PROCESSING",
            "REJECTED",
            "TERMINATED"
          ]
        },
        "title": {
          "type": "string",
          "description": "Process title"
        },
        "type": {
          "type": "string",
          "description": "Process classification"
        }
      },
      "title": "Process response"
    },
    "Request of heartbeat report": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "clusterTag": {
          "type": "string"
        },
        "componentType": {
          "type": "string"
        },
        "extTag": {
          "type": "string"
        },
        "groupHeartbeats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupHeartbeat",
            "originalRef": "GroupHeartbeat"
          }
        },
        "inCharges": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "load": {
          "type": "integer",
          "format": "int32"
        },
        "nodeGroup": {
          "type": "string"
        },
        "nodeSrvStatus": {
          "type": "string",
          "enum": [
            "OK",
            "SERVICE_UNINSTALL",
            "SERVICE_UNREADY",
            "UNKNOWN_ERROR"
          ]
        },
        "port": {
          "type": "string"
        },
        "protocolType": {
          "type": "string"
        },
        "reportTime": {
          "type": "integer",
          "format": "int64"
        },
        "streamHeartbeats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StreamHeartbeat",
            "originalRef": "StreamHeartbeat"
          }
        }
      },
      "title": "Request of heartbeat report"
    },
    "Response of the stream transform": {
      "type": "object",
      "properties": {
        "fieldList": {
          "type": "array",
          "description": "Field list",
          "items": {
            "$ref": "#/definitions/Stream field configuration",
            "originalRef": "Stream field configuration"
          }
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "postNodeNames": {
          "type": "string",
          "description": "Post node names of transform in this stream"
        },
        "preNodeNames": {
          "type": "string",
          "description": "Pre node names of transform in this stream"
        },
        "transformDefinition": {
          "type": "string",
          "description": "Transform definition in json type"
        },
        "transformName": {
          "type": "string",
          "description": "Transform name, unique in one stream"
        },
        "transformType": {
          "type": "string",
          "description": "Transform type, including: splitter, filter, joiner, etc."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version of transform"
        }
      },
      "title": "Response of the stream transform"
    },
    "Response«Audit source response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Audit source response",
          "originalRef": "Audit source response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Audit source response»"
    },
    "Response«AuditConfig»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/AuditConfig",
          "originalRef": "AuditConfig"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«AuditConfig»"
    },
    "Response«Base inlong consume info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Base inlong consume info",
          "originalRef": "Base inlong consume info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Base inlong consume info»"
    },
    "Response«Cluster node response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Cluster node response",
          "originalRef": "Cluster node response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Cluster node response»"
    },
    "Response«Cluster tag response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Cluster tag response",
          "originalRef": "Cluster tag response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Cluster tag response»"
    },
    "Response«Component heartbeat response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Component heartbeat response",
          "originalRef": "Component heartbeat response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Component heartbeat response»"
    },
    "Response«Count info of inlong consume status»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Count info of inlong consume status",
          "originalRef": "Count info of inlong consume status"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Count info of inlong consume status»"
    },
    "Response«Data node info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Data node info",
          "originalRef": "Data node info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Data node info»"
    },
    "Response«DataProxyConfig»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/DataProxyConfig",
          "originalRef": "DataProxyConfig"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«DataProxyConfig»"
    },
    "Response«DataProxyNodeResponse»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/DataProxyNodeResponse",
          "originalRef": "DataProxyNodeResponse"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«DataProxyNodeResponse»"
    },
    "Response«Inlong cluster info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Inlong cluster info",
          "originalRef": "Inlong cluster info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Inlong cluster info»"
    },
    "Response«Inlong group and topic info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Inlong group and topic info",
          "originalRef": "Inlong group and topic info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Inlong group and topic info»"
    },
    "Response«Inlong group heartbeat response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Inlong group heartbeat response",
          "originalRef": "Inlong group heartbeat response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Inlong group heartbeat response»"
    },
    "Response«Inlong group info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Inlong group info",
          "originalRef": "Inlong group info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Inlong group info»"
    },
    "Response«Inlong stream brief info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Inlong stream brief info",
          "originalRef": "Inlong stream brief info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Inlong stream brief info»"
    },
    "Response«Inlong stream heartbeat response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Inlong stream heartbeat response",
          "originalRef": "Inlong stream heartbeat response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Inlong stream heartbeat response»"
    },
    "Response«Inlong stream info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Inlong stream info",
          "originalRef": "Inlong stream info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Inlong stream info»"
    },
    "Response«Inlong tenant info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Inlong tenant info",
          "originalRef": "Inlong tenant info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Inlong tenant info»"
    },
    "Response«Inlong tenant user role info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Inlong tenant user role info",
          "originalRef": "Inlong tenant user role info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Inlong tenant user role info»"
    },
    "Response«Inlong user role info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Inlong user role info",
          "originalRef": "Inlong user role info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Inlong user role info»"
    },
    "Response«List«AuditVO»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditVO",
            "originalRef": "AuditVO"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«AuditVO»»"
    },
    "Response«List«Brief Message info for MQ»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Brief Message info for MQ",
            "originalRef": "Brief Message info for MQ"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Brief Message info for MQ»»"
    },
    "Response«List«Cluster node response»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cluster node response",
            "originalRef": "Cluster node response"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Cluster node response»»"
    },
    "Response«List«Cluster tag response»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cluster tag response",
            "originalRef": "Cluster tag response"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Cluster tag response»»"
    },
    "Response«List«Data node info»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Data node info",
            "originalRef": "Data node info"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Data node info»»"
    },
    "Response«List«Inlong cluster info»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Inlong cluster info",
            "originalRef": "Inlong cluster info"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Inlong cluster info»»"
    },
    "Response«List«Inlong group and topic info»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Inlong group and topic info",
            "originalRef": "Inlong group and topic info"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Inlong group and topic info»»"
    },
    "Response«List«Inlong group brief info»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Inlong group brief info",
            "originalRef": "Inlong group brief info"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Inlong group brief info»»"
    },
    "Response«List«Inlong stream brief info»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Inlong stream brief info",
            "originalRef": "Inlong stream brief info"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Inlong stream brief info»»"
    },
    "Response«List«Response of the stream transform»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response of the stream transform",
            "originalRef": "Response of the stream transform"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Response of the stream transform»»"
    },
    "Response«List«Sink field info»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sink field info",
            "originalRef": "Sink field info"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Sink field info»»"
    },
    "Response«List«Sort status info»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sort status info",
            "originalRef": "Sort status info"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Sort status info»»"
    },
    "Response«List«Stream field configuration»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stream field configuration",
            "originalRef": "Stream field configuration"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Stream field configuration»»"
    },
    "Response«List«Stream sink info»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stream sink info",
            "originalRef": "Stream sink info"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«Stream sink info»»"
    },
    "Response«List«string»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«List«string»»"
    },
    "Response«Map«string,object»»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Map«string,object»»"
    },
    "Response«Paginated query results«Cluster node response»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Cluster node response»",
          "originalRef": "Paginated query results«Cluster node response»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Cluster node response»»"
    },
    "Response«Paginated query results«Cluster tag response»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Cluster tag response»",
          "originalRef": "Paginated query results«Cluster tag response»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Cluster tag response»»"
    },
    "Response«Paginated query results«Component heartbeat response»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Component heartbeat response»",
          "originalRef": "Paginated query results«Component heartbeat response»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Component heartbeat response»»"
    },
    "Response«Paginated query results«Data node info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Data node info»",
          "originalRef": "Paginated query results«Data node info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Data node info»»"
    },
    "Response«Paginated query results«Inlong cluster info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Inlong cluster info»",
          "originalRef": "Paginated query results«Inlong cluster info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Inlong cluster info»»"
    },
    "Response«Paginated query results«Inlong consume brief info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Inlong consume brief info»",
          "originalRef": "Paginated query results«Inlong consume brief info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Inlong consume brief info»»"
    },
    "Response«Paginated query results«Inlong group brief info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Inlong group brief info»",
          "originalRef": "Paginated query results«Inlong group brief info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Inlong group brief info»»"
    },
    "Response«Paginated query results«Inlong group heartbeat response»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Inlong group heartbeat response»",
          "originalRef": "Paginated query results«Inlong group heartbeat response»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Inlong group heartbeat response»»"
    },
    "Response«Paginated query results«Inlong stream brief info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Inlong stream brief info»",
          "originalRef": "Paginated query results«Inlong stream brief info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Inlong stream brief info»»"
    },
    "Response«Paginated query results«Inlong stream heartbeat response»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Inlong stream heartbeat response»",
          "originalRef": "Paginated query results«Inlong stream heartbeat response»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Inlong stream heartbeat response»»"
    },
    "Response«Paginated query results«Inlong stream info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Inlong stream info»",
          "originalRef": "Paginated query results«Inlong stream info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Inlong stream info»»"
    },
    "Response«Paginated query results«Inlong tenant info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Inlong tenant info»",
          "originalRef": "Paginated query results«Inlong tenant info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Inlong tenant info»»"
    },
    "Response«Paginated query results«Inlong tenant user role info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Inlong tenant user role info»",
          "originalRef": "Paginated query results«Inlong tenant user role info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Inlong tenant user role info»»"
    },
    "Response«Paginated query results«Inlong user role info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Inlong user role info»",
          "originalRef": "Paginated query results«Inlong user role info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Inlong user role info»»"
    },
    "Response«Paginated query results«Process response»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Process response»",
          "originalRef": "Paginated query results«Process response»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Process response»»"
    },
    "Response«Paginated query results«Response of the stream transform»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Response of the stream transform»",
          "originalRef": "Paginated query results«Response of the stream transform»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Response of the stream transform»»"
    },
    "Response«Paginated query results«Stream sink info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Stream sink info»",
          "originalRef": "Paginated query results«Stream sink info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Stream sink info»»"
    },
    "Response«Paginated query results«Stream source info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Stream source info»",
          "originalRef": "Paginated query results«Stream source info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Stream source info»»"
    },
    "Response«Paginated query results«Task response»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Task response»",
          "originalRef": "Paginated query results«Task response»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Task response»»"
    },
    "Response«Paginated query results«Tenant cluster tag response»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Tenant cluster tag response»",
          "originalRef": "Paginated query results«Tenant cluster tag response»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Tenant cluster tag response»»"
    },
    "Response«Paginated query results«User info»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«User info»",
          "originalRef": "Paginated query results«User info»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«User info»»"
    },
    "Response«Paginated query results«Workflow Approver response»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Workflow Approver response»",
          "originalRef": "Paginated query results«Workflow Approver response»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Workflow Approver response»»"
    },
    "Response«Paginated query results«Workflow event log response»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«Workflow event log response»",
          "originalRef": "Paginated query results«Workflow event log response»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«Workflow event log response»»"
    },
    "Response«Paginated query results«WorkflowExecuteLog»»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Paginated query results«WorkflowExecuteLog»",
          "originalRef": "Paginated query results«WorkflowExecuteLog»"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Paginated query results«WorkflowExecuteLog»»"
    },
    "Response«Process count response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Process count response",
          "originalRef": "Process count response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Process count response»"
    },
    "Response«Process detail response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Process detail response",
          "originalRef": "Process detail response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Process detail response»"
    },
    "Response«Response of the stream transform»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Response of the stream transform",
          "originalRef": "Response of the stream transform"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Response of the stream transform»"
    },
    "Response«Statistics of inlong group status»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Statistics of inlong group status",
          "originalRef": "Statistics of inlong group status"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Statistics of inlong group status»"
    },
    "Response«Stream sink info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Stream sink info",
          "originalRef": "Stream sink info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Stream sink info»"
    },
    "Response«Stream source info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Stream source info",
          "originalRef": "Stream source info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Stream source info»"
    },
    "Response«Task count response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Task count response",
          "originalRef": "Task count response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Task count response»"
    },
    "Response«TaskResult»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/TaskResult",
          "originalRef": "TaskResult"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«TaskResult»"
    },
    "Response«Update result info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Update result info",
          "originalRef": "Update result info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Update result info»"
    },
    "Response«User info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/User info",
          "originalRef": "User info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«User info»"
    },
    "Response«Workflow Approver response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Workflow Approver response",
          "originalRef": "Workflow Approver response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Workflow Approver response»"
    },
    "Response«Workflow event log response»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Workflow event log response",
          "originalRef": "Workflow event log response"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Workflow event log response»"
    },
    "Response«Workflow result info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Workflow result info",
          "originalRef": "Workflow result info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«Workflow result info»"
    },
    "Response«boolean»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "boolean"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«boolean»"
    },
    "Response«db collector task info»": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/db collector task info",
          "originalRef": "db collector task info"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«db collector task info»"
    },
    "Response«int»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "integer",
          "format": "int32"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«int»"
    },
    "Response«object»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«object»"
    },
    "Response«string»": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "errMsg": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "Response«string»"
    },
    "ServiceTaskForm": {
      "title": "ServiceTaskForm",
      "allOf": [
        {
          "$ref": "#/definitions/BaseTaskForm",
          "originalRef": "BaseTaskForm"
        },
        {
          "type": "object",
          "properties": {
            "inlongGroupId": {
              "type": "string"
            },
            "inlongStreamId": {
              "type": "string"
            }
          },
          "title": "ServiceTaskForm"
        }
      ]
    },
    "Sink approve info": {
      "type": "object",
      "properties": {
        "clusterUrl": {
          "type": "string",
          "description": "Sink cluster URL"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "sinkType": {
          "type": "string",
          "description": "Sink type, such as HIVE"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Sink status"
        }
      },
      "title": "Sink approve info"
    },
    "Sink brief info": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "integer",
          "format": "int32",
          "description": "Sink cluster ID"
        },
        "clusterUrl": {
          "type": "string",
          "description": "Sink cluster URL"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "sinkName": {
          "type": "string",
          "description": "Sink name, unique in one stream"
        },
        "sinkType": {
          "type": "string",
          "description": "Sink type, such as HIVE"
        }
      },
      "title": "Sink brief info"
    },
    "Sink field info": {
      "type": "object",
      "required": [
        "fieldName",
        "fieldType",
        "inlongGroupId",
        "inlongStreamId"
      ],
      "properties": {
        "extParams": {
          "type": "string",
          "description": "Extra Param in JSON style"
        },
        "fieldComment": {
          "type": "string",
          "description": "Field comment"
        },
        "fieldFormat": {
          "type": "string",
          "description": "Field format, including: MICROSECONDS, MILLISECONDS, SECONDS, SQL, ISO_8601 and custom such as 'yyyy-MM-dd HH:mm:ss'. This is mainly used for time format"
        },
        "fieldName": {
          "type": "string",
          "description": "Field name"
        },
        "fieldType": {
          "type": "string",
          "description": "Field type"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Field index"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "inlong stream id"
        },
        "isMetaField": {
          "type": "integer",
          "format": "int32",
          "description": "Is this field a meta field, 0: no, 1: yes"
        },
        "metaFieldName": {
          "type": "string",
          "description": "Meta field name"
        },
        "originFieldName": {
          "type": "string",
          "description": "Origin field name before transform operation"
        },
        "originNodeName": {
          "type": "string",
          "description": "Origin node name which stream fields belong"
        },
        "sinkType": {
          "type": "string",
          "description": "sink type"
        },
        "sourceFieldName": {
          "type": "string",
          "description": "Source field name"
        },
        "sourceFieldType": {
          "type": "string",
          "description": "Source field type"
        }
      },
      "title": "Sink field info"
    },
    "Sort configuration for inlong group": {
      "type": "object",
      "title": "Sort configuration for inlong group"
    },
    "Sort status info": {
      "type": "object",
      "properties": {
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "properties": {
          "type": "object",
          "description": "Extended properties of sort"
        },
        "sortStatus": {
          "type": "string",
          "description": "Sort status info",
          "enum": [
            "FAILED",
            "FINISHED",
            "NEW",
            "NOT_EXISTS",
            "OPERATING",
            "PAUSED",
            "RUNNING",
            "STOPPED",
            "UNKNOWN"
          ]
        }
      },
      "title": "Sort status info"
    },
    "Sort status request": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "string",
          "description": "Optional credential info, such as the token of Sort cluster"
        },
        "inlongGroupIds": {
          "type": "array",
          "description": "Inlong group ids",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Sort status request"
    },
    "SortClusterConfig": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "sortTasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortTaskConfig",
            "originalRef": "SortTaskConfig"
          }
        }
      },
      "title": "SortClusterConfig"
    },
    "SortClusterResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "$ref": "#/definitions/SortClusterConfig",
          "originalRef": "SortClusterConfig"
        },
        "md5": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "SortClusterResponse"
    },
    "SortSourceConfigResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "$ref": "#/definitions/CacheZoneConfig",
          "originalRef": "CacheZoneConfig"
        },
        "md5": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        }
      },
      "title": "SortSourceConfigResponse"
    },
    "SortTaskConfig": {
      "type": "object",
      "properties": {
        "idParams": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "name": {
          "type": "string"
        },
        "sinkParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      },
      "title": "SortTaskConfig"
    },
    "Statistics of inlong group status": {
      "type": "object",
      "properties": {
        "rejectCount": {
          "type": "integer",
          "format": "int64",
          "description": "Quantity rejected"
        },
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total group number"
        },
        "waitApproveCount": {
          "type": "integer",
          "format": "int64",
          "description": "Amount to be approved"
        },
        "waitAssignCount": {
          "type": "integer",
          "format": "int64",
          "description": "The quantity to be allocated, which is the number of configuring groups"
        }
      },
      "title": "Statistics of inlong group status"
    },
    "Stream field configuration": {
      "type": "object",
      "required": [
        "fieldName",
        "fieldType",
        "inlongGroupId",
        "inlongStreamId"
      ],
      "properties": {
        "extParams": {
          "type": "string",
          "description": "Extra Param in JSON style"
        },
        "fieldComment": {
          "type": "string",
          "description": "Field comment"
        },
        "fieldFormat": {
          "type": "string",
          "description": "Field format, including: MICROSECONDS, MILLISECONDS, SECONDS, SQL, ISO_8601 and custom such as 'yyyy-MM-dd HH:mm:ss'. This is mainly used for time format"
        },
        "fieldName": {
          "type": "string",
          "description": "Field name"
        },
        "fieldType": {
          "type": "string",
          "description": "Field type"
        },
        "fieldValue": {
          "type": "string",
          "description": "Field value for constants"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Field index"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "inlong stream id"
        },
        "isMetaField": {
          "type": "integer",
          "format": "int32",
          "description": "Is this field a meta field, 0: no, 1: yes"
        },
        "isPredefinedField": {
          "type": "integer",
          "format": "int32",
          "description": "Is predefined field, 1: yes, 0: no"
        },
        "metaFieldName": {
          "type": "string",
          "description": "Meta field name"
        },
        "originFieldName": {
          "type": "string",
          "description": "Origin field name before transform operation"
        },
        "originNodeName": {
          "type": "string",
          "description": "Origin node name which stream fields belong"
        },
        "preExpression": {
          "type": "string",
          "description": "Value expression of predefined field"
        }
      },
      "title": "Stream field configuration"
    },
    "Stream sink info": {
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Creator"
        },
        "dataEncoding": {
          "type": "string",
          "description": "Encoding type for sink, default is UTF-8"
        },
        "dataNodeName": {
          "type": "string",
          "description": "Data node name"
        },
        "description": {
          "type": "string",
          "description": "Sink description"
        },
        "enableCreateResource": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to enable create sink resource? 0: disable, 1: enable. Default is 1"
        },
        "fieldList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stream field configuration",
            "originalRef": "Stream field configuration"
          }
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Sink id"
        },
        "inlongClusterName": {
          "type": "string",
          "description": "Inlong cluster name"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "modifier": {
          "type": "string",
          "description": "Modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "operateLog": {
          "type": "string",
          "description": "Backend operation log"
        },
        "postNodes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "preNodes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "previousStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Previous status"
        },
        "properties": {
          "type": "object",
          "description": "Properties for sink"
        },
        "sinkFieldList": {
          "type": "array",
          "description": "Sink field list",
          "items": {
            "$ref": "#/definitions/Sink field info",
            "originalRef": "Sink field info"
          }
        },
        "sinkName": {
          "type": "string",
          "description": "Sink name, unique in one stream."
        },
        "sinkType": {
          "type": "string",
          "description": "Sink type, including: HIVE, ICEBERG, etc."
        },
        "sortConsumerGroup": {
          "type": "string",
          "description": "Sort consumer group"
        },
        "sortTaskName": {
          "type": "string",
          "description": "Sort task name"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Stream sink info"
    },
    "Stream sink request": {
      "type": "object",
      "properties": {
        "dataNodeName": {
          "type": "string",
          "description": "Data node name",
          "pattern": "^[A-Za-z0-9_-]{1,128}$"
        },
        "description": {
          "type": "string",
          "description": "Sink description"
        },
        "enableCreateResource": {
          "type": "integer",
          "format": "int32",
          "description": "Whether to enable create sink resource? 0: disable, 1: enable. Default is 1",
          "minimum": 0,
          "maximum": 9223372036854775807,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inlongClusterName": {
          "type": "string",
          "description": "Inlong cluster name",
          "pattern": "^[a-z0-9_.-]{1,128}$"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id",
          "pattern": "^[a-zA-Z0-9_.-]{4,200}$"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id",
          "pattern": "^[a-zA-Z0-9_.-]{1,200}$"
        },
        "properties": {
          "type": "object",
          "description": "Other properties if needed"
        },
        "sinkFieldList": {
          "type": "array",
          "description": "Sink field list",
          "items": {
            "$ref": "#/definitions/Sink field info",
            "originalRef": "Sink field info"
          }
        },
        "sinkName": {
          "type": "string",
          "description": "Sink name, unique in one stream",
          "pattern": "^[a-zA-Z0-9_.-]{1,100}$"
        },
        "sinkType": {
          "type": "string",
          "description": "Sink type, including: HIVE, ES, etc."
        },
        "sortConsumerGroup": {
          "type": "string",
          "description": "Sort consumer group"
        },
        "sortTaskName": {
          "type": "string",
          "description": "Sort task name"
        },
        "startProcess": {
          "type": "boolean",
          "description": "Whether to start the process after saving or updating. Default is false"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Stream sink request"
    },
    "Stream source info": {
      "type": "object",
      "properties": {
        "agentIp": {
          "type": "string",
          "description": "Ip of the agent running the task"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Creator"
        },
        "dataNodeName": {
          "type": "string",
          "description": "Data node name"
        },
        "fieldList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stream field configuration",
            "originalRef": "Stream field configuration"
          }
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Source id"
        },
        "ignoreParseError": {
          "type": "boolean",
          "description": "Whether to ignore the parse errors of field value, true as default"
        },
        "inlongClusterName": {
          "type": "string",
          "description": "Inlong cluster name"
        },
        "inlongClusterNodeTag": {
          "type": "string",
          "description": "Inlong cluster node tag"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id"
        },
        "modifier": {
          "type": "string",
          "description": "Modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "postNodes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "preNodes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "previousStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Previous status"
        },
        "properties": {
          "type": "object",
          "description": "Properties for source"
        },
        "serializationType": {
          "type": "string",
          "description": "Data Serialization, support: csv, json, canal, avro, etc"
        },
        "snapshot": {
          "type": "string",
          "description": "Snapshot of this source task"
        },
        "sourceName": {
          "type": "string",
          "description": "Source name, unique in one stream"
        },
        "sourceType": {
          "type": "string",
          "description": "Source type, including: FILE, KAFKA, etc."
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "subSourceList": {
          "type": "array",
          "description": "Sub source information of existing agents",
          "items": {
            "$ref": "#/definitions/SubSourceDTO",
            "originalRef": "SubSourceDTO"
          }
        },
        "templateId": {
          "type": "integer",
          "format": "int32",
          "description": "Null if not a sub source"
        },
        "uuid": {
          "type": "string",
          "description": "Mac uuid of the agent running the task"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version"
        }
      },
      "title": "Stream source info"
    },
    "Stream source request": {
      "type": "object",
      "properties": {
        "agentIp": {
          "type": "string",
          "description": "Ip of the agent running the task"
        },
        "dataNodeName": {
          "type": "string",
          "description": "Data node name"
        },
        "fieldList": {
          "type": "array",
          "description": "Field list, only support when inlong group in light weight mode",
          "items": {
            "$ref": "#/definitions/Stream field configuration",
            "originalRef": "Stream field configuration"
          }
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inlongClusterName": {
          "type": "string",
          "description": "Inlong cluster name",
          "pattern": "^[a-z0-9_.-]{1,128}$"
        },
        "inlongClusterNodeGroup": {
          "type": "string",
          "description": "Inlong cluster node label for filtering stream source collect task",
          "pattern": "^[a-z0-9_.-]{1,128}$"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id",
          "pattern": "^[a-zA-Z0-9_.-]{4,200}$"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id",
          "pattern": "^[a-zA-Z0-9_.-]{1,200}$"
        },
        "properties": {
          "type": "object",
          "description": "Other properties if needed"
        },
        "serializationType": {
          "type": "string",
          "description": "Serialization type, support: csv, json, canal, avro, etc"
        },
        "snapshot": {
          "type": "string",
          "description": "Snapshot of the source task"
        },
        "sourceName": {
          "type": "string",
          "description": "Source name, unique in one stream",
          "pattern": "^[a-zA-Z0-9_.-]{1,100}$"
        },
        "sourceType": {
          "type": "string",
          "description": "Source type, including: FILE, KAFKA, etc."
        },
        "uuid": {
          "type": "string",
          "description": "Mac uuid of the agent running the task"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version"
        }
      },
      "title": "Stream source request"
    },
    "Stream transform request": {
      "type": "object",
      "properties": {
        "fieldList": {
          "type": "array",
          "description": "Field list",
          "items": {
            "$ref": "#/definitions/Stream field configuration",
            "originalRef": "Stream field configuration"
          }
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id",
          "pattern": "^[a-zA-Z0-9_.-]{4,200}$"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "Inlong stream id",
          "pattern": "^[a-zA-Z0-9_.-]{1,200}$"
        },
        "postNodeNames": {
          "type": "string",
          "description": "Post node names of transform in this stream, join by ','"
        },
        "preNodeNames": {
          "type": "string",
          "description": "Pre node names of transform in this stream, join by ','"
        },
        "transformDefinition": {
          "type": "string",
          "description": "Transform definition in json type"
        },
        "transformName": {
          "type": "string",
          "description": "Transform name, unique in one stream",
          "pattern": "^[a-zA-Z0-9_.-]{1,100}$"
        },
        "transformType": {
          "type": "string",
          "description": "Transform type, including: splitter, filter, joiner, etc."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version of transform"
        }
      },
      "title": "Stream transform request"
    },
    "StreamHeartbeat": {
      "type": "object",
      "properties": {
        "inlongGroupId": {
          "type": "string"
        },
        "inlongStreamId": {
          "type": "string"
        },
        "metric": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "title": "StreamHeartbeat"
    },
    "StreamResourceProcessForm": {
      "title": "StreamResourceProcessForm",
      "allOf": [
        {
          "$ref": "#/definitions/BaseProcessForm",
          "originalRef": "BaseProcessForm"
        },
        {
          "type": "object",
          "properties": {
            "groupInfo": {
              "$ref": "#/definitions/Inlong group info",
              "originalRef": "Inlong group info"
            },
            "groupOperateType": {
              "type": "string",
              "enum": [
                "DELETE",
                "INIT",
                "RESTART",
                "SUSPEND"
              ]
            },
            "streamInfo": {
              "$ref": "#/definitions/Inlong stream info",
              "originalRef": "Inlong stream info"
            }
          },
          "title": "StreamResourceProcessForm"
        }
      ]
    },
    "SubSourceDTO": {
      "type": "object",
      "properties": {
        "agentIp": {
          "type": "string",
          "description": "Agent ip of sub source"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "stream source id"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of sub source"
        },
        "templateId": {
          "type": "integer",
          "format": "int32",
          "description": "Template source id this sub source belongs to"
        }
      },
      "title": "SubSourceDTO"
    },
    "Task count response": {
      "type": "object",
      "properties": {
        "totalApproveCount": {
          "type": "integer",
          "format": "int32",
          "description": "Count of approved"
        },
        "totalPendingCount": {
          "type": "integer",
          "format": "int32",
          "description": "Count of awaiting approval"
        },
        "totalRejectCount": {
          "type": "integer",
          "format": "int32",
          "description": "Count of dismissed data"
        },
        "totalTransferCount": {
          "type": "integer",
          "format": "int32",
          "description": "Count of transfers"
        }
      },
      "title": "Task count response"
    },
    "Task response": {
      "type": "object",
      "properties": {
        "applicant": {
          "type": "string",
          "description": "Applicant name"
        },
        "approvers": {
          "type": "array",
          "description": "Approver list",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string",
          "description": "Task display name"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time"
        },
        "extParams": {
          "type": "object",
          "description": "Extended Information"
        },
        "formData": {
          "type": "object",
          "description": "Current task form"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Task ID"
        },
        "name": {
          "type": "string",
          "description": "Task name"
        },
        "operator": {
          "type": "string",
          "description": "Actual operation approver"
        },
        "processDisplayName": {
          "type": "string",
          "description": "Process display name"
        },
        "processId": {
          "type": "integer",
          "format": "int32",
          "description": "Process ID"
        },
        "processName": {
          "type": "string",
          "description": "Process name"
        },
        "remark": {
          "type": "string",
          "description": "Remarks info"
        },
        "showInList": {
          "type": "object",
          "description": "Extra information shown in the list"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time"
        },
        "status": {
          "type": "string",
          "description": "Task status",
          "enum": [
            "APPROVED",
            "CANCELED",
            "COMPLETED",
            "FAILED",
            "PENDING",
            "REJECTED",
            "SKIPPED",
            "TERMINATED",
            "TRANSFERRED"
          ]
        },
        "type": {
          "type": "string",
          "description": "Task type"
        }
      },
      "title": "Task response"
    },
    "TaskExecuteLog": {
      "type": "object",
      "properties": {
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time"
        },
        "listenerExecuteLogs": {
          "type": "array",
          "description": "Listener execution logs",
          "items": {
            "$ref": "#/definitions/ListenerExecuteLog",
            "originalRef": "ListenerExecuteLog"
          }
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time"
        },
        "status": {
          "type": "string",
          "description": "Execution status, such as complete: COMPLETE; failure: FAILED; processing: PENDING"
        },
        "taskDisplayName": {
          "type": "string",
          "description": "Task name"
        },
        "taskId": {
          "type": "integer",
          "format": "int32",
          "description": "Task ID"
        },
        "taskType": {
          "type": "string",
          "description": "Task type"
        }
      },
      "title": "TaskExecuteLog"
    },
    "TaskInfo": {
      "type": "object",
      "properties": {
        "dbname": {
          "type": "string"
        },
        "dbport": {
          "type": "integer",
          "format": "int32"
        },
        "dbtype": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "task id"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "inlong groupid"
        },
        "inlongStreamId": {
          "type": "string",
          "description": "inlong streamId"
        },
        "ip": {
          "type": "string",
          "description": "ip"
        },
        "onceLimit": {
          "type": "integer",
          "format": "int32",
          "description": "the limit of one batch"
        },
        "password": {
          "type": "string",
          "description": "password"
        },
        "retryTimes": {
          "type": "integer",
          "format": "int32",
          "description": "retry times if task failes"
        },
        "sqlStatement": {
          "type": "string",
          "description": "sql"
        },
        "timeLimit": {
          "type": "integer",
          "format": "int32",
          "description": "task will be forced out after time limit"
        },
        "totalLimit": {
          "type": "integer",
          "format": "int32",
          "description": "total limit of data lines"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "task type"
        },
        "user": {
          "type": "string",
          "description": "user"
        }
      },
      "title": "TaskInfo"
    },
    "TaskRequest": {
      "type": "object",
      "properties": {
        "agentIp": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "commandInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandEntity",
            "originalRef": "CommandEntity"
          }
        },
        "pullJobType": {
          "type": "integer",
          "format": "int32"
        },
        "uuid": {
          "type": "string"
        }
      },
      "title": "TaskRequest"
    },
    "TaskResult": {
      "type": "object",
      "properties": {
        "cmdConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CmdConfig",
            "originalRef": "CmdConfig"
          }
        },
        "dataConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataConfig",
            "originalRef": "DataConfig"
          }
        }
      },
      "title": "TaskResult"
    },
    "TaskSnapshotMessage": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "integer",
          "format": "int32"
        },
        "snapshot": {
          "type": "string"
        }
      },
      "title": "TaskSnapshotMessage"
    },
    "TaskSnapshotRequest": {
      "type": "object",
      "properties": {
        "agentIp": {
          "type": "string"
        },
        "reportTime": {
          "type": "string",
          "format": "date-time"
        },
        "snapshotList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskSnapshotMessage",
            "originalRef": "TaskSnapshotMessage"
          }
        },
        "uuid": {
          "type": "string"
        }
      },
      "title": "TaskSnapshotRequest"
    },
    "Tenant Cluster tag request": {
      "type": "object",
      "properties": {
        "clusterTag": {
          "type": "string",
          "description": "Cluster tag",
          "pattern": "^[a-z0-9_.-]{1,128}$"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "tenant": {
          "type": "string",
          "description": "Inlong tenant which clusters"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Tenant Cluster tag request"
    },
    "Tenant cluster tag response": {
      "type": "object",
      "properties": {
        "clusterTag": {
          "type": "string",
          "description": "Cluster tag"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of in creator"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "modifier": {
          "type": "string",
          "description": "Name of in modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "tenant": {
          "type": "string",
          "description": "Tenant"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Tenant cluster tag response"
    },
    "Tenant paging query request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "keyword": {
          "type": "string",
          "description": "Keyword"
        },
        "listByLoginUser": {
          "type": "boolean",
          "description": "Whether list tenant info of login user"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "tenantList": {
          "type": "array",
          "description": "Tenant list",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Tenant paging query request"
    },
    "Tenant request": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the tenant"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "name": {
          "type": "string",
          "description": "Tenant name",
          "pattern": "^[A-Za-z0-9_-]{1,256}$"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Tenant request"
    },
    "Tenant user paging query request": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "integer",
          "format": "int32",
          "description": "If disabled"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "keyword": {
          "type": "string",
          "description": "keyword of tenant"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "roleCode": {
          "type": "string",
          "description": "Role code"
        },
        "tenantList": {
          "type": "array",
          "description": "Tenant list",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "string",
          "description": "User name"
        }
      },
      "title": "Tenant user paging query request"
    },
    "Tenant user role request": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "integer",
          "format": "int32",
          "description": "If disabled"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "roleCode": {
          "type": "string",
          "description": "Role code"
        },
        "tenant": {
          "type": "string",
          "description": "Tenant"
        },
        "username": {
          "type": "string",
          "description": "User name"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Tenant user role request"
    },
    "Topic": {
      "type": "object",
      "properties": {
        "partitionCnt": {
          "type": "integer",
          "format": "int32"
        },
        "topic": {
          "type": "string"
        },
        "topicProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "Topic"
    },
    "Update result info": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the current record"
        },
        "success": {
          "type": "boolean",
          "description": "Update result, true or false"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the current record after updating"
        }
      },
      "title": "Update result info"
    },
    "User info": {
      "type": "object",
      "required": [
        "accountType",
        "validDays"
      ],
      "properties": {
        "accountType": {
          "type": "integer",
          "format": "int32",
          "description": "Account type: 0 - manager, 1 - operator"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of creator"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        },
        "encryptVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Encryption key version"
        },
        "extParams": {
          "type": "string",
          "description": "Extension json info"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "modifier": {
          "type": "string",
          "description": "Name of modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "description": "Username"
        },
        "password": {
          "type": "string",
          "description": "User password"
        },
        "privateKey": {
          "type": "string",
          "description": "Private key"
        },
        "publicKey": {
          "type": "string",
          "description": "Public key"
        },
        "roles": {
          "type": "array",
          "description": "User roles",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "secretKey": {
          "type": "string",
          "description": "Secret key"
        },
        "status": {
          "type": "string",
          "description": "User status, valid or not"
        },
        "tenant": {
          "type": "string",
          "description": "Login Tenant"
        },
        "validDays": {
          "type": "integer",
          "format": "int32",
          "description": "Valid days",
          "minimum": 1,
          "exclusiveMinimum": false
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "User info"
    },
    "User info request": {
      "type": "object",
      "required": [
        "accountType",
        "name",
        "validDays"
      ],
      "properties": {
        "accountType": {
          "type": "integer",
          "format": "int32",
          "description": "Account type: 0 - manager, 1 - operator",
          "minimum": 0,
          "maximum": 9223372036854775807,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "encryptVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Encryption key version"
        },
        "extParams": {
          "type": "string",
          "description": "Extension json info"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "keyword": {
          "type": "string",
          "description": "Keyword, can be user name"
        },
        "name": {
          "type": "string",
          "description": "User name"
        },
        "newPassword": {
          "type": "string",
          "description": "New password, is required if needs updated"
        },
        "orderField": {
          "type": "string",
          "description": "Order field, support create_time and modify_time, default is create_time"
        },
        "orderType": {
          "type": "string",
          "description": "Order type, only support asc and desc, default is desc"
        },
        "pageNum": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number, default is 1"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Page size, default is 10"
        },
        "password": {
          "type": "string",
          "description": "User password"
        },
        "privateKey": {
          "type": "string",
          "description": "Private key"
        },
        "publicKey": {
          "type": "string",
          "description": "Public key"
        },
        "secretKey": {
          "type": "string",
          "description": "Secret key"
        },
        "validDays": {
          "type": "integer",
          "format": "int32",
          "description": "Valid days",
          "minimum": 1,
          "exclusiveMinimum": false
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "User info request"
    },
    "Workflow Approver response": {
      "type": "object",
      "properties": {
        "approvers": {
          "type": "string",
          "description": "Workflow approvers, separate with commas(,)"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "type": "string",
          "description": "Name of creator"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "modifier": {
          "type": "string",
          "description": "Name of modifier"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "processName": {
          "type": "string",
          "description": "Workflow process name"
        },
        "taskName": {
          "type": "string",
          "description": "Workflow task name"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Workflow Approver response"
    },
    "Workflow approval request": {
      "type": "object",
      "properties": {
        "form": {
          "description": "Form information",
          "$ref": "#/definitions/BaseTaskForm",
          "originalRef": "BaseTaskForm"
        },
        "remark": {
          "type": "string",
          "description": "Remarks info"
        },
        "transferTo": {
          "type": "array",
          "description": "Transferor persons",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Workflow approval request"
    },
    "Workflow approver request": {
      "type": "object",
      "properties": {
        "approvers": {
          "type": "string",
          "description": "Workflow approvers, separate with commas(,)"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Primary key"
        },
        "processName": {
          "type": "string",
          "description": "Workflow process name"
        },
        "taskName": {
          "type": "string",
          "description": "Workflow task name"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Version number"
        }
      },
      "title": "Workflow approver request"
    },
    "Workflow brief info": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Process display name"
        },
        "name": {
          "type": "string",
          "description": "Process name"
        },
        "startEvent": {
          "description": "Process start node",
          "$ref": "#/definitions/Workflow element info",
          "originalRef": "Workflow element info"
        },
        "type": {
          "type": "string",
          "description": "Process type"
        }
      },
      "title": "Workflow brief info"
    },
    "Workflow element info": {
      "type": "object",
      "properties": {
        "approvers": {
          "type": "array",
          "description": "Approvers name",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string",
          "description": "Node display name"
        },
        "name": {
          "type": "string",
          "description": "Node name"
        },
        "next": {
          "type": "array",
          "description": "Next approval node",
          "items": {
            "$ref": "#/definitions/Workflow element info",
            "originalRef": "Workflow element info"
          }
        },
        "status": {
          "type": "string",
          "description": "Status of the current node",
          "enum": [
            "APPROVED",
            "CANCELED",
            "COMPLETED",
            "FAILED",
            "PENDING",
            "REJECTED",
            "SKIPPED",
            "TERMINATED",
            "TRANSFERRED"
          ]
        }
      },
      "title": "Workflow element info"
    },
    "Workflow event log response": {
      "type": "object",
      "properties": {
        "async": {
          "type": "integer",
          "format": "int32",
          "description": "Is it synchronized"
        },
        "elementDisplayName": {
          "type": "string",
          "description": "Element display name"
        },
        "elementName": {
          "type": "string",
          "description": "Element name"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time"
        },
        "event": {
          "type": "string",
          "description": "Event name"
        },
        "eventType": {
          "type": "string",
          "description": "Event type"
        },
        "exception": {
          "type": "string",
          "description": "Exception message"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "inlongGroupId": {
          "type": "string",
          "description": "Inlong group id"
        },
        "ip": {
          "type": "string",
          "description": "Execute IP"
        },
        "listener": {
          "type": "string",
          "description": "Listener name"
        },
        "processDisplayName": {
          "type": "string",
          "description": "Process display name"
        },
        "processId": {
          "type": "integer",
          "format": "int32",
          "description": "Process id"
        },
        "processName": {
          "type": "string",
          "description": "Process name "
        },
        "remark": {
          "type": "string",
          "description": "Remark"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time "
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status"
        },
        "taskId": {
          "type": "integer",
          "format": "int32",
          "description": "Task id"
        }
      },
      "title": "Workflow event log response"
    },
    "Workflow operation request": {
      "type": "object",
      "properties": {
        "applicant": {
          "type": "string",
          "description": "Applicant name"
        },
        "form": {
          "description": "Form information",
          "$ref": "#/definitions/BaseProcessForm",
          "originalRef": "BaseProcessForm"
        },
        "name": {
          "type": "string",
          "description": "Process name",
          "enum": [
            "APPLY_CONSUME_PROCESS",
            "APPLY_GROUP_PROCESS",
            "CREATE_GROUP_RESOURCE",
            "CREATE_STREAM_RESOURCE",
            "DELETE_GROUP_PROCESS",
            "DELETE_STREAM_RESOURCE",
            "RESTART_GROUP_PROCESS",
            "RESTART_STREAM_RESOURCE",
            "SUSPEND_GROUP_PROCESS",
            "SUSPEND_STREAM_RESOURCE"
          ]
        },
        "remark": {
          "type": "string",
          "description": "Remarks information"
        }
      },
      "title": "Workflow operation request"
    },
    "Workflow result info": {
      "type": "object",
      "properties": {
        "newTasks": {
          "type": "array",
          "description": "Newly generated tasks",
          "items": {
            "$ref": "#/definitions/Task response",
            "originalRef": "Task response"
          }
        },
        "processInfo": {
          "description": "Process info",
          "$ref": "#/definitions/Process response",
          "originalRef": "Process response"
        }
      },
      "title": "Workflow result info"
    },
    "WorkflowExecuteLog": {
      "type": "object",
      "properties": {
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time"
        },
        "processDisplayName": {
          "type": "string",
          "description": "Process name"
        },
        "processId": {
          "type": "integer",
          "format": "int32",
          "description": "Process ID"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time"
        },
        "status": {
          "type": "string",
          "description": "Process status: same task status, such as processing: PROCESSING, completed: COMPLETED, rejected: REJECTED, cancelled: CANCELED, terminated: TERMINATED"
        },
        "taskExecuteLogs": {
          "type": "array",
          "description": "Task execution logs",
          "items": {
            "$ref": "#/definitions/TaskExecuteLog",
            "originalRef": "TaskExecuteLog"
          }
        }
      },
      "title": "WorkflowExecuteLog"
    },
    "db collector report task request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "md5": {
          "type": "string",
          "description": "md5"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "offset"
        },
        "state": {
          "type": "integer",
          "format": "int32",
          "description": "state"
        },
        "version": {
          "type": "string",
          "description": "version"
        }
      },
      "title": "db collector report task request"
    },
    "db collector request": {
      "type": "object",
      "properties": {
        "md5": {
          "type": "string",
          "description": "md5"
        },
        "version": {
          "type": "string",
          "description": "version"
        }
      },
      "title": "db collector request"
    },
    "db collector task info": {
      "type": "object",
      "properties": {
        "data": {
          "description": "task info detail",
          "$ref": "#/definitions/TaskInfo",
          "originalRef": "TaskInfo"
        },
        "md5": {
          "type": "string",
          "description": "md5"
        },
        "returnCode": {
          "type": "integer",
          "format": "int32",
          "description": "return code"
        },
        "version": {
          "type": "string",
          "description": "version"
        }
      },
      "title": "db collector task info"
    }
  }
}