<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://inlong.apache.org/zh-CN/blog</id>
    <title>Apache InLong Blog</title>
    <updated>2023-03-23T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://inlong.apache.org/zh-CN/blog"/>
    <subtitle>Apache InLong Blog</subtitle>
    <icon>https://inlong.apache.org/zh-CN/img/logo.svg</icon>
    <entry>
        <title type="html"><![CDATA[1.6.0 版本发布]]></title>
        <id>https://inlong.apache.org/zh-CN/blog/2023/03/23/release-1.6.0</id>
        <link href="https://inlong.apache.org/zh-CN/blog/2023/03/23/release-1.6.0"/>
        <updated>2023-03-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Apache InLong（应龙） 最近发布了 1.6.0 版本，该版本关闭了约 202+ 个issue，包含 9+ 个大特性和 80+ 个优化。主要完成了新增 Kudu 数据流向、完善 Redis 数据流向、增加 MQ 缓存集群 Selector 策略、优化 Audit ID 分配规则、新增数据节点链接性测试、优化 Sort Audit 对账基准时间、Audit 支持使用 Kafka 缓存审计数据等。]]></summary>
        <content type="html"><![CDATA[<p>Apache InLong（应龙） 最近发布了 1.6.0 版本，该版本关闭了约 202+ 个issue，包含 9+ 个大特性和 80+ 个优化。主要完成了新增 Kudu 数据流向、完善 Redis 数据流向、增加 MQ 缓存集群 Selector 策略、优化 Audit ID 分配规则、新增数据节点链接性测试、优化 Sort Audit 对账基准时间、Audit 支持使用 Kafka 缓存审计数据等。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="关于-apache-inlong">关于 Apache InLong<a href="#关于-apache-inlong" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>作为业界首个一站式开源海量数据集成框架，Apache InLong（应龙） 提供了自动、安全、可靠和高性能的数据传输能力，方便业务快速构建基于流式的数据分析、建模和应用。目前 InLong 正广泛应用于广告、支付、社交、游戏、人工智能等各个行业领域，服务上千个业务，其中高性能场景数据规模超百万亿条/天，高可靠场景数据规模超十万亿条/天。</p><p>InLong 项目定位的核心关键词是“一站式”和“海量数据”。对于“一站式”，我们希望屏蔽技术细节、提供完整数据集成及配套服务，实现开箱即用；对于“海量数据”，我们希望通过架构上的数据链路分层、全组件可扩展、自带多集群管理等优势，在百万亿条/天的基础上，稳定支持更大规模的数据量。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="160-版本总览">1.6.0 版本总览<a href="#160-版本总览" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>Apache InLong（应龙） 最近发布了 1.6.0 版本，该版本关闭了约 202+ 个issue，包含 9+ 个大特性和 80+ 个优化。主要完成了新增 Kudu 数据流向、增加 MQ 缓存集群级别 Selector 策略、优化 Audit ID 分配规则、新增数据节点链接性测试、优化 Sort 关于 Audit 对账基准时间、Audit 支持使用 Kafka 缓存审计数据等。该版本还完成了大量其它特性，主要包括：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="agent-模块">Agent 模块<a href="#agent-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>增强文件采集稳定性，修复多个采集 Bug </li><li>修复 MQTT 、MongoDB 等多个 Bug</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dataproxy-模块">DataProxy 模块<a href="#dataproxy-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>增加 MQ 缓存集群 Selector 策略，减少 Producer 数量</li><li>为新的 MQ Sink 增加 Audit 上报</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manager-模块">Manager 模块<a href="#manager-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>优化 Audit ID 分配规则，支持多 Load 数据节点审计</li><li>优化 ClickHouse 数据节点元数据配置和管理</li><li>新增数据节点链接性测试，检查节点可用性</li><li>增加 Pulsar 多集群 Topic 订阅管理</li><li>修复 Manager 多个数据流管理、状态管理 Bug</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sort-模块">Sort 模块<a href="#sort-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>为 Kafka Source Connector 新增数据审计</li><li>Doris Connector 新增 CSV 格式及脏数据归档</li><li>支持 ARRAY、MAP、STRUCT 等复杂类型</li><li>优化 Pulsar Connector 解决数据丢失问题</li><li>修复 Canal-JSON 元数据字段乱序写入问题</li><li>优化 Sort 关于 Audit 对账基准时间，对齐对账</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dashboard-模块">Dashboard 模块<a href="#dashboard-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>持续优化 Dashboard 体验，降低初次部署理解门槛</li><li>增加 Redis、Kudu 等数据节点管理</li><li>优化 PostgreSQL 、Kafka、Redis 等数据节点参数</li><li>简化 Agent 节点 IP 选取策略</li><li>增加多个数据节点链接性测试页面</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="其它">其它<a href="#其它" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>Audit 支持使用 Kafka 缓存审计数据</li><li>Audit 统一从 Manager 获取 MQ 集群</li><li>优化 Standalone、Docker-compose 、Kubernetes 等部署步骤</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="160-版本特性介绍">1.6.0 版本特性介绍<a href="#160-版本特性介绍" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新增-kudu-数据流向">新增 Kudu 数据流向<a href="#新增-kudu-数据流向" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>Apache Kudu 是由 Cloudera 开源的存储引擎，可以同时提供低延迟的随机读写和高效的数据分析能力。在 1.6.0 版本中， InLong 支持了 Kudu 数据流向，包括新增 Kudu Connector、元数据管理、指标、Dashboard 页面等。Kudu 数据流向由 @featzhang 独立参与和完整贡献，感兴趣的用户可以进行安装体验。
<img loading="lazy" alt="1.6.0-create-kudu" src="/zh-CN/assets/images/1.6.0-create-kudu-36e66939d4032f4839fc1b5984b5752e.png" width="1470" height="1031" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="完善-redis-数据流向">完善 Redis 数据流向<a href="#完善-redis-数据流向" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>Redis 是很流行的开源内存数据库，拥有高性能和丰富的数据结构，在 1.6.0 版本， InLong 完善了 Redis 数据流向，包括在 Redis Connector 中增加 SinkFunction、元数据管理、指标和 Dashboard 页面等，完整支持了 Redis 的 Plain、Hash、Bitmap 等数据格式, 并通过 SchemaMapping 机制实现 Redis Schema 转换。Redis 数据流向通过 Schema 映射模式，可以将 Schema 转换为不同的 <a href="https://redis.io/docs/data-types/tutorial/" target="_blank" rel="noopener noreferrer">Redis Data-Type</a>  。 Redis 数据流向主要由 @featzhang 独立参与和完整贡献，详见 <a href="https://github.com/apache/inlong/issues/7060" target="_blank" rel="noopener noreferrer">INLONG-7060</a> 。
<img loading="lazy" alt="1.6.0-update-redis" src="/zh-CN/assets/images/1.6.0-update-redis-017cd2d29c513ca867bfef88f9bf8ea6.png" width="755" height="792" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增加-mq-缓存集群-selector-策略">增加 MQ 缓存集群 Selector 策略<a href="#增加-mq-缓存集群-selector-策略" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>多 MQ 集群场景下，如果 DataProxy 同时连接所有 MQ 集群，会导致 MQ 集群的 Producer 数暴增，同时导致 Zookeeper 元数据超量，进而引发 OutOfMemory。在 1.6.0 版本中，InLong 增加了 MQ 缓存集群级别 Selector 策略（主要针对 Apache Pulsar），DataProxy 节点可以只选择同一个 Tag 下的部分 MQ 集群进行生产，从而降低 Producer 连接数和 Zookeeper 元数据规模。该特性主要是由 @luchunliang 开发完成，详见 <a href="https://github.com/apache/inlong/pull/7236" target="_blank" rel="noopener noreferrer">INLONG-7231</a> 。
<img loading="lazy" alt="1.6.0-mq-selector" src="/zh-CN/assets/images/1.6.0-mq-selector-80659d1793454422d4f75feaa31eaed7.png" width="1468" height="447" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="优化-audit-id-分配规则">优化 Audit ID 分配规则<a href="#优化-audit-id-分配规则" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在 InLong Audit 原有的设计的中，每个模块的接收与发送分别为一个独立的审计项 ID，用于记录模块级别的数据发送和数据接收量。该方案存在一个缺陷，如果 InLong Sort 同时向多个目标端分拣数据（比如同时写入 Hive 和 Clickhouse），那一个审计项 ID 对于 Sort  来说无法区分不同的数据流向。在 1.6.0 版本中，优化了 Audit ID 分配规则，不同的数据流向在 Sort 分拣中拥有不同的审计项 ID，实现了对同个数据流多个分拣目标的数据审计。该特性同时涉及 Manager 和 Sort 的改动，由 @fuweng11 和 @EMsnap 一起开发实现，详见 <a href="https://github.com/apache/inlong/pull/7390" target="_blank" rel="noopener noreferrer">INLONG-7389</a>, <a href="https://github.com/apache/inlong/pull/7233" target="_blank" rel="noopener noreferrer">INLONG-7232</a> 和 <a href="https://github.com/apache/inlong/pull/7552" target="_blank" rel="noopener noreferrer">INLONG-7503</a> 。</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_hive_input'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'HIVE'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'7'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_hive_output'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'HIVE'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'8'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_clickhouse_input'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'CLICKHOUSE'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'9'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_clickhouse_output'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'CLICKHOUSE'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'10'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_es_input'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'ELASTICSEARCH'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'11'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_es_output'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'ELASTICSEARCH'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'12'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_starrocks_input'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'STARROCKS'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'13'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_starrocks_output'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'STARROCKS'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'14'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_hudi_input'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'HUDI'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'15'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_hudi_output'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'HUDI'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'16'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_iceberg_input'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'ICEBERG'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'17'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_iceberg_output'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'ICEBERG'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'18'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_hbase_input'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'HBASE'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'19'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_hbase_output'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'HBASE'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'20'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_doris_input'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'DORIS'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'21'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'audit_sort_doris_output'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'DORIS'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'22'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新增数据节点链接性测试">新增数据节点链接性测试<a href="#新增数据节点链接性测试" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在之前版本中，InLong 新增数据节点以及注册 MQ 集群，并没有判断集群可用性。在新版本中，InLong 为主要的数据节点及 InLong 系统组件注册，新增了链接性测试，用于提前检查待注册集群，提升数据流创建易用性。该特性主要是由 @leosanqing、@bluewang 和 @fuweng11 参与开发。
<img loading="lazy" alt="1.6.0-connection-test" src="/zh-CN/assets/images/1.6.0-connection-test-ce6b8f02839f8e7cc032a48b2930e95a.png" width="894" height="794" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="优化-sort-audit-对账基准时间对齐对账">优化 Sort Audit 对账基准时间，对齐对账<a href="#优化-sort-audit-对账基准时间对齐对账" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在 1.6.0 版本之前，Sort 的对账基准时间是处理数据时的机器时间，使用该时间会造成全链路数据对账不准确。在该版本中，Sort 对账埋点借鉴了 Flink 中的 TimestampedCollector 设计，替换了原有 Pulsar Connector 中的 Simple Collector，对齐了对账指标。实现原理为在 Collector 中设置了 Timestamp 字段，当获取到由 Dataproxy 传输的 InlongMsg 数据时，先对其进行解包并提取包内每条消息的数据时间，对 Collector 中的 Timestamp 进行重置，Collector 在往下游传输消息时将重置后的数据时间作为 Audit 时间记录指标。优化后的 Sort Audit 对账指标能与 DataProxy 等其它模块对齐，该特性主要由 @Emsnap 开发。
<img loading="lazy" alt="1.6.0-sort-audit-time" src="/zh-CN/assets/images/1.6.0-sort-audit-time-7c9f9fab9863e49ab6b5167ebe522e91.png" width="1910" height="893" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="audit-支持使用-kafka-缓存审计数据">Audit 支持使用 Kafka 缓存审计数据<a href="#audit-支持使用-kafka-缓存审计数据" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>InLong Audit 是独立的子系统，对 InLong 系统的 Agent、DataProxy、Sort 模块的入流量、出流量进行实时审计对账，目前对账的粒度有分钟、小时、天三种。在之前的版本中，InLong Audit 只支持使用 Pulsar 缓存审计数据，这里会增加只熟悉 Kafka 的用户部署和使用成本，在整个  InLong Audit 设计上，MQ 类型的选择应该和数据流保持一致，避免使用不同的 MQ 类型。在 1.6.0 版本中，为了实现 Audit 模块和数据流保持使用同类型 MQ 服务，Audit 支持了使用 Kafka 缓存审计数据，实现了 MQ 服务选型的统一。该特性主要是由 @haifxu、@dockerzhang 完成。
<img loading="lazy" alt="1.6.0-audit-kafka" src="/zh-CN/assets/images/1.6.0-audit-kafka-120f70dcf6449309dd9824c5e4d7faa1.png" width="843" height="732" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="后续规划">后续规划<a href="#后续规划" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>在 1.6.0 中，Sort 模块还修复脏数据归档、指标、Connector 等多个 Bug，Dashboard 持续优化显示、审批流程等体验问题，详情可以参考 1.6.0 发布 <a href="https://github.com/apache/inlong/blob/master/CHANGES.md" target="_blank" rel="noopener noreferrer">Changelog</a> 。在后续版本中，Apache  InLong 会增加 Schema 动态感知、Schema 批量导入、Agent 安装、扩展更多数据节点等，期待更多开发者参与贡献。</p>]]></content>
        <author>
            <name>Charles Zhang</name>
            <uri>https://github.com/dockerzhang</uri>
        </author>
        <category label="Apache InLong" term="Apache InLong"/>
        <category label="Version" term="Version"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[1.5.0 版本发布]]></title>
        <id>https://inlong.apache.org/zh-CN/blog/2023/01/13/release-1.5.0</id>
        <link href="https://inlong.apache.org/zh-CN/blog/2023/01/13/release-1.5.0"/>
        <updated>2023-01-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Apache InLong（应龙）最近发布了 1.5.0 版本，该版本关闭了约 296+ 个issue，包含 12+ 个大特性和 110+ 个优化。主要完成了新增 StarRocks、Hudi、Doris、Elasticsearch 等流向、优化 Dashboard 体验、重构 MQ 管理模型、新增脏数据处理、全链路 Apache Kafka 支持、TubeMQ C++/Python SDK 支持生产等。]]></summary>
        <content type="html"><![CDATA[<p>Apache InLong（应龙）最近发布了 1.5.0 版本，该版本关闭了约 296+ 个issue，包含 12+ 个大特性和 110+ 个优化。主要完成了新增 StarRocks、Hudi、Doris、Elasticsearch 等流向、优化 Dashboard 体验、重构 MQ 管理模型、新增脏数据处理、全链路 Apache Kafka 支持、TubeMQ C++/Python SDK 支持生产等。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="关于-apache-inlong">关于 Apache InLong<a href="#关于-apache-inlong" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>作为业界首个一站式开源海量数据集成框架，Apache InLong 提供了自动、安全、可靠和高性能的数据传输能力，方便业务快速构建基于流式的数据分析、建模和应用。目前 InLong 正广泛应用于广告、支付、社交、游戏、人工智能等各个行业领域，服务上千个业务，其中高性能场景数据规模超百万亿/天，高可靠场景数据规模超十万亿/天。</p><p>InLong 项目定位的核心关键词是“一站式”和真正“海量数据”。对于“一站式”，我们希望屏蔽技术细节、提供完整数据集成及配套服务，实现开箱即用；对于“海量数据”，我们希望通过架构上的数据链路分层、全组件可扩展、自带多集群管理等优势，在百万亿/天的基础上，稳定支持更大规模的数据量。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="150-版本总览">1.5.0 版本总览<a href="#150-版本总览" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>Apache InLong 最近发布了 1.5.0 版本，该版本关闭了约 296+ 个issue，包含 12+ 个大特性和 110+ 个优化。主要完成了新增 StarRocks、Hudi、Doris、Elasticsearch 等流向、优化 Dashboard 体验、重构 MQ 管理模型、新增脏数据处理、全链路 Apache Kafka 支持、TubeMQ C++/Python SDK 支持生产等。该版本还完成了大量其它特性，主要包括：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="agent-模块">Agent 模块<a href="#agent-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持 CVM 场景下的日志采集</li><li>新增直发Pulsar、发送 DataProxy 同步异步策略</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dataproxy-模块">DataProxy 模块<a href="#dataproxy-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>重构 MQ 管理模型，支持快速扩展新的 MQ 类型</li><li>优化缓存层支持 Apache Kafka 消息队列</li><li>新增支持 BufferQueueChannel</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tubemq-模块">TubeMQ 模块<a href="#tubemq-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>增加数据发送和接收延迟统计</li><li>TubeMQ C++ SDK 支持生产</li><li>TubeMQ Python SDK 支持生产</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manager-模块">Manager 模块<a href="#manager-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>新增 Hudi 数据节点和流向管理</li><li>新增 StarRocks 数据节点和流向管理</li><li>优化 Elasticsearch 数据节点和流向管理</li><li>Manager Client 新增数据转换管理</li><li>优化  Apache Kafka 消息队列管理</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sort-模块">Sort 模块<a href="#sort-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>MySQL Load 节点存量阶段支持对无主键的表的并发读取</li><li>新增 StarRocks、Hudi、Doris、Elasticsearch 5.x 数据流向支持</li><li>为 Doris、PostgreSQL、Hive、HBase、Elasticsearch 等流向增加脏数据处理</li><li>升级 Iceberg 到 1.1.0 版本</li><li>StarRocks、PostgreSQL、Doris、Hudi 等流向支持表级别指标</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dashboard-模块">Dashboard 模块<a href="#dashboard-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>体验优化超 50 个优化点</li><li>增加 JSON、Key-Value、AVRO 格式</li><li>支持 ClickHouse 、Iceberg、Elasticsearch、MySQL 等数据节点管理页面</li><li>新增 SQLServer 、Oracle 、MongoDB、MQTT 数据源页面</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="其它">其它<a href="#其它" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>增加 Spotless 代码格式化插件及响应流水线</li><li>Docker-compose 自带 Apache Flink 环境</li><li>增加 Agent、DataProxy 的 Grafana 指标显示模板</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="150-版本特性介绍">1.5.0 版本特性介绍<a href="#150-版本特性介绍" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新增-starrockshudidoriselasticsearch-等流向">新增 StarRocks、Hudi、Doris、Elasticsearch 等流向<a href="#新增-starrockshudidoriselasticsearch-等流向" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在 1.5.0 版本中，InLong 持续扩展新的数据节点 Connector，针对社区用户使用场景，新增 StarRocks、Hudi、Doris、Elasticsearch 等流向的支持，拓展了数据入仓入湖场景。这些新增数据节点主要由 @liaorui、@featzhang、@kuansix、@LvJiancheng 等开发者贡献。
<img loading="lazy" alt="1.5.0-create-hudi-source" src="/zh-CN/assets/images/1.5.0-create-hudi-source-d2624fa14bf48794da2729583061f903.png" width="1328" height="1246" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="优化-dashboard-体验">优化 Dashboard 体验<a href="#优化-dashboard-体验" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>相比于传统的数据集成项目，InLong 新增了 Group、Stream 、数据节点等概念，初次使用 Dashboard 创建的社区用户会对整个流程有些困惑。为了降低 Dashboard 用户的使用成本，InLong 针对 Dashboard 前端页面进行了大量的优化，优化点超过 50 个，在概念、流程、展示上面进行了调整。下图为 1.5.0 中创建 Stream 的流程，相比较之前版本更加简化。Dashboard 的优化特别感谢 @leezng、@bluewang、@kinfuy，也感谢 @Charles Zhang 提供的修改建议。
<img loading="lazy" alt="1.5.0-create-dashboard-stream" src="/zh-CN/assets/images/1.5.0-create-dashboard-stream-3c3bb921a77735d2c07e4d568730b093.png" width="1500" height="434" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="重构-mq-管理模型">重构 MQ 管理模型<a href="#重构-mq-管理模型" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>为了快速支持新的消息队列服务（比如 RocketMQ）实现插件化，同时统一现有支持 Pulsar、Kafka、TubeMQ，在 1.5.0 版本中，InLong DataProxy 重构了 MQ 管理模型，所有 MQ 类型都基于 <code>MessageQueueHandler</code> 实现对应的 <code>Handler</code>。该特性的实现感谢 @woofyzhao、@luchunliang，如果需要开发新的 MQ 类型，可以参考 DataProxy 插件指引。
<img loading="lazy" alt="1.5.0-mq-handler" src="/zh-CN/assets/images/1.5.0-mq-handler-de6522ff228c5a35d74e661da04dee25.png" width="959" height="511" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="新增脏数据处理">新增脏数据处理<a href="#新增脏数据处理" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>如果入湖入仓时存在不符合数据规范的脏数据（例如字段范围超限、数据字段缺失等 ），可能会导致用户任务写入失败并不断重启。在 1.5.0 版本中，InLong 支持将不能恢复的脏数据到外部存储，包括 S3 和本地日志，同时用户可以自定义脏数据的输出端，可以配置 “是否开启脏数据归档” 与 “是否忽略写入错误”，如下为脏数据归档设计 UML 图。该特性的实现感谢 @yunqingmoswu、@Yizhou-Yang 的支持。
<img loading="lazy" alt="1.5.0-dirty-data" src="/zh-CN/assets/images/1.5.0-dirty-data-f0d44e031631c4128e14293d7fa0ec01.png" width="1500" height="577" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="全链路-apache-kafka-支持">全链路 Apache Kafka 支持<a href="#全链路-apache-kafka-支持" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在 1.5.0 版本中，完成了 DataProxy、Manager、Sort、Dashboard 模块全链路对 Apache Kafka 的支持，对于 kafka 的支持经历了两个版本，在 1.5.0 实现了生产可用，用户创建数据流时选择 Kafka 即可。该特性的实现感谢 @woofyzhao、@fuweng11、@haifxu 的支持。
<img loading="lazy" alt="1.5.0-support-kafka" src="/zh-CN/assets/images/1.5.0-support-kafka-d7c02c918440b48faa62373f2332e6db.png" width="1500" height="482" class="img_ev3q"></p><p>更多 1.5.0 版本的细节请参考 版本说明 ，其中详细列出了此版本的特性、提升和 Bug 修复。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="后续规划">后续规划<a href="#后续规划" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>在后续版本中，Apache  InLong 会增加多租户管理，规范数据流、项目、集群和用户的资源和权限，同时对多种数据源进行性能和稳定性优化、Agent 管理等，期待更多开发者参与贡献。</p>]]></content>
        <author>
            <name>Charles Zhang</name>
            <uri>https://github.com/dockerzhang</uri>
        </author>
        <category label="Apache InLong" term="Apache InLong"/>
        <category label="Version" term="Version"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[1.4.0 版本发布]]></title>
        <id>https://inlong.apache.org/zh-CN/blog/2022/11/16/release-1.4.0</id>
        <link href="https://inlong.apache.org/zh-CN/blog/2022/11/16/release-1.4.0"/>
        <updated>2022-11-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Apache InLong（应龙）是一个一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，方便业务构建基于流式的数据分析、建模和应用。 InLong 支持大数据领域的采集、汇聚、缓存和分拣功能，用户只需要简单的配置就可以把数据从数据源导入到实时计算引擎或者落地到离线存储。]]></summary>
        <content type="html"><![CDATA[<p>Apache InLong（应龙）是一个一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，方便业务构建基于流式的数据分析、建模和应用。 InLong 支持大数据领域的采集、汇聚、缓存和分拣功能，用户只需要简单的配置就可以把数据从数据源导入到实时计算引擎或者落地到离线存储。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="140-版本总览">1.4.0 版本总览<a href="#140-版本总览" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>Apache InLong 最近发布了 1.4.0 版本，该版本关闭了约 364+ 个issue，包含 16+ 个特性和 120+ 个优化。主要完成了整库实时同步至 Apache Doris、整库实时同步至 Apache Iceberg、标准架构支持 HTTP 上报、标准架构新增 MongoDB 等多种采集节点。该版本还完成了大量其它特性，主要包括：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="agent-模块">Agent 模块<a href="#agent-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>重构了 Sink 发送指标</li><li>审计上报增加数据大小</li><li>支持 Redis、MQTT、SQLServer、Oracle 、MongoDB 数据源</li><li>强化 Kubernetes 环境文件采集能力</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dataproxy-模块">DataProxy 模块<a href="#dataproxy-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>心跳上报增加服务状态、支持认证</li><li>增加 proxy-send 模式发送数据</li><li>优化数据链路埋点指标</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tubemq-模块">TubeMQ 模块<a href="#tubemq-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>增加客户端负载均衡消费组控制 API</li><li>C++ SDK 修复多个 Bug</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manager-模块">Manager 模块<a href="#manager-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>数据流 Group 和 Stream 支持扩展参数</li><li>Client 支持通过 Key 更新和删除数据流向</li><li>重构获取 Sort 集群配置信息方式</li><li>优化状态管理</li><li>Client 支持集群增删改查</li><li>集群节点上报新增协议类型</li><li>缓存层使用支持使用 Kafka</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sort-模块">Sort 模块<a href="#sort-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持 debezium-json 格式</li><li>Kafka 数据节点支持 Topic 动态感知</li><li>Hive/Hbase/Iceberg 等 connector 支持指标状态恢复</li><li>Elasticsearch 6/7、JDBC connector 增加指标状态</li><li>Iceberg sink 支持 schema revolution，能够自动建表并感知字段的增加</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dashboard-模块">Dashboard 模块<a href="#dashboard-模块" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>统一数据源、数据流向类型定义</li><li>集群管理新增 Agent 类型</li><li>增加数据节点管理</li><li>支持选择 Kafka 消息类型</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="其它">其它<a href="#其它" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>docker-compose 部署内置 Flink 环境</li><li>修复多个 aarch64 镜像 Bug</li><li>修复多个依赖安全漏洞</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="140-版本特性介绍">1.4.0 版本特性介绍<a href="#140-版本特性介绍" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="agent-新增多种数据源">Agent 新增多种数据源<a href="#agent-新增多种数据源" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在 1.4.0 版本中，Agent 支持了 Redis、MQTT、SQLServer、Oracle 、MongoDB 等数据源，使得标准架构和轻量化架构的采集能力基本对齐，用户在海量场景下也有了更多选择。这部分后端能力的支持主要由@iamsee123、@haibo-duan完成，前端部分由@bluewang完成。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="完善组件指标">完善组件指标<a href="#完善组件指标" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在 1.4.0 版本中，Agent、DataProxy、Sort 模块都有指标的优化和完善，包括 Agent 发送指标的重构，增加数据Group/Stream指标维度，修复 Prometheus Listener 指标不准确等多个问题。感谢@Keylchen、@pocozh等贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="优化-docker-compose-部署">优化 Docker-compose 部署<a href="#优化-docker-compose-部署" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>InLong 服务组件比较多，一直都有部署门槛高的问题。在 1.4.0 版本中，优化了 docker-compose 部署的兼容性，同时内置一个 Apache Flink 环境，帮助开发者快速开始创建任务。感谢@dockerzhang 针对这部分内容的优化。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="优化心跳管理">优化心跳管理<a href="#优化心跳管理" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在 1.4.0 版本中，针对服务组件的心跳继续做了大量优化，包括上报时新增数据数据协议、Agent/DataProxy 组件上报自动注册、Manager 增加心跳管理 API 、优化多个心跳状态 Bug 等。感谢@gosonzhang、@GanfengTan、@pocozh、@lucaspeng12138和@haifxu的贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持整库实时同步能力">支持整库实时同步能力<a href="#支持整库实时同步能力" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在 1.4.0 版本中，InLong 开始支持整库实时同步，跟进社区用户的需求，目前率先实现了整库实时同步至Doris、整库实时同步至Iceberg，近期社区也会将整库同步实现的具体细节分享出来。感谢@thesumery、@EMsnap、@yunqingmoswu的贡献。</p><p>更多 1.4.0 版本的细节请参考 版本说明 ，其中详细列出了此版本的特性、提升和 Bug 修复。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="后续规划">后续规划<a href="#后续规划" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在下个版本中，社区会继续增加整库同步场景、完善任务指标以及增加系统稳定性，进行标准架构和轻量化架构的压测。</p>]]></content>
        <author>
            <name>Charles Zhang</name>
            <uri>https://github.com/dockerzhang</uri>
        </author>
        <category label="Apache InLong" term="Apache InLong"/>
        <category label="Version" term="Version"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[1.3.0 版本发布]]></title>
        <id>https://inlong.apache.org/zh-CN/blog/2022/09/05/release-1.3.0</id>
        <link href="https://inlong.apache.org/zh-CN/blog/2022/09/05/release-1.3.0"/>
        <updated>2022-09-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Apache InLong（应龙）是一个一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，同时支持批和流，方便业务构建基于流式的数据分析、建模和应用。]]></summary>
        <content type="html"><![CDATA[<p>Apache InLong（应龙）是一个一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，同时支持批和流，方便业务构建基于流式的数据分析、建模和应用。
InLong 支持大数据领域的采集、汇聚、缓存和分拣功能，用户只需要简单的配置就可以把数据从数据源导入到实时计算引擎或者落地到离线存储。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="130-版本特性总览">1.3.0 版本特性总览<a href="#130-版本特性总览" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p><strong>刚刚发布的 1.3.0 版本关闭了约 410+ 个 issue，包含 110+ 个特性和 170+ 个优化。</strong> 主要包括以下内容：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增强管控能力">增强管控能力<a href="#增强管控能力" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>增加 Open API 的权限认证</li><li>支持 Agent 和 DataProxy 集群的心跳上报机制</li><li>Manager 支持对“用户”和“审批人”等角色的管理</li><li>抽象 Load 节点的操作，以支持快速扩展 Load 节点的资源</li><li>支持创建 SQLServer、Oracle 和 MySQL 的数据库和表</li><li>增强 Manager 客户端的功能，包括但不限于用户和数据节点管理</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="扩展采集节点">扩展采集节点<a href="#扩展采集节点" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持采集 TubeMQ 中的数据</li><li>支持采集 Redis 中的数据</li><li>支持采集 Doris 中的数据</li><li>支持采集无 AdminUrl 的 Pulsar 中的数据</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="优化写入节点">优化写入节点<a href="#优化写入节点" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>Kafka Sink 支持 All Changelog Mode</li><li>JDBC Sink 支持 All Changelog Mode</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持数据转换">支持数据转换<a href="#支持数据转换" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持 Union 操作符</li><li>支持 加密 UDF</li><li>支持 JSON UDF</li><li>支持 Temporal Join/Lookup Join 连接</li><li>支持 Interval Join 连接</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="强化agent功能">强化Agent功能<a href="#强化agent功能" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持正则表达式自定义换行：默认 “\n” 行结束标识，自定义正则匹配行结束标识可以实现多行合并折叠</li><li>支持 K8s 日志采集并携带集群信息</li><li>支持标准输出、节点日志采集，针对标准输出会携带容器和集群信息</li><li>支持文件内容全量和增量采集</li><li>支持自动上报心跳和注册到 Manager</li><li>支持自定义 IP 和自动获取 IP</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="其他优化">其他优化<a href="#其他优化" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>GitHub Action 检查、流水线优化</li><li>DataProxy 完善审计、指标上报等监控能力</li><li>DataProxy 新增 C++ SDK 数据上报能力</li><li>Sort 支持指标上报以及 Audit 上报</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="130-版本特性介绍">1.3.0 版本特性介绍<a href="#130-版本特性介绍" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="抽象化-load-节点操作">抽象化 Load 节点操作<a href="#抽象化-load-节点操作" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>Manager 对 Load 节点的抽象操作，以支持快速扩展 Load 节点的资源，大幅减少 Load 节点的开发时间。
该部分功能由 @ciscozhou 贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增加-manager-open-api-的权限认证">增加 Manager Open API 的权限认证<a href="#增加-manager-open-api-的权限认证" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>旧版本中 Manager Open API 可以匿名访问，新版本中使用 Apache Shiro 框架实现了基于 Basic Access Authentication 的登录认证方式，该部分功能由 @woofyzhao 贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增强对文件数据和-k8s-日志的采集">增强对文件数据和 K8s 日志的采集<a href="#增强对文件数据和-k8s-日志的采集" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>1.3.0 版本增强了对文件数据以及 K8s 数据的采集，其中文件采集支持了正则表达式自定义换行符，从而可以实现多行合并折叠。
另外新版本 Agent 支持文件内容全量和增量采集，这些功能均由 @ganfengtan 贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dataproxy-新增-c-sdk-能力">DataProxy 新增 C++ SDK 能力<a href="#dataproxy-新增-c-sdk-能力" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>DataProxy 在原 Java 客户端之外，新增了 C++ 的客户端能力，该部分功能由 @pocozh 贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sort-支持多种-udf-以及-join-操作符">Sort 支持多种 UDF 以及 join 操作符<a href="#sort-支持多种-udf-以及-join-操作符" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>Sort 支持 Temporal Join / Lookup Join / Interval Join，该部分功能由 @yunqingmoswu 贡献。</p><p>另外，大量社区用户提出需要加解密和 JSON UDF 的功能，在此版本中，@Emsnap 和 @Emhui 贡献了相关特性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sort-connector-支持指标上报功能">Sort Connector 支持指标上报功能<a href="#sort-connector-支持指标上报功能" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>新版本的 Sort Connector 中支持多种 Connector 的 Flink 内置指标上报，外部指标系统能够比如 Prometheus 能够直接获任务数据读取以及写入的条数和速率。</p><p>除此之外，新版本还支持 InLong Audit 审计数据上报，该部分功能由 @pacigong、@Emsnap、@thesumery，@Oneal65 和 @yunqingmoswu 等人贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manager-支持创建多种流向的资源">Manager 支持创建多种流向的资源<a href="#manager-支持创建多种流向的资源" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>1.3.0 版本中 Manager 增加了对部分存储资源（库表结构）的创建：</p><ul><li>创建 SQLServer 的 库和表</li><li>创建 Oracle 的库和表</li><li>创建 MySQL 的库和表</li></ul><p>以上特性均由社区爱好者 @haibo-duan 贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="其他特性及问题修复">其他特性及问题修复<a href="#其他特性及问题修复" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>更多内容，请参考 <a href="https://github.com/apache/inlong/blob/master/CHANGES.md" target="_blank" rel="noopener noreferrer">版本说明</a> ，其中详细列出了此版本的特性、提升和 Bug 修复。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlong-后续规划">Apache InLong 后续规划<a href="#apache-inlong-后续规划" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>后续版本，我们扩展更多的数据源端和存储端，覆盖更多的使用场景，并逐步提升系统的易用性和健壮性，主要包括：</p><ul><li>Agent 新增 Redis、CloudEvents、MongoDB 采集类型</li><li>统一 DataProxy 中 MQ 的处理方式</li><li>全链路支持 Apache Kafka</li></ul>]]></content>
        <author>
            <name>EMsnap</name>
            <uri>https://github.com/EMsnap</uri>
        </author>
        <category label="Apache InLong" term="Apache InLong"/>
        <category label="Version" term="Version"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[1.2.0 版本发布]]></title>
        <id>https://inlong.apache.org/zh-CN/blog/2022/06/22/release-1.2.0</id>
        <link href="https://inlong.apache.org/zh-CN/blog/2022/06/22/release-1.2.0"/>
        <updated>2022-06-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Apache InLong（应龙）是一个一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，同时支持批和流，方便业务构建基于流式的数据分析、建模和应用。]]></summary>
        <content type="html"><![CDATA[<p>Apache InLong（应龙）是一个一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，同时支持批和流，方便业务构建基于流式的数据分析、建模和应用。
InLong 支持大数据领域的采集、汇聚、缓存和分拣功能，用户只需要简单的配置就可以把数据从数据源导入到实时计算引擎或者落地到离线存储。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="120-版本特性总览">1.2.0 版本特性总览<a href="#120-版本特性总览" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p><strong>刚刚发布的 1.2.0-incubating 版本关闭了约 410+ 个 issue，包含 30+ 个特性和 190+ 个优化。</strong>
主要包括以下内容：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增强管控能力">增强管控能力<a href="#增强管控能力" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>Dashboard 和 Manager 增加集群管理能力</li><li>Dashboard 优化数据流的创建流程</li><li>Manager 支持 MQ 的插件化扩展</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="扩展采集节点">扩展采集节点<a href="#扩展采集节点" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持采集 Pulsar 中的数据</li><li>支持采集 MongoDB-CDC 中的数据</li><li>支持采集 MySQL-CDC 中的数据</li><li>支持采集 Oracle-CDC 中的数据</li><li>支持采集 PostgreSQL-CDC 中的数据</li><li>支持采集 SQLServer-CDC 中的数据</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="扩展写入节点">扩展写入节点<a href="#扩展写入节点" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持将数据写入 Kafka</li><li>支持将数据写入 HBase</li><li>支持将数据写入 PostgreSQL</li><li>支持将数据写入 Oracle</li><li>支持将数据写入 MySQL</li><li>支持将数据写入 TDSQL-PostgreSQL</li><li>支持将数据写入 Greenplum</li><li>支持将数据写入 SQLServer</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持数据转换">支持数据转换<a href="#支持数据转换" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持字符串切割</li><li>支持字符串正则替换</li><li>支持字符串正则替换第一个匹配的值</li><li>支持数据过滤</li><li>支持数据去重</li><li>支持 Regular Join</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增强系统监控功能">增强系统监控功能<a href="#增强系统监控功能" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持数据链路心跳的上报和管理</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="其他优化">其他优化<a href="#其他优化" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持 DataProxy 多集群配置的下发</li><li>GitHub Action 检查、流水线优化</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="120-版本特性介绍">1.2.0 版本特性介绍<a href="#120-版本特性介绍" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持多集群管理">支持多集群管理<a href="#支持多集群管理" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>Manager 增加了集群管理功能，支持多集群配置，解决了只能通过配置文件定义一套集群的限制，用户可根据需要在 Dashboard 创建不同类型的集群。</p><p>多集群功能主要由 @healchow、@luchunliang、@leezng 设计和实现，感谢三位贡献者。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增强对文件数据和-mysql-binlog-的采集">增强对文件数据和 MySQL Binlog 的采集<a href="#增强对文件数据和-mysql-binlog-的采集" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>1.2.0 版本支持采集完整的文件数据，同时也支持从 MySQL 的指定 Binlog 位置开始采集数据。该部分工作由 @Greedyu 完成。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持整库迁移">支持整库迁移<a href="#支持整库迁移" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>Sort 支持对整个数据库中的数据进行迁移，此特性由 @EMsnap 贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持写入-canal-格式的数据">支持写入 Canal 格式的数据<a href="#支持写入-canal-格式的数据" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>支持向 Kafka 写入 Canal 格式的数据，此特性由 @thexiay 贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="优化-manager-client-中的-http-请求方式">优化 Manager Client 中的 HTTP 请求方式<a href="#优化-manager-client-中的-http-请求方式" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>优化了 Manager Client 中执行 HTTP 请求的方式，并为 Client 增加单元测试，在减少重复代码的同时，降低维护成本。
此特性由新加入的贡献者 @leosanqing 贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持运行-sql-脚本">支持运行 SQL 脚本<a href="#支持运行-sql-脚本" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>Sort 支持运行 SQL 脚本，详见 <a href="https://github.com/apache/inlong/issues/4405" target="_blank" rel="noopener noreferrer">INLONG-4405</a> ，感谢 @gong 贡献此特性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持数据链路心跳的上报和管理">支持数据链路心跳的上报和管理<a href="#支持数据链路心跳的上报和管理" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>此版本支持数据分组、数据流及底层组件的心跳上报和管理，是后续系统各环节的状态管理的前提。此特性主要由 @baomingyu、@healchow 和 @kipshi 设计和贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manager-支持创建多种流向的资源">Manager 支持创建多种流向的资源<a href="#manager-支持创建多种流向的资源" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>1.2.0 版本中 Manager 增加了对部分存储资源的创建：</p><ul><li>创建 Kafka 的 Topic（@woofyzhao 贡献）</li><li>创建 Iceberg 的库和表（@woofyzhao 贡献）</li><li>创建 HBase 的命名空间和表（@woofyzhao 贡献）</li><li>创建 ClickHouse 的库和表（@lucaspeng12138 贡献）</li><li>创建 Elasticsearch 的索引（@lucaspeng12138 贡献）</li><li>创建 PostgreSQL 的库和表（@baomingyu 贡献）</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sort-支持轻量化架构">Sort 支持轻量化架构<a href="#sort-支持轻量化架构" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>1.2.0 版本的 Sort 做了大量重构和提升，通过引入 Flink-CDC，支持多种 Extract 和 Load 节点，同时也支持数据的转换（即 Transform）。</p><p>此特性包含非常多的子特性，主要的开发者有：@baomingyu，@EMsnap，@GanfengTan，@gong，@lucaspeng12138，@LvJiancheng，@kipshi，@thexiay，@woofyzhao，@yunqingmoswu，感谢各位的贡献。</p><p>更多特性信息，请参考：<a href="/zh-CN/blog/2022/06/16/inlong-sort-etl">InLong Sort ETL 方案解析</a>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="其他特性及问题修复">其他特性及问题修复<a href="#其他特性及问题修复" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>相关内容请参考 <a href="https://github.com/apache/inlong/blob/master/CHANGES.md" target="_blank" rel="noopener noreferrer">版本说明</a> ，其中详细列出了此版本的特性、提升和 Bug 修复。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlong-后续规划">Apache InLong 后续规划<a href="#apache-inlong-后续规划" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>后续版本，我们扩展更多的数据源端和存储端，覆盖更多的使用场景，并逐步提升系统的易用性和健壮性，主要包括：</p><ul><li>各组件的心跳上报</li><li>数据链路的状态管理</li><li>全链路审计支持写入 ClickHouse</li><li>扩展更多类型的采集节点和存储节点</li></ul>]]></content>
        <author>
            <name>healchow</name>
            <uri>https://github.com/healchow</uri>
        </author>
        <category label="Apache InLong" term="Apache InLong"/>
        <category label="Version" term="Version"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[InLong Sort ETL 方案解析]]></title>
        <id>https://inlong.apache.org/zh-CN/blog/2022/06/16/inlong-sort-etl</id>
        <link href="https://inlong.apache.org/zh-CN/blog/2022/06/16/inlong-sort-etl"/>
        <updated>2022-06-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[1. 背景]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-背景">1. 背景<a href="#1-背景" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>随着 Apache InLong(incubating) 的用户和开发者逐渐增多，更丰富的使用场景和低成本运营诉求越来越强烈，其中，InLong 全链路增加 Transform（T）的需求反馈最多。经过@yunqingmoswu、@EMsnap、@gong、@thexiay 社区开发者的调研和设计，完成了基于 Flink SQL 的 InLong Sort ETL 方案，本文将详细介绍该方案的实现细节。</p><p>首先，基于 Apache Flink SQL 主要有以下方面的考量：</p><ul><li>Flink SQL 拥有强大的表达能力带来的高可扩展性、灵活性，基本上 Flink SQL 能支持社区大多数需求场景。当 Flink SQL 内置的函数不满足需求时，我们还可通过各种UDF来扩展。</li><li>Flink SQL 相比 Flink 底层 API 实现开发成本更低，只有第一次需要实现 Flink SQL 的转换逻辑，后续可专注于 Flink SQL 能力本身的构建，比如扩展 Connector、自定义函数UDF等。</li><li>一般来说，Flink SQL 将更健壮、运行也将更稳定。原因在于 Flink SQL 屏蔽了 Flink 底层大量的细节，有强大的社区支持，并且经过大量用户的实践。</li><li>对用户来说，Flink SQL 也更加通俗易懂，特别是对使用过 SQL 用户来说，使用方式简单、熟悉，这有助于用户快速落地。</li><li>对于存量实时任务的迁移，如果其原本就是 SQL 类型的任务，尤其是 Flink SQL 任务，其迁移成本极低，部分情况下甚至都不用做任何改动。</li></ul><p>注意：本方案的所有代码，可以参考 <a href="https://github.com/apache/incubator-inlong/tree/master/inlong-sort" target="_blank" rel="noopener noreferrer">Apache InLong Sort</a> 模块，所含功能可在即将发布的 1.2.0 版本中下载使用。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-方案介绍">2. 方案介绍<a href="#2-方案介绍" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="21-方案需求">2.1 方案需求<a href="#21-方案需求" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>该方案的主要需求，是完成的 InLong Sort 模块 Transform（T）能力，包括：</p><table><thead><tr><th align="center">Transform</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">窗口内去重</td><td align="center">在一个时间窗口内对数据去重</td></tr><tr><td align="center">时间窗口聚合</td><td align="center">在一个时间窗口内对数据进行聚合操作</td></tr><tr><td align="center">时间格式转换</td><td align="center">将一个字段的值转换为目标时间格式的字符串</td></tr><tr><td align="center">字段分割</td><td align="center">将一个字段通过某个分割符分割为多个新的字段</td></tr><tr><td align="center">字符串替换</td><td align="center">将替换一个字符串字段中的部分或全部内容</td></tr><tr><td align="center">数据过滤</td><td align="center">将满足过滤条件的数据舍弃或者保留</td></tr><tr><td align="center">内容提取</td><td align="center">提取一个字段的一部分产生一个新的字段</td></tr><tr><td align="center">连接</td><td align="center">支持两表 Join</td></tr><tr><td align="center">值替换</td><td align="center">给定一个匹配值，如果该字段的值等于该值，则将其替换为目标值</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="22-使用场景">2.2 使用场景<a href="#22-使用场景" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>大数据集成的用户，在很多业务场景下都有数据转换、连接、过滤等 Transform 需求。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="23-设计目标">2.3 设计目标<a href="#23-设计目标" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>本次设计需要达到以下目标：</p><ul><li>功能性：在 InLong Sort 现有架构、数据流模型下，覆盖基本的 Transform 能力，并具备快速扩张的能力。</li><li>兼容性：新的 InLong Sort 数据模型向前兼容，确保历史任务能够正常配置运行。</li><li>可维护性：InLong Sort 数据模型转 Flink SQL 只需实现一遍，后期有新增的功能需求时，这块不需要改动，哪怕有改动也是少量改动即可支持。</li><li>可扩展性：当出现开源 Flink Connector 或者内置 Flink SQL 函数不满足需求时，可通过自定义 Flink Connector、UDF 来实现其功能扩展。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="24-基本概念">2.4 基本概念<a href="#24-基本概念" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>核心概念参照概要设计中的名词解释</p><table><thead><tr><th align="center">名称</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">InLong Dashborad</td><td align="center">Inlong 前端管理界面</td></tr><tr><td align="center">InLong Manager Client</td><td align="center">将 Manager 当中的接口进行包装，供外部用户程序调用，不经过前端 InLong Dashboard</td></tr><tr><td align="center">InLong Manager Openapi</td><td align="center">Inlong manager 与外部系统调用接口</td></tr><tr><td align="center">InLong Manager metaData</td><td align="center">Inlong manager 元数据管理，包括 group、stream 纬度的元数据信息</td></tr><tr><td align="center">InLong Manager task manager</td><td align="center">Inlong manager中管理数据源采集任务模块，管理agent的任务下发，指令下发，心跳上报</td></tr><tr><td align="center">InLong Group</td><td align="center">数据流组，包含多个数据流，一个 Group 代表一个数据接入</td></tr><tr><td align="center">InLong Stream</td><td align="center">数据流，一个数据流有具体的流向</td></tr><tr><td align="center">Stream Source</td><td align="center">流中有对应的采集端和 sink 端，本设计中只涉及到 stream source</td></tr><tr><td align="center">Stream Info</td><td align="center">Sort 中数据流向的抽象，包含该数据流的各种来源、转换、去向等</td></tr><tr><td align="center">Group Info</td><td align="center">Sort 中对数据流向的封装，一个 GroupInfo 可包含多个 Stream Info</td></tr><tr><td align="center">Node</td><td align="center">数据同步中数据源、数据转换、数据去向的抽象</td></tr><tr><td align="center">Extract Node</td><td align="center">数据同步的来源端抽象</td></tr><tr><td align="center">Load Node</td><td align="center">数据同步的去向端抽象</td></tr><tr><td align="center">MySQL Extract Node</td><td align="center">MySQL 数据来源抽象</td></tr><tr><td align="center">Kafka Load Node</td><td align="center">Kafka 数据去向抽象</td></tr><tr><td align="center">Transform Node</td><td align="center">数据同步的转换过程抽象</td></tr><tr><td align="center">Aggregate Transform Node</td><td align="center">数据同步聚合类转换过程抽象</td></tr><tr><td align="center">Node Relation</td><td align="center">数据同步中各个节点关系抽象</td></tr><tr><td align="center">Field Relation</td><td align="center">数据同步中上下游节点字段间关系的抽象</td></tr><tr><td align="center">Function</td><td align="center">转换函数的抽象，即数据同步T中各个 T 能力实现的抽象</td></tr><tr><td align="center">Substring Function</td><td align="center">字符串截取函数的抽象</td></tr><tr><td align="center">Filter Function</td><td align="center">数据过滤函数的抽象</td></tr><tr><td align="center">Function Param</td><td align="center">函数的入参抽象</td></tr><tr><td align="center">Constant Param</td><td align="center">常量参数</td></tr><tr><td align="center">Field Info</td><td align="center">节点字段</td></tr><tr><td align="center">Meta FieldInfo</td><td align="center">节点元信息字段</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="25-领域模型">2.5 领域模型<a href="#25-领域模型" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>本次设计主要涉及到以下实体：</p><p>Group、Stream、GroupInfo、StreamInfo、Node、NodeRelation、FieldRelation、Function、FilterFunction、SubstringFunction、FunctionParam、FieldInfo、MetaFieldInfo、MySQLExtractNode、KafkaLoadNode 等</p><p>为了便于理解，本小节将对实体之间关系进行建模分析。领域模型的实体对应关系说明：</p><ul><li>一个 Group 对应 1 个 GroupInfo</li><li>一个 Stream 对应 1 个 StreamInfo</li><li>一个 Group 包含 1 个或多个 Stream</li><li>一个 GroupInfo 包含 1 个或多个 StreamInfo</li><li>一个 StreamInfo 包含多个 Node</li><li>一个 StreamInfo 包含 1 个或多个 NodeRelation</li><li>一个 NodeRelation 包含 1 个或多个 FieldRelation</li><li>一个 NodeRelation 包含 0 个或多个 FilterFunction</li><li>一个 FieldRelation 包含 1 个 Function 或 1 个 FieldInfo 作为来源字段，1 个 FieldInfo 作为目标字段</li><li>一个 Function 包含 1 个或多个 FunctionParam</li></ul><p>上述关系由 UML 对象关系图可以表示为：</p><p><img loading="lazy" alt="sort_UML" src="/zh-CN/assets/images/sort_UML-896d751427509d769add998680df9516.png" width="2576" height="869" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="26-功能用例图">2.6 功能用例图<a href="#26-功能用例图" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p><img loading="lazy" alt="sort-usecase" src="/zh-CN/assets/images/sort-usecase-fb8639f9724899ab3afcbf35b8a21902.png" width="606" height="356" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-系统概要设计">3. 系统概要设计<a href="#3-系统概要设计" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="31-系统架构图">3.1 系统架构图<a href="#31-系统架构图" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p><img loading="lazy" alt="architecture" src="/zh-CN/assets/images/architecture-b4c0fb3783a6ed2f2868f534df98e74b.png" width="461" height="741" class="img_ev3q"></p><ul><li>Serialization：序列化实现模块</li><li>Deserialization：反序列化实现模块</li><li>Flink Source：自定义 Flink source实现模块</li><li>Flink Sink：自定义的 Flink sink 实现模块</li><li>Transformation：自定义的 Transform 实现模块</li><li>GroupInfo：对应 Inlong group</li><li>StreamInfo：对应 Inlong stream</li><li>Node：对数据同步中数据来源、数据转换、数据去向的抽象</li><li>FlinkSQLParser：SQL 解析器</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="32-inlong-sort-内部运行流程图">3.2 InLong Sort 内部运行流程图<a href="#32-inlong-sort-内部运行流程图" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="/zh-CN/assets/images/sort-operation-flow-77363f12a68a011beba26db9ccc6fedb.png" width="771" height="61" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="33-模块设计">3.3 模块设计<a href="#33-模块设计" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>本次设计只对原有系统增加 Flink Connector、FlinkSQL Generator 两个模块，对 Data Model 模块有修改。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="331-模块结构">3.3.1 模块结构<a href="#331-模块结构" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p><img loading="lazy" src="/zh-CN/assets/images/sort-module-structure-4dd424ae93043cb912dba69c08590b33.png" width="771" height="1011" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="332-模块划分">3.3.2 模块划分<a href="#332-模块划分" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>重要模块划分说明：</p><table><thead><tr><th align="center">名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">FlinkSQLParser</td><td align="center">用于生成 FlinkSQL 核心类，包含 GroupInfo 的引用</td></tr><tr><td align="center">GroupInfo</td><td align="center">Sort 内部对 InlongGroup 的抽象，用于封装整个 InlongGroup 同步相关信息，包含对 List\&lt;StreamInfo<!-- -->&gt;<!-- --> 的引用</td></tr><tr><td align="center">StreamInfo</td><td align="center">Sort 内部对 InlongStream 的抽象，用于封装 InlongStream 同步相关信息，包含List\&lt;Node<!-- -->&gt;<!-- -->、List\&lt;NodeRelation<!-- -->&gt;<!-- --> 的引用</td></tr><tr><td align="center">Node</td><td align="center">同步节点的顶层接口，它的各个子类实现主要用于对同步数据源、转换节点的数据封装</td></tr><tr><td align="center">ExtractNode</td><td align="center">数据extract节点抽象，继承自 Node</td></tr><tr><td align="center">LoadNode</td><td align="center">数据load节点抽象，继承自 Node</td></tr><tr><td align="center">TransformNode</td><td align="center">数据转换节点抽象，继承自 Node</td></tr><tr><td align="center">NodeRelation</td><td align="center">定义节点间的关系</td></tr><tr><td align="center">FieldRelation</td><td align="center">定义节点间字段的关系</td></tr><tr><td align="center">Function</td><td align="center">T能力执行函数的抽象</td></tr><tr><td align="center">FilterFunction</td><td align="center">用于数据过滤的 Function 抽象，继承自 Function</td></tr><tr><td align="center">SubstringFunction</td><td align="center">用于字符串截取 Function 抽象，继承自 Function</td></tr><tr><td align="center">FunctionParam</td><td align="center">用于函数参数的抽象</td></tr><tr><td align="center">ConstantParam</td><td align="center">函数常量参数的封装，继承自 FunctionParam</td></tr><tr><td align="center">FieldInfo</td><td align="center">节点字段的封装，也可做函数入参使用，继承自 FunctionParam</td></tr><tr><td align="center">MetaFieldInfo</td><td align="center">内置字段的封装，目前主要用于 canal-json 的元数据字段场景，继承自 FieldInfo</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-系统详细设计">4. 系统详细设计<a href="#4-系统详细设计" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>下面以同步 MySQL 中的数据到 Kafka 为例来说明 SQL 的生成原理。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="41-node-生成-sql">4.1 Node 生成 SQL<a href="#41-node-生成-sql" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="411-extractnode-生成-sql">4.1.1 ExtractNode 生成 SQL<a href="#411-extractnode-生成-sql" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>节点配置为：</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain"> private Node buildMySQLExtractNode() {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        List&lt;FieldInfo&gt; fields = Arrays.asList(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new FieldInfo("name", new StringFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new FieldInfo("age", new IntFormatInfo()));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return new MySqlExtractNode("1", "mysql_input", fields,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                null, null, "id",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                Collections.singletonList("tableName"), "localhost", "root", "password",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                "inlong", null, null,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                null, null);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>生成的 SQL 为：</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">TABLE</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">mysql_1</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">name</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">age</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">with</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'connector'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'mysql-cdc-inlong'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'hostname'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'localhost'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'username'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'root'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'password'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'password'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'database-name'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'inlong'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'table-name'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'tableName'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="412-transformnode-生成-sql">4.1.2 TransformNode 生成 SQL<a href="#412-transformnode-生成-sql" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>节点配置为：</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain"> List&lt;FilterFunction&gt; filters = Arrays.asList(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new SingleValueFilterFunction(EmptyOperator.getInstance(),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        new FieldInfo("age", new IntFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        LessThanOperator.getInstance(), new ConstantParam(25)),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new SingleValueFilterFunction(AndOperator.getInstance(),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        new FieldInfo("age", new IntFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        MoreThanOrEqualOperator.getInstance(), new ConstantParam(18))</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        );</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>生成的 SQL 为：</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">name</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">name</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">age</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">age</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">mysql_1</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">age</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token number">25</span><span class="token plain"> </span><span class="token operator">AND</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">age</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token number">18</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="413-loadnode-生成-sql">4.1.3 LoadNode 生成 SQL<a href="#413-loadnode-生成-sql" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>节点配置为：</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain"> private Node buildKafkaLoadNode(FilterStrategy filterStrategy) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        List&lt;FieldInfo&gt; fields = Arrays.asList(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new FieldInfo("name", new StringFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new FieldInfo("age", new IntFormatInfo())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        List&lt;FieldRelation&gt; relations = Arrays</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .asList(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        new FieldRelation(new FieldInfo("name", new StringFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                                new FieldInfo("name", new StringFormatInfo())),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        new FieldRelation(new FieldInfo("age", new IntFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                                new FieldInfo("age", new IntFormatInfo()))</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                );</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        List&lt;FilterFunction&gt; filters = Arrays.asList(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new SingleValueFilterFunction(EmptyOperator.getInstance(),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        new FieldInfo("age", new IntFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        LessThanOperator.getInstance(), new ConstantParam(25)),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new SingleValueFilterFunction(AndOperator.getInstance(),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        new FieldInfo("age", new IntFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        MoreThanOrEqualOperator.getInstance(), new ConstantParam(18))</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        );</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return new KafkaLoadNode("2", "kafka_output", fields, relations, filters,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                filterStrategy, "topic1", "localhost:9092",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new CanalJsonFormat(), null,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                null, "id");</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>生成的 SQL 为：</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">TABLE</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">kafka_3</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">name</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">age</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">with</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'connector'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'kafka-inlong'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'topic'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'topic1'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'properties.bootstrap.servers'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'localhost:9092'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'format'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'canal-json-inlong'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'canal-json-inlong.ignore-parse-errors'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'true'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'canal-json-inlong.map-null-key.mode'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'DROP'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'canal-json-inlong.encode.decimal-as-plain-number'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'true'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'canal-json-inlong.timestamp-format.standard'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'SQL'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token string" style="color:rgb(255, 121, 198)">'canal-json-inlong.map-null-key.literal'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'null'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="42-字段-t-生成-sql">4.2 字段 T 生成 SQL<a href="#42-字段-t-生成-sql" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="421-过滤算子">4.2.1 过滤算子<a href="#421-过滤算子" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>相关配置见 4.1 节点配置</p><p>生成的 SQL 为：</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">INSERT</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">INTO</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">kafka_3</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">name</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">name</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">age</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">age</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">mysql_1</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">age</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token number">25</span><span class="token plain"> </span><span class="token operator">AND</span><span class="token plain"> </span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token identifier">age</span><span class="token identifier punctuation" style="color:rgb(248, 248, 242)">`</span><span class="token plain"> </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token number">18</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="422-水位线">4.2.2 水位线<a href="#422-水位线" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>GroupInfo 完整配置如下：</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">private Node buildMySqlExtractNode() {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        List&lt;FieldInfo&gt; fields = Arrays.asList(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new FieldInfo("name", new StringFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new FieldInfo("age", new IntFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new FieldInfo("ts", new TimestampFormatInfo()));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        WatermarkField wk = new WatermarkField(new FieldInfo("ts", new TimestampFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new StringConstantParam("1"),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new TimeUnitConstantParam(TimeUnit.MINUTE));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return new MySqlExtractNode("1", "mysql_input", fields,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                wk, null, "id",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                Collections.singletonList("tableName"), "localhost", "root", "password",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                "inlong", null, null,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                null, null);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private Node buildKafkaNode() {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        List&lt;FieldInfo&gt; fields = Arrays.asList(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new FieldInfo("name", new StringFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new FieldInfo("age", new IntFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                new FieldInfo("ts", new TimestampFormatInfo()));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        List&lt;FieldRelation&gt; relations = Arrays</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                .asList(new FieldRelation(new FieldInfo("name", new StringFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                                new FieldInfo("name", new StringFormatInfo())),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        new FieldRelation(new FieldInfo("age", new IntFormatInfo()),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                                new FieldInfo("age", new IntFormatInfo()))</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                );</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return new KafkaLoadNode("2", "kafka_output", fields, relations, null, null,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                "topic", "localhost:9092", new JsonFormat(),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                1, null, "id");</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    private NodeRelation buildNodeRelation(List&lt;Node&gt; inputs, List&lt;Node&gt; outputs) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        List&lt;String&gt; inputIds = inputs.stream().map(Node::getId).collect(Collectors.toList());</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        List&lt;String&gt; outputIds = outputs.stream().map(Node::getId).collect(Collectors.toList());</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return new NodeRelation(inputIds, outputIds);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    public GroupInfo getTestObject() {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Node input = buildMySqlExtractNode();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Node output = buildKafkaNode();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        StreamInfo streamInfo = new StreamInfo("1", Arrays.asList(input, output), Collections.singletonList(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                buildNodeRelation(Collections.singletonList(input), Collections.singletonList(output))));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        return new GroupInfo("1", Collections.singletonList(streamInfo));</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Oneal65</name>
            <uri>https://github.com/Oneal65</uri>
        </author>
        <category label="Apache InLong" term="Apache InLong"/>
        <category label="Sort" term="Sort"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[1.1.0 版本发布]]></title>
        <id>https://inlong.apache.org/zh-CN/blog/2022/04/25/release-1.1.0</id>
        <link href="https://inlong.apache.org/zh-CN/blog/2022/04/25/release-1.1.0"/>
        <updated>2022-04-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Apache InLong（应龙）是一个一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，同时支持批和流，方便业务构建基于流式的数据分析、建模和应用。InLong支持大数据领域的采集、汇聚、缓存和分拣功能，用户只需要简单的配置就可以把数据从数据源导入到实时计算引擎或者落地到离线存储。]]></summary>
        <content type="html"><![CDATA[<p>Apache InLong（应龙）是一个一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，同时支持批和流，方便业务构建基于流式的数据分析、建模和应用。InLong支持大数据领域的采集、汇聚、缓存和分拣功能，用户只需要简单的配置就可以把数据从数据源导入到实时计算引擎或者落地到离线存储。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="110-版本特性总览">1.1.0 版本特性总览<a href="#110-版本特性总览" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>刚刚发布的 1.1.0-incubating 主要包括以下内容：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="管控能力增强">管控能力增强<a href="#管控能力增强" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>增加 Manager Client，支持集成 InLong 创建任务</li><li>增加 ManagerCtl 命令行工具，支持查看、创建数据流</li><li>Manager 支持下发 Agent 任务</li><li>Manager 支持下发 Sort Flink 任务</li><li>Manger 流向任务管理，支持启动、重启、暂停操作</li><li>Manager 插件化改造</li><li>Manager 元数据管理支持使用 MySQL</li><li>集群管理一期，统一集群信息注册</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据节点丰富">数据节点丰富<a href="#数据节点丰富" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>支持 Iceberg 流向入库</li><li>支持 ClickHouse 流向入库</li><li>支持 MySQL Binlog 采集</li><li>支持 Kafka 采集</li><li>Sort Standalone 支持多流向</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="配套工具建设">配套工具建设<a href="#配套工具建设" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>Dashboard 插件化改造</li><li>Kubernetes 部署优化</li><li>Standalone 部署重构</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="系统升级">系统升级<a href="#系统升级" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><ul><li>Protocol Buffers 升级</li><li>统一版本 Maven 版本依赖</li><li>修复一批依赖 CVEs 问题</li><li>DataProxy 支持 PB 压缩协议</li></ul><p>该版本关闭了约 642+ 个 issue，包含 23+ 个重大 feature 和 180+ 个 improvements。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="110-版本特性介绍">1.1.0 版本特性介绍<a href="#110-版本特性介绍" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增加-manager-client">增加 Manager Client<a href="#增加-manager-client" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>新增的 Manager Client，定义了常见的 InLong Group/Stream 操作接口，包括任务的创建、查看和删除。用户通过 Manager Client，可以将 InLong 内置到任何第三方平台中，实现统一的定制化平台建设。Manager Client 主要是由 @kipshi 、 @gong、@ciscozhou 设计和实现，感谢三位贡献者。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="增加-managerctl-命令行工具">增加 ManagerCtl 命令行工具<a href="#增加-managerctl-命令行工具" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>ManagerCtl 基于 Manager Client 开发完成，是一个操作 InLong 资源的命令行工具，可以进一步简化开发者的使用。ManagerCtl 是由 @haifxu 独立贡献，包括指引包括：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Usage: managerctl [options] [command] [command options]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Options:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-h, --help</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Get all command about managerctl.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Commands:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">create      Create resource by json file</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Usage: create [options]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">​</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">describe      Display details of one or more resources</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Usage: describe [options]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">​</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">list      Displays main information for one or more resources</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Usage: list [options]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manager-支持下发-sort-任务">Manager 支持下发 Sort 任务<a href="#manager-支持下发-sort-任务" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在之前版本，用户创建完数据流 Group/Stream 任务后，Sort 需要通过命令行提交到 Flink 集群，再去执行数据分拣工作。在 1.1.0 版本中，我们将 Sort 任务的启动、停止、挂起操作，统一到 Manager 完成，用户只需要在 Manager 部署时配置正确的 Flink 集群，当数据流审批通过后，会自动拉起 Sort 任务。该部分工作主要是由 @LvJiancheng 贡献完成。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manager-元数据保存去-zookeeper">Manager 元数据保存去 ZooKeeper<a href="#manager-元数据保存去-zookeeper" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>InLong 使用 ZooKeeper 保存数据流元数据，增加了开发者和用户的部署门槛和运维难度。在 1.1.0 版本中，我们默认将数据流元数据保存在 DB 中，ZooKeeper 只作为大规模场景下可选方案。感谢 @kipshi @yunqingmoswu 贡献了去 ZooKeeper 的 PR。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="支持-mysql-binlog-采集">支持 MySQL Binlog 采集<a href="#支持-mysql-binlog-采集" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>1.1.0 版本完整支持了从 MySQL 采集数据，支持增量和全量两种策略，用户可以在 InLong 简单配置就可以实现 MySQL 数据的采集。该部分工作是由 @EMsnap 贡献完成。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sort-新增-iceberg-clickhouse-kafka-流向入库">Sort 新增 Iceberg、 ClickHouse、 Kafka 流向入库<a href="#sort-新增-iceberg-clickhouse-kafka-流向入库" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>1.1.0 版本中增加了多种场景数据节点的入库，包括 Iceberg、 ClickHouse、 Kafka，这三种流向的支持丰富了 InLong 的使用场景。新流向的支持，主要由@chantccc @KevinWen007 @healchow 参与贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sort-standalone-支持-hiveelasticsearchkafka">Sort Standalone 支持 Hive、Elasticsearch、Kafka<a href="#sort-standalone-支持-hiveelasticsearchkafka" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>之前版本有提到，对于非 Flink 环境，我们可以通过 Sort Standalone 来进行数据流分拣。在 1.1.0 版本中，我们增加了对 Hive、ElasticSearch、Kafka 的支持，扩展了 Sort Standalone 的使用场景。Sort Standalone 主要有 @vernedeng @luchunliang 参与贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="protocol-buffers-升级">Protocol Buffers 升级<a href="#protocol-buffers-升级" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>InLong 所有组件 Protocol Buffers 依赖从 2.5.0 升级到 3.19.4，感谢 @gosonzhang @doleyzi 的贡献，为 Protocol Buffers 升级做的大量兼容和测试工作。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="inlong-on-kubernetes-优化">InLong on Kubernetes 优化<a href="#inlong-on-kubernetes-优化" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>InLong on Kubernetes 的优化工作主要包括增加 Audit、梳理配置、优化消息队列使用、优化文档使用等，方便 InLong 上云的使用。感谢 @shink 为这些优化做的贡献。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dashboard-插件化">Dashboard 插件化<a href="#dashboard-插件化" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>为了方便用户快速在 Dashboard 构建新的流向，1.1.0 版本中实现了 Dashboard 插件化，了解 JavaScript 开发者基于插件开发指引，可以快速扩展新的数据流向。这部分工作感谢 @leezng</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="其他特性及问题修复">其他特性及问题修复<a href="#其他特性及问题修复" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>相关内容请参考<a href="https://github.com/apache/incubator-inlong/blob/master/CHANGES.md" target="_blank" rel="noopener noreferrer">版本说明</a>，其中详细列出了本次版本的特性、提升 和 Bug 修复，以及具体的贡献者。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlongincubating-后续规划">Apache InLong(incubating) 后续规划<a href="#apache-inlongincubating-后续规划" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h2><p>后续版本，我们将支持轻量化的 Sort，以及扩展更多的数据源端和目标端，覆盖更多的使用场景，主要包括：</p><ul><li>Flink SQL 支持</li><li>Elasticsearch、HBase 流向支持</li></ul>]]></content>
        <author>
            <name>dockerzhang</name>
            <uri>https://github.com/dockerzhang</uri>
        </author>
        <category label="Apache InLong" term="Apache InLong"/>
        <category label="Version" term="Version"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[0.12.0 版本发布]]></title>
        <id>https://inlong.apache.org/zh-CN/blog/2022/01/04/release-0.12.0</id>
        <link href="https://inlong.apache.org/zh-CN/blog/2022/01/04/release-0.12.0"/>
        <updated>2022-01-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[InLong(应龙) : 中国神话故事里的神兽，引流入海，借喻 InLong 系统提供数据接入能力。]]></summary>
        <content type="html"><![CDATA[<p>InLong(应龙) : 中国神话故事里的神兽，引流入海，借喻 InLong 系统提供数据接入能力。</p><p>Apache InLong（应龙）是一个一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，同时支持批和流，方便业务构建基于流式的数据分析、建模和应用。InLong支持大数据领域的采集、汇聚、缓存和分拣功能，用户只需要简单的配置就可以把数据从数据源导入到实时计算引擎或者落地到离线存储。</p><p>刚刚发布的 0.12.0-incubating 主要包括以下内容：</p><ul><li>提供自动、安全、可靠和高性能的数据传输能力，同时支持批和流</li><li>对官网文档结构进行重构，方便用户根据主线查阅相关文档</li><li>全流程支持Pulsar数据流向，完成高性能、高可靠场景的全流程覆盖</li><li>全流程支持指标，包括 JMX 和 Prometheus 输出</li><li>数据审计对账一期，将审计数据写入 MySQL</li></ul><p>该版本关闭了约 120+ 个 issue，包含四个重大 feature 和 35 个 improvements。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlongincubating-简介">Apache InLong(incubating) 简介<a href="#apache-inlongincubating-简介" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p><a href="https://inlong.apache.org/zh-cn/" target="_blank" rel="noopener noreferrer">Apache InLong（应龙）</a> 是腾讯捐献给 Apache 社区的一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，方便业务构建基于流式的数据分析、建模和应用。 InLong 项目原名 TubeMQ ，专注于高性能、低成本的消息队列服务。为了进一步释放 TubeMQ 周边的生态能力，我们将项目升级为 InLong，专注打造一站式数据流接入服务平台。</p><p>Apache InLong 以腾讯内部使用的 TDBank 为原型，具有万亿级数据的接入和处理能力，整合了数据采集、汇聚、存储、分拣数据处理全流程，拥有简单易用、灵活扩展、稳定可靠等特性。</p><img loading="lazy" src="../img/inlong-structure-zh.png" align="center" alt="Apache InLong" class="img_ev3q"><p> Apache InLong 服务于数据采集到落地的整个生命周期，按数据的不同阶段提供不同的处理模块，主要包括：</p><ul><li><strong>inlong-agent</strong> ，数据采集 Agent ，支持从指定目录或文件读取常规日志，进行逐条的数据上报。后续也将扩展 DB 采集，扩展HTTP上报等能力。</li><li><strong>inlong-dataproxy</strong> ，一个基于 Flume-ng 的 Proxy 组件，支持数据发送阻塞、落盘重发，拥有将接收数据后转发到不同MQ（消息队列）的能力。</li><li><strong>inlong-tubemq</strong> ，腾讯自研的消息队列服务，专注服务大数据场景下海量数据的高性能存储和传输，在海量实践和低成本方面有着比较好的核心优势。</li><li><strong>inlong-sort</strong> ，从不同的 MQ 消费数据后进行 ETL 处理，然后将数据汇聚并写入 Hive、ClickHouse、Hbase、IceBerg 等。</li><li><strong>inlong-manager</strong> ，提供完整的数据服务管控能力，包括元数据、OpenAPI、任务流、权限等。</li><li><strong>inlong-website</strong> ，一个用于管理数据接入的前端页面，简化整个 InLong 管控平台的使用。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlongincubating-0120-主要特性">Apache InLong(incubating) 0.12.0 主要特性<a href="#apache-inlongincubating-0120-主要特性" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-打通-apache-pulsar-全链路">1. 打通 Apache Pulsar 全链路<a href="#1-打通-apache-pulsar-全链路" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>在 0.12.0 版本中，我们补齐了 FileAgent → DataProxy → Pulsar → Sort 的数据上报能力，至此，InLong 支持高性能和高可靠数据接入场景：相比高吞吐的 TubeMQ，Apache Pulsar能提供更好的数据一致性，更适用于金融、计费等对数据可靠性要求极高的场景。</p><img loading="lazy" src="/img/pulsar-arch-zh.png" align="center" alt="Report via Pulsar" class="img_ev3q"><p>感谢 @healchow、 @baomingyu、@leezng、@bruceneenhl、@ifndef-SleePy 等同学对这个特性的贡献，更多信息请参考，相关 PR 见 <a href="https://github.com/apache/incubator-inlong/issues/1310" target="_blank" rel="noopener noreferrer">INLONG-1310</a> ，使用指引见 <a href="https://inlong.apache.org/zh-CN/docs/next/quick_start/pulsar_example/" target="_blank" rel="noopener noreferrer">Pulsar使用示例</a> 。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-支持-jmx-和-prometheus-指标">2. 支持 JMX 和 Prometheus 指标<a href="#2-支持-jmx-和-prometheus-指标" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>在已有的以文件输出指标之外，InLong 的各个组件开始逐步支持 JMX 和 Prometheus 指标的输出，以提升整个系统的可见性。目前包括 Agent，DataProxy，TubeMQ，Sort-Standalone 等模块已经支持上述指标，各个模块输出的指标的文档正在整理中。</p><p>感谢 @shink，@luchunliang，@EMsnap，@gosonzhang 等同学的贡献，相关 PR 见<a href="https://github.com/apache/incubator-inlong/issues/1712" target="_blank" rel="noopener noreferrer">INLONG-1712</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1786" target="_blank" rel="noopener noreferrer">INLONG-1786</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1796" target="_blank" rel="noopener noreferrer">INLONG-1796</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1827" target="_blank" rel="noopener noreferrer">INLONG-1827</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1851" target="_blank" rel="noopener noreferrer">INLONG-1851</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1926" target="_blank" rel="noopener noreferrer">INLONG-1926</a> 。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-模块能力扩充">3. 模块能力扩充<a href="#3-模块能力扩充" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>Sort 模块增加了对 Apache Doris 存储的支持，实现了 Sort 分拣数据落地到 Apache Doris 的能力，使 InLong 的入库选择又多了一项。此外，为了丰富数据接入全流程的功能，增加了 Audit、Sort-Standalone 模块：</p><ul><li>Audit 模块提供数据流全流程的对账能力，通过数据流指标来监控系统的服务质量；</li><li>Sort-Standalone 模块是一个不基于 Flink 的数据分拣模块，给系统增加了一个轻量级的数据分拣能力，便于业务快速搭建及使用。</li></ul><p>Audit、Sort-Standalone 模块仍在开发中，版本稳定后将对外发布使用。</p><p>感谢 @huzk8，@doleyzi，@luchunliang 等同学的贡献，相关 PR 见 <a href="https://github.com/apache/incubator-inlong/issues/1821" target="_blank" rel="noopener noreferrer">INLONG-1821</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1738" target="_blank" rel="noopener noreferrer">INLONG-1738</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1889" target="_blank" rel="noopener noreferrer">INLONG-1889</a> 。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-官网文档目录重构">4. 官网文档目录重构<a href="#4-官网文档目录重构" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>0.12.0 版本对功能模块的改进之外，官网结构以及使用文档方面也做了深度调整，包括重构文档的目录结构，补充完善各个模块的功能介绍，增加文档翻译，进一步提高 InLong 官网的文档可阅读性，实现快速查找、方便阅读。这块内容可以查看官网进行了解，目前文档还在持续建设中，欢迎大家提出宝贵的意见或建议。</p><p>感谢 @bluewang，@dockerzhang，@healchow 等同学的贡献，相关 PR 见 <a href="https://github.com/apache/incubator-inlong/issues/1711" target="_blank" rel="noopener noreferrer">INLONG-1711</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1740" target="_blank" rel="noopener noreferrer">INLONG-1740</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1802" target="_blank" rel="noopener noreferrer">INLONG-1802</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1809" target="_blank" rel="noopener noreferrer">INLONG-1809</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1810" target="_blank" rel="noopener noreferrer">INLONG-1810</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1815" target="_blank" rel="noopener noreferrer">INLONG-1815</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1822" target="_blank" rel="noopener noreferrer">INLONG-1822</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1840" target="_blank" rel="noopener noreferrer">INLONG-1840</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1856" target="_blank" rel="noopener noreferrer">INLONG-1856</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1861" target="_blank" rel="noopener noreferrer">INLONG-1861</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1867" target="_blank" rel="noopener noreferrer">INLONG-1867</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1878" target="_blank" rel="noopener noreferrer">INLONG-1878</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1901" target="_blank" rel="noopener noreferrer">INLONG-1901</a> ，<a href="https://github.com/apache/incubator-inlong/issues/1939" target="_blank" rel="noopener noreferrer">INLONG-1939</a> 。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="5-其他特性及问题修复">5. 其他特性及问题修复<a href="#5-其他特性及问题修复" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>相关内容请参考<a href="https://github.com/apache/incubator-inlong/blob/0.12.0-incubating-RC0/CHANGES.md" target="_blank" rel="noopener noreferrer">版本发版说明</a> ，里面列出了本次版本详细的特性、改进，Bug 修复，以及具体的贡献者。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlongincubating-后续规划">Apache InLong(incubating) 后续规划<a href="#apache-inlongincubating-后续规划" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>后续版本，我们会进一步释放 InLong 的能力，覆盖更多的使用场景，主要包括：</p><ul><li>支持数据接入 ClickHouse 的链路</li><li>支持 DB 数据的采集</li><li>全链路的指标审计二期功能</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlongincubating-贡献者招募">Apache InLong(incubating) 贡献者招募<a href="#apache-inlongincubating-贡献者招募" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>Apache InLong(incubating) 当前共有 71 名 contributor，仍处在项目孵化的初期，还有很多待办事项，包括：Feature 开发、社区运营，文档翻译等，期待更多开源爱好者加入 InLong，一起将 InLong 打造成 Apache 顶级项目。以下为 InLong 项目的时间线：</p><ul><li>2021年12月22日，发布 0.12.0 版本</li><li>2021年11月5日，发布0.11.0版本</li><li>2021年9月3日，发布0.10.0版本</li><li>2021年7月12日，发起更名后第一个版本 0.9.0 投票</li><li>2021年4月11日，完成社区改名，调整为 Apache InLong</li><li>2021年2月11日，发起社区改名变更申请</li><li>2020年12月20日，进行项目改名讨论和投票</li><li>2020年5月30日，按照 Apache 社区规范发布第一个社区版本</li><li>2019年11月3日，进入 Apache 社区孵化</li><li>2019年9月12日，TubeMQ 对外开源并捐献给 Apache 社区</li></ul>]]></content>
        <author>
            <name>gosonzhang</name>
            <uri>https://github.com/gosonzhang</uri>
        </author>
        <category label="Apache InLong" term="Apache InLong"/>
        <category label="Version" term="Version"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[0.11.0 版本发布]]></title>
        <id>https://inlong.apache.org/zh-CN/blog/2021/11/10/release-0.11.0</id>
        <link href="https://inlong.apache.org/zh-CN/blog/2021/11/10/release-0.11.0"/>
        <updated>2021-11-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Apache InLong(incubating) 从 0.9.0 版本开始由原 Apache TubeMQ（incubating）改名而来，伴随着名称的改变，InLong 也由单一的消息队列升级为一站式海量数据集成框架，支持了大数据领域的采集、汇聚、缓存和分拣功能，用户只需要简单的配置就可以把数据从数据源导入到实时计算引擎或者落地到离线存储。]]></summary>
        <content type="html"><![CDATA[<p>Apache InLong(incubating) 从 0.9.0 版本开始由原 Apache TubeMQ（incubating）改名而来，伴随着名称的改变，InLong 也由单一的消息队列升级为一站式海量数据集成框架，支持了大数据领域的采集、汇聚、缓存和分拣功能，用户只需要简单的配置就可以把数据从数据源导入到实时计算引擎或者落地到离线存储。</p><p>刚刚发布的 0.11.0-incubating 版本是改名之后的第三个版本，这个版本：</p><ul><li>进一步降低用户的使用门槛，支持 InLong 所有模块 on Kubernets，并且对官网进行了重构，用户可以更加方便的查阅相关文档</li><li>支持更多的业务场景，增加 Dataproxy -&gt; Pulsar 的数据流向，覆盖对数据完整性、一致性要求更高的场景</li><li>支持更多语言的 SDK，这个版本开放了生产级别的 TubeMQ Go SDK，方便使用 Go 语言的用户接入</li></ul><p>该版本关闭超过 80 个 issue, 包含了四个重大 feature 和 35 个 improvements 。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlongincubating-简介">Apache InLong(incubating) 简介<a href="#apache-inlongincubating-简介" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p><a href="https://inlong.apache.org/zh-cn/" target="_blank" rel="noopener noreferrer">Apache InLong（应龙）</a>是腾讯捐献给 Apache 社区的一站式海量数据集成框架，提供自动、安全、可靠和高性能的数据传输能力，方便业务构建基于流式的数据分析、建模和应用。InLong 项目原本叫TubeMQ ，专注高性能、低成本的消息队列服务。为了进一步释放 TubeMQ 周边生态能力，我们将项目升级为 InLong ，专注打造一站式的数据集成解决方案。</p><p>Apache InLong 以腾讯内部使用的 TDBank 为原型，依托万亿级别的数据接入和处理能力，整合了数据采集、汇聚、存储、分拣数据处理全流程，拥有简单易用、灵活扩展、稳定可靠等特性。</p><img loading="lazy" src="../img/inlong-structure-zh.png" align="center" alt="Apache InLong" class="img_ev3q"><p> Apache InLong 服务于数据采集到落地的整个生命周期，按数据的不同阶段提供不同的处理模块，主要包括：</p><ul><li><strong>inlong-agent</strong> ，数据采集 Agent ，支持从指定目录或文件读取常规日志，进行逐条的数据上报。后续也将扩展 DB 采集，扩展HTTP上报等能力。</li><li><strong>inlong-dataproxy</strong> ，一个基于 Flume-ng 的 Proxy 组件，支持数据发送阻塞、落盘重发，拥有将接收数据后转发到不同MQ（消息队列）的能力。</li><li><strong>inlong-tubemq</strong> ，腾讯自研的消息队列服务，专注服务大数据场景下海量数据的高性能存储和传输，在海量实践和低成本方面有着比较好的核心优势。 注：InLong 0.11.0 后台中增加了对于Apache Pulsar的支持，全流程数据流和管控工作会在下个版本完成。</li><li><strong>inlong-sort</strong> ，从不同的 MQ 消费数据后进行 ETL 处理，然后将数据汇聚并写入 Hive、ClickHouse、Hbase、IceBerg 等。</li><li><strong>inlong-manager</strong> ，提供完整的数据服务管控能力，包括元数据、OpenAPI、任务流、权限等。</li><li><strong>inlong-website</strong> ，一个用于管理数据接入的前端页面，简化整个 InLong 管控平台的使用。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlongincubating-0110-主要特性">Apache InLong(incubating) 0.11.0 主要特性<a href="#apache-inlongincubating-0110-主要特性" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="inlong-on-kubernetes">InLong on Kubernetes<a href="#inlong-on-kubernetes" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>InLong 包括了数据采集，数据汇聚，数据缓存、数据分拣以及集群管控等多个组件，为了方便用户使用和支持云原生特性，目前所有的组件都已经支持在 Kubernetes 部署。
感谢 @shink 贡献的这个特性，具体详情可以参考:
<a href="https://github.com/apache/incubator-inlong/issues/1308" target="_blank" rel="noopener noreferrer">INLONG-1308</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="dataproxy-pulsar-数据流打通">dataproxy-&gt;pulsar 数据流打通<a href="#dataproxy-pulsar-数据流打通" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>在 0.11.0 版本之前的版本，InLong 的数据缓存层只能支持 TubeMQ，TubeMQ 很适合于超大规模数据量的场景，但在极端场景下可能会有少量数据丢失的风向；为了提供数据可靠性，Inlong 在 0.11.0 版本中增加了对于 Apache Pulsar 的支持，现在InLong 后台可以支持数据流可以从 agent -&gt; dataProxy -&gt; tubeMQ/pulsar -&gt; sort.  Pulsar 的引入，使得 InLong 覆盖的应用场景更加丰富，可以满足更多用户的需求。
感谢 @baomingyu 对于这个特性的贡献，更多详情可以参考:
<a href="https://github.com/apache/incubator-inlong/issues/1330" target="_blank" rel="noopener noreferrer">INLONG-1330</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="go-语言-sdk">Go 语言 SDK<a href="#go-语言-sdk" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>在 0.11.0 版本之前的 TubeMQ 支持 Java 、C++、 Python 三种语言的 SDK，随着 Go 语言的应用越来越多，社区中对于 Go 语言 SDK 的需求也日益增加，0.11.0 版本正式引入了 TubeMQ 的 Go 语言 SDK。丰富了多语言 SDK，也降低了 Go 语言用户的接入和使用难度。
感谢 @TszKitLo40 贡献的这个特性，更多详情可以参考：
<a href="https://github.com/apache/incubator-inlong/issues/624" target="_blank" rel="noopener noreferrer">INLONG-624</a>
<a href="https://github.com/apache/incubator-inlong/issues/1570" target="_blank" rel="noopener noreferrer">INLONG-1578</a>
<a href="https://github.com/apache/incubator-inlong/issues/1584" target="_blank" rel="noopener noreferrer">INLONG-1584</a>
<a href="https://github.com/apache/incubator-inlong/issues/1666" target="_blank" rel="noopener noreferrer">INLONG-1666</a>
<a href="https://github.com/apache/incubator-inlong/issues/1682" target="_blank" rel="noopener noreferrer">INLONG-1682</a></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="官网重构">官网重构<a href="#官网重构" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h4><p>在 0.11.0 版本中，InLong 采用 Docusaurus 重构了<a href="https://inlong.apache.org/" target="_blank" rel="noopener noreferrer">官网</a>，提供了更加简洁、直观的文档管理和展示。
感谢 @leezng 对于这个特性的贡献。更多详情可以参考：
<a href="https://github.com/apache/incubator-inlong/issues/1631" target="_blank" rel="noopener noreferrer">INLONG-1631</a>
<a href="https://github.com/apache/incubator-inlong/issues/1632" target="_blank" rel="noopener noreferrer">INLONG-1632</a>
<a href="https://github.com/apache/incubator-inlong/issues/1633" target="_blank" rel="noopener noreferrer">INLONG-1633</a>
<a href="https://github.com/apache/incubator-inlong/issues/1634" target="_blank" rel="noopener noreferrer">INLONG-1634</a>
<a href="https://github.com/apache/incubator-inlong/issues/1635" target="_blank" rel="noopener noreferrer">INLONG-1635</a>
<a href="https://github.com/apache/incubator-inlong/issues/1636" target="_blank" rel="noopener noreferrer">INLONG-1636</a>
<a href="https://github.com/apache/incubator-inlong/issues/1637" target="_blank" rel="noopener noreferrer">INLONG-1637</a>
<a href="https://github.com/apache/incubator-inlong/issues/1638" target="_blank" rel="noopener noreferrer">INLONG-1638</a></p><p>除了上述重大 feature 之外，InLong 0.11.0 版本还有其他的关键改进，包括但不限于：</p><ul><li>在主 Repo 中增加了贡献指引，<a href="https://github.com/apache/incubator-inlong/issues/1623" target="_blank" rel="noopener noreferrer">INLONG-1623</a></li><li>增加 Inlong-Manager 对 DataProxy 的配置管理，<a href="https://github.com/apache/incubator-inlong/issues/1595" target="_blank" rel="noopener noreferrer">INLONG-1595</a></li><li>优化了 github issue 模板，<a href="https://github.com/apache/incubator-inlong/issues/1585" target="_blank" rel="noopener noreferrer">INLONG-1585</a></li><li>代码 Checkstyle 优化，<a href="https://github.com/apache/incubator-inlong/issues/1571" target="_blank" rel="noopener noreferrer">INLONG-1571</a>, <a href="https://github.com/apache/incubator-inlong/issues/1593" target="_blank" rel="noopener noreferrer">INLONG-1593</a>, <a href="https://github.com/apache/incubator-inlong/issues/1593" target="_blank" rel="noopener noreferrer">INLONG-1593</a>, <a href="https://github.com/apache/incubator-inlong/issues/1662" target="_blank" rel="noopener noreferrer">INLONG-1662</a></li><li>Agent 引入消息过滤器，<a href="https://github.com/apache/incubator-inlong/issues/1641" target="_blank" rel="noopener noreferrer">INLONG-1641</a></li></ul><p>0.11.0 版本还修复了~45个bug，在此，感谢所有为 Inlong 社区做出贡献的各位同学（排名不分先后）
shink, baomingyu, TszKitLo40, leezng, ruanwenjun, leo65535, luchunliang, pierre94, EMsnap, dockerzhang, gosonzhang, healchow, guangxuCheng, yuanboliu</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlongincubating-后续规划">Apache InLong(incubating) 后续规划<a href="#apache-inlongincubating-后续规划" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>在 InLong 后续版本规划中，我们会进一步释放 InLong 的能力，覆盖更多的使用场景，主要包括</p><ul><li>支持 Apache Pulsar 全链路数据接入能力，包括后端处理和前端管理能力。</li><li>支持 ClickHouse、Apache Iceberg、Apache HBase 等数据流向</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-inlongincubating-贡献者招募">Apache InLong(incubating) 贡献者招募<a href="#apache-inlongincubating-贡献者招募" class="hash-link" aria-label="Direct link to heading" title="Direct link to heading">​</a></h3><p>Apache InLong(incubating) 当前的 contributor 共计62名，还处在项目孵化的初期，有很多工作需要做，包括社区运营、文档翻译、Feature 开发等，期待更多的开源爱好者一起共建，努力将 InLong 打造成 Apache 顶级项目，以下为 InLong 重要发展时间点：</p><ul><li>2021年11月5日，发布0.11.0版本</li><li>2021年9月3日，发布0.10.0版本</li><li>2021年7月12日，发起更名后第一个版本 0.9.0 投票</li><li>2021年4月11日，完成社区改名，调整为 Apache InLong</li><li>2021年2月11日，发起社区改名变更申请</li><li>2020年12月20日，进行项目改名讨论和投票</li><li>2020年5月30日，按照 Apache 社区规范发布第一个社区版本</li><li>2019年11月3日，进入 Apache 社区孵化</li><li>2019年9月12日，TubeMQ 对外开源并捐献给 Apache 社区</li></ul>]]></content>
        <author>
            <name>dockerzhang</name>
            <uri>https://github.com/dockerzhang</uri>
        </author>
        <category label="Apache InLong" term="Apache InLong"/>
        <category label="Version" term="Version"/>
    </entry>
</feed>